package org.lyranthe.araethura.ecs.models
import org.lyranthe.araethura.ecs.models
final case class ListContainerInstancesRequest(cluster: scala.Option[java.lang.String] = None, filter: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None, status: scala.Option[java.lang.String] = None)
case object ClusterNotFoundException
final case class RegisterTaskDefinitionRequest(family: java.lang.String, containerDefinitions: scala.List[models.ContainerDefinition], volumes: scala.Option[scala.List[models.Volume]] = None, taskRoleArn: scala.Option[java.lang.String] = None, placementConstraints: scala.Option[scala.List[models.TaskDefinitionPlacementConstraint]] = None, networkMode: scala.Option[java.lang.String] = None)
case object InvalidParameterException
final case class Volume(name: scala.Option[java.lang.String] = None, host: scala.Option[models.HostVolumeProperties] = None)
final case class ListTaskDefinitionsRequest(familyPrefix: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, sort: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class ClientException(message: scala.Option[java.lang.String] = None)
final case class DeleteAttributesRequest(attributes: scala.List[models.Attribute], cluster: scala.Option[java.lang.String] = None)
final case class PlacementConstraint(`type`: scala.Option[java.lang.String] = None, expression: scala.Option[java.lang.String] = None)
final case class ListTaskDefinitionFamiliesResponse(families: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeTasksResponse(tasks: scala.Option[scala.List[models.Task]] = None, failures: scala.Option[scala.List[models.Failure]] = None)
final case class ServerException(message: scala.Option[java.lang.String] = None)
final case class LogConfiguration(logDriver: java.lang.String, options: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class DiscoverPollEndpointResponse(endpoint: scala.Option[java.lang.String] = None, telemetryEndpoint: scala.Option[java.lang.String] = None)
final case class PutAttributesRequest(attributes: scala.List[models.Attribute], cluster: scala.Option[java.lang.String] = None)
final case class UpdateContainerAgentRequest(containerInstance: java.lang.String, cluster: scala.Option[java.lang.String] = None)
final case class ListServicesResponse(serviceArns: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class CreateClusterResponse(cluster: scala.Option[models.Cluster] = None)
final case class KernelCapabilities(add: scala.Option[scala.List[java.lang.String]] = None, drop: scala.Option[scala.List[java.lang.String]] = None)
final case class SubmitTaskStateChangeRequest(cluster: scala.Option[java.lang.String] = None, task: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, reason: scala.Option[java.lang.String] = None, containers: scala.Option[scala.List[models.ContainerStateChange]] = None, attachments: scala.Option[scala.List[models.AttachmentStateChange]] = None)
final case class SubmitContainerStateChangeRequest(cluster: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, reason: scala.Option[java.lang.String] = None, task: scala.Option[java.lang.String] = None, containerName: scala.Option[java.lang.String] = None, exitCode: scala.Option[scala.Int] = None, networkBindings: scala.Option[scala.List[models.NetworkBinding]] = None)
final case class Service(createdAt: scala.Option[java.time.Instant] = None, serviceArn: scala.Option[java.lang.String] = None, serviceName: scala.Option[java.lang.String] = None, roleArn: scala.Option[java.lang.String] = None, taskDefinition: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, clusterArn: scala.Option[java.lang.String] = None, deployments: scala.Option[scala.List[models.Deployment]] = None, placementConstraints: scala.Option[scala.List[models.PlacementConstraint]] = None, placementStrategy: scala.Option[scala.List[models.PlacementStrategy]] = None, deploymentConfiguration: scala.Option[models.DeploymentConfiguration] = None, events: scala.Option[scala.List[models.ServiceEvent]] = None, loadBalancers: scala.Option[scala.List[models.LoadBalancer]] = None, desiredCount: scala.Option[scala.Int] = None, runningCount: scala.Option[scala.Int] = None, pendingCount: scala.Option[scala.Int] = None, networkConfiguration: scala.Option[models.NetworkConfiguration] = None)
final case class Device(hostPath: java.lang.String, containerPath: scala.Option[java.lang.String] = None, permissions: scala.Option[scala.List[java.lang.String]] = None)
final case class ListClustersResponse(clusterArns: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeTaskDefinitionResponse(taskDefinition: scala.Option[models.TaskDefinition] = None)
case object ClusterContainsContainerInstancesException
final case class DeleteServiceRequest(service: java.lang.String, cluster: scala.Option[java.lang.String] = None)
final case class LinuxParameters(capabilities: scala.Option[models.KernelCapabilities] = None, devices: scala.Option[scala.List[models.Device]] = None, initProcessEnabled: scala.Option[scala.Boolean] = None)
final case class UpdateContainerAgentResponse(containerInstance: scala.Option[models.ContainerInstance] = None)
final case class DescribeClustersRequest(clusters: scala.Option[scala.List[java.lang.String]] = None)
final case class ContainerStateChange(containerName: scala.Option[java.lang.String] = None, reason: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, exitCode: scala.Option[scala.Int] = None, networkBindings: scala.Option[scala.List[models.NetworkBinding]] = None)
final case class DeleteClusterResponse(cluster: scala.Option[models.Cluster] = None)
final case class DescribeClustersResponse(clusters: scala.Option[scala.List[models.Cluster]] = None, failures: scala.Option[scala.List[models.Failure]] = None)
final case class RegisterTaskDefinitionResponse(taskDefinition: scala.Option[models.TaskDefinition] = None)
final case class DeleteAttributesResponse(attributes: scala.Option[scala.List[models.Attribute]] = None)
final case class DeregisterContainerInstanceResponse(containerInstance: scala.Option[models.ContainerInstance] = None)
final case class Ulimit(name: java.lang.String, softLimit: scala.Int, hardLimit: scala.Int)
final case class ListTasksResponse(taskArns: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class ContainerOverride(name: scala.Option[java.lang.String] = None, command: scala.Option[scala.List[java.lang.String]] = None, environment: scala.Option[scala.List[models.KeyValuePair]] = None, cpu: scala.Option[scala.Int] = None, memory: scala.Option[scala.Int] = None, memoryReservation: scala.Option[scala.Int] = None)
final case class Container(name: scala.Option[java.lang.String] = None, reason: scala.Option[java.lang.String] = None, taskArn: scala.Option[java.lang.String] = None, containerArn: scala.Option[java.lang.String] = None, lastStatus: scala.Option[java.lang.String] = None, exitCode: scala.Option[scala.Int] = None, networkBindings: scala.Option[scala.List[models.NetworkBinding]] = None, networkInterfaces: scala.Option[scala.List[models.NetworkInterface]] = None)
final case class ListAttributesRequest(targetType: java.lang.String, cluster: scala.Option[java.lang.String] = None, attributeName: scala.Option[java.lang.String] = None, attributeValue: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class DescribeTasksRequest(tasks: scala.List[java.lang.String], cluster: scala.Option[java.lang.String] = None)
final case class VolumeFrom(sourceContainer: scala.Option[java.lang.String] = None, readOnly: scala.Option[scala.Boolean] = None)
final case class PutAttributesResponse(attributes: scala.Option[scala.List[models.Attribute]] = None)
final case class Failure(arn: scala.Option[java.lang.String] = None, reason: scala.Option[java.lang.String] = None)
final case class DescribeContainerInstancesRequest(containerInstances: scala.List[java.lang.String], cluster: scala.Option[java.lang.String] = None)
final case class ListAttributesResponse(attributes: scala.Option[scala.List[models.Attribute]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class AwsVpcConfiguration(subnets: scala.List[java.lang.String], securityGroups: scala.Option[scala.List[java.lang.String]] = None)
final case class StartTaskResponse(tasks: scala.Option[scala.List[models.Task]] = None, failures: scala.Option[scala.List[models.Failure]] = None)
final case class DeregisterContainerInstanceRequest(containerInstance: java.lang.String, cluster: scala.Option[java.lang.String] = None, force: scala.Option[scala.Boolean] = None)
final case class NetworkInterface(attachmentId: scala.Option[java.lang.String] = None, privateIpv4Address: scala.Option[java.lang.String] = None, ipv6Address: scala.Option[java.lang.String] = None)
final case class LoadBalancer(targetGroupArn: scala.Option[java.lang.String] = None, loadBalancerName: scala.Option[java.lang.String] = None, containerName: scala.Option[java.lang.String] = None, containerPort: scala.Option[scala.Int] = None)
final case class KeyValuePair(name: scala.Option[java.lang.String] = None, value: scala.Option[java.lang.String] = None)
case object ClusterContainsServicesException
final case class ListContainerInstancesResponse(containerInstanceArns: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class Attachment(id: scala.Option[java.lang.String] = None, `type`: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, details: scala.Option[scala.List[models.KeyValuePair]] = None)
final case class AttachmentStateChange(attachmentArn: java.lang.String, status: java.lang.String)
final case class UpdateContainerInstancesStateRequest(containerInstances: scala.List[java.lang.String], status: java.lang.String, cluster: scala.Option[java.lang.String] = None)
final case class DeregisterTaskDefinitionResponse(taskDefinition: scala.Option[models.TaskDefinition] = None)
final case class PlacementStrategy(`type`: scala.Option[java.lang.String] = None, field: scala.Option[java.lang.String] = None)
case object ServiceNotFoundException
final case class RunTaskResponse(tasks: scala.Option[scala.List[models.Task]] = None, failures: scala.Option[scala.List[models.Failure]] = None)
final case class Resource(longValue: scala.Option[scala.Long] = None, name: scala.Option[java.lang.String] = None, `type`: scala.Option[java.lang.String] = None, stringSetValue: scala.Option[scala.List[java.lang.String]] = None, integerValue: scala.Option[scala.Int] = None, doubleValue: scala.Option[scala.Double] = None)
final case class Cluster(clusterArn: scala.Option[java.lang.String] = None, clusterName: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, registeredContainerInstancesCount: scala.Option[scala.Int] = None, runningTasksCount: scala.Option[scala.Int] = None, pendingTasksCount: scala.Option[scala.Int] = None, activeServicesCount: scala.Option[scala.Int] = None)
final case class VersionInfo(agentVersion: scala.Option[java.lang.String] = None, agentHash: scala.Option[java.lang.String] = None, dockerVersion: scala.Option[java.lang.String] = None)
final case class UpdateServiceResponse(service: scala.Option[models.Service] = None)
case object TargetNotFoundException
final case class ServiceEvent(id: scala.Option[java.lang.String] = None, message: scala.Option[java.lang.String] = None, createdAt: scala.Option[java.time.Instant] = None)
final case class Task(containers: scala.Option[scala.List[models.Container]] = None, createdAt: scala.Option[java.time.Instant] = None, startedAt: scala.Option[java.time.Instant] = None, stoppedAt: scala.Option[java.time.Instant] = None, version: scala.Option[scala.Long] = None, stoppedReason: scala.Option[java.lang.String] = None, group: scala.Option[java.lang.String] = None, startedBy: scala.Option[java.lang.String] = None, taskArn: scala.Option[java.lang.String] = None, taskDefinitionArn: scala.Option[java.lang.String] = None, clusterArn: scala.Option[java.lang.String] = None, desiredStatus: scala.Option[java.lang.String] = None, containerInstanceArn: scala.Option[java.lang.String] = None, lastStatus: scala.Option[java.lang.String] = None, attachments: scala.Option[scala.List[models.Attachment]] = None, overrides: scala.Option[models.TaskOverride] = None)
case object ServiceNotActiveException
final case class NetworkBinding(bindIP: scala.Option[java.lang.String] = None, containerPort: scala.Option[scala.Int] = None, hostPort: scala.Option[scala.Int] = None, protocol: scala.Option[java.lang.String] = None)
final case class SubmitContainerStateChangeResponse(acknowledgment: scala.Option[java.lang.String] = None)
final case class HostEntry(hostname: java.lang.String, ipAddress: java.lang.String)
final case class Attribute(name: java.lang.String, value: scala.Option[java.lang.String] = None, targetId: scala.Option[java.lang.String] = None, targetType: scala.Option[java.lang.String] = None)
final case class ContainerDefinition(mountPoints: scala.Option[scala.List[models.MountPoint]] = None, logConfiguration: scala.Option[models.LogConfiguration] = None, name: scala.Option[java.lang.String] = None, hostname: scala.Option[java.lang.String] = None, image: scala.Option[java.lang.String] = None, user: scala.Option[java.lang.String] = None, workingDirectory: scala.Option[java.lang.String] = None, memory: scala.Option[scala.Int] = None, memoryReservation: scala.Option[scala.Int] = None, essential: scala.Option[scala.Boolean] = None, disableNetworking: scala.Option[scala.Boolean] = None, privileged: scala.Option[scala.Boolean] = None, readonlyRootFilesystem: scala.Option[scala.Boolean] = None, volumesFrom: scala.Option[scala.List[models.VolumeFrom]] = None, linuxParameters: scala.Option[models.LinuxParameters] = None, ulimits: scala.Option[scala.List[models.Ulimit]] = None, dnsSearchDomains: scala.Option[scala.List[java.lang.String]] = None, dockerSecurityOptions: scala.Option[scala.List[java.lang.String]] = None, command: scala.Option[scala.List[java.lang.String]] = None, links: scala.Option[scala.List[java.lang.String]] = None, dnsServers: scala.Option[scala.List[java.lang.String]] = None, entryPoint: scala.Option[scala.List[java.lang.String]] = None, dockerLabels: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, extraHosts: scala.Option[scala.List[models.HostEntry]] = None, cpu: scala.Option[scala.Int] = None, environment: scala.Option[scala.List[models.KeyValuePair]] = None, portMappings: scala.Option[scala.List[models.PortMapping]] = None)
final case class StopTaskRequest(task: java.lang.String, cluster: scala.Option[java.lang.String] = None, reason: scala.Option[java.lang.String] = None)
final case class RegisterContainerInstanceResponse(containerInstance: scala.Option[models.ContainerInstance] = None)
final case class DeploymentConfiguration(maximumPercent: scala.Option[scala.Int] = None, minimumHealthyPercent: scala.Option[scala.Int] = None)
final case class CreateServiceRequest(taskDefinition: java.lang.String, serviceName: java.lang.String, desiredCount: scala.Int, clientToken: scala.Option[java.lang.String] = None, cluster: scala.Option[java.lang.String] = None, role: scala.Option[java.lang.String] = None, placementConstraints: scala.Option[scala.List[models.PlacementConstraint]] = None, placementStrategy: scala.Option[scala.List[models.PlacementStrategy]] = None, deploymentConfiguration: scala.Option[models.DeploymentConfiguration] = None, loadBalancers: scala.Option[scala.List[models.LoadBalancer]] = None, networkConfiguration: scala.Option[models.NetworkConfiguration] = None)
final case class PortMapping(containerPort: scala.Option[scala.Int] = None, hostPort: scala.Option[scala.Int] = None, protocol: scala.Option[java.lang.String] = None)
case object NoUpdateAvailableException
final case class DiscoverPollEndpointRequest(containerInstance: scala.Option[java.lang.String] = None, cluster: scala.Option[java.lang.String] = None)
final case class DescribeContainerInstancesResponse(containerInstances: scala.Option[scala.List[models.ContainerInstance]] = None, failures: scala.Option[scala.List[models.Failure]] = None)
final case class CreateClusterRequest(clusterName: scala.Option[java.lang.String] = None)
case object MissingVersionException
final case class StartTaskRequest(taskDefinition: java.lang.String, containerInstances: scala.List[java.lang.String], cluster: scala.Option[java.lang.String] = None, startedBy: scala.Option[java.lang.String] = None, group: scala.Option[java.lang.String] = None, overrides: scala.Option[models.TaskOverride] = None, networkConfiguration: scala.Option[models.NetworkConfiguration] = None)
final case class ListTasksRequest(serviceName: scala.Option[java.lang.String] = None, startedBy: scala.Option[java.lang.String] = None, containerInstance: scala.Option[java.lang.String] = None, cluster: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, family: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None, desiredStatus: scala.Option[java.lang.String] = None)
final case class UpdateServiceRequest(service: java.lang.String, cluster: scala.Option[java.lang.String] = None, taskDefinition: scala.Option[java.lang.String] = None, desiredCount: scala.Option[scala.Int] = None, deploymentConfiguration: scala.Option[models.DeploymentConfiguration] = None, networkConfiguration: scala.Option[models.NetworkConfiguration] = None)
final case class RegisterContainerInstanceRequest(cluster: scala.Option[java.lang.String] = None, instanceIdentityDocument: scala.Option[java.lang.String] = None, instanceIdentityDocumentSignature: scala.Option[java.lang.String] = None, containerInstanceArn: scala.Option[java.lang.String] = None, totalResources: scala.Option[scala.List[models.Resource]] = None, versionInfo: scala.Option[models.VersionInfo] = None, attributes: scala.Option[scala.List[models.Attribute]] = None)
final case class DescribeServicesResponse(services: scala.Option[scala.List[models.Service]] = None, failures: scala.Option[scala.List[models.Failure]] = None)
final case class TaskDefinition(volumes: scala.Option[scala.List[models.Volume]] = None, status: scala.Option[java.lang.String] = None, taskDefinitionArn: scala.Option[java.lang.String] = None, family: scala.Option[java.lang.String] = None, taskRoleArn: scala.Option[java.lang.String] = None, placementConstraints: scala.Option[scala.List[models.TaskDefinitionPlacementConstraint]] = None, requiresAttributes: scala.Option[scala.List[models.Attribute]] = None, networkMode: scala.Option[java.lang.String] = None, revision: scala.Option[scala.Int] = None, containerDefinitions: scala.Option[scala.List[models.ContainerDefinition]] = None)
final case class ContainerInstance(attributes: scala.Option[scala.List[models.Attribute]] = None, registeredAt: scala.Option[java.time.Instant] = None, version: scala.Option[scala.Long] = None, containerInstanceArn: scala.Option[java.lang.String] = None, ec2InstanceId: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, versionInfo: scala.Option[models.VersionInfo] = None, remainingResources: scala.Option[scala.List[models.Resource]] = None, registeredResources: scala.Option[scala.List[models.Resource]] = None, runningTasksCount: scala.Option[scala.Int] = None, pendingTasksCount: scala.Option[scala.Int] = None, agentConnected: scala.Option[scala.Boolean] = None, attachments: scala.Option[scala.List[models.Attachment]] = None, agentUpdateStatus: scala.Option[java.lang.String] = None)
final case class DeregisterTaskDefinitionRequest(taskDefinition: java.lang.String)
final case class CreateServiceResponse(service: scala.Option[models.Service] = None)
final case class ListTaskDefinitionsResponse(taskDefinitionArns: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DeleteServiceResponse(service: scala.Option[models.Service] = None)
final case class ListTaskDefinitionFamiliesRequest(familyPrefix: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class DescribeTaskDefinitionRequest(taskDefinition: java.lang.String)
final case class DeleteClusterRequest(cluster: java.lang.String)
final case class ListClustersRequest(nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
case object AttributeLimitExceededException
case object UpdateInProgressException
final case class HostVolumeProperties(sourcePath: scala.Option[java.lang.String] = None)
final case class ListServicesRequest(cluster: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class DescribeServicesRequest(services: scala.List[java.lang.String], cluster: scala.Option[java.lang.String] = None)
final case class SubmitTaskStateChangeResponse(acknowledgment: scala.Option[java.lang.String] = None)
final case class RunTaskRequest(taskDefinition: java.lang.String, cluster: scala.Option[java.lang.String] = None, startedBy: scala.Option[java.lang.String] = None, group: scala.Option[java.lang.String] = None, count: scala.Option[scala.Int] = None, placementConstraints: scala.Option[scala.List[models.PlacementConstraint]] = None, placementStrategy: scala.Option[scala.List[models.PlacementStrategy]] = None, overrides: scala.Option[models.TaskOverride] = None, networkConfiguration: scala.Option[models.NetworkConfiguration] = None)
final case class Deployment(id: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, taskDefinition: scala.Option[java.lang.String] = None, desiredCount: scala.Option[scala.Int] = None, pendingCount: scala.Option[scala.Int] = None, runningCount: scala.Option[scala.Int] = None, createdAt: scala.Option[java.time.Instant] = None, updatedAt: scala.Option[java.time.Instant] = None, networkConfiguration: scala.Option[models.NetworkConfiguration] = None)
final case class TaskDefinitionPlacementConstraint(`type`: scala.Option[java.lang.String] = None, expression: scala.Option[java.lang.String] = None)
final case class StopTaskResponse(task: scala.Option[models.Task] = None)
final case class MountPoint(sourceVolume: scala.Option[java.lang.String] = None, containerPath: scala.Option[java.lang.String] = None, readOnly: scala.Option[scala.Boolean] = None)
final case class TaskOverride(containerOverrides: scala.Option[scala.List[models.ContainerOverride]] = None, taskRoleArn: scala.Option[java.lang.String] = None)
final case class UpdateContainerInstancesStateResponse(containerInstances: scala.Option[scala.List[models.ContainerInstance]] = None, failures: scala.Option[scala.List[models.Failure]] = None)
final case class NetworkConfiguration(awsvpcConfiguration: scala.Option[models.AwsVpcConfiguration] = None)