package org.lyranthe.araethura.cognitoidp.models
import org.lyranthe.araethura.cognitoidp.models
final case class InvalidSmsRoleTrustRelationshipException(message: scala.Option[java.lang.String] = None)
final case class DeleteUserPoolRequest(userPoolId: java.lang.String)
case object AdminLinkProviderForUserResponse
final case class VerifyUserAttributeRequest(accessToken: java.lang.String, attributeName: java.lang.String, code: java.lang.String)
final case class NumberAttributeConstraintsType(minValue: scala.Option[java.lang.String] = None, maxValue: scala.Option[java.lang.String] = None)
final case class GetUICustomizationResponse(uicustomization: models.UICustomizationType)
final case class AdminEnableUserRequest(userPoolId: java.lang.String, username: java.lang.String)
final case class ListResourceServersResponse(resourceServers: scala.List[models.ResourceServerType], nextToken: scala.Option[java.lang.String] = None)
final case class InvalidEmailRoleAccessPolicyException(message: scala.Option[java.lang.String] = None)
final case class DescribeUserPoolDomainResponse(domainDescription: scala.Option[models.DomainDescriptionType] = None)
final case class AdminListGroupsForUserResponse(groups: scala.Option[scala.List[models.GroupType]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UpdateIdentityProviderResponse(identityProvider: models.IdentityProviderType)
final case class AdminGetDeviceRequest(deviceKey: java.lang.String, userPoolId: java.lang.String, username: java.lang.String)
final case class CreateUserPoolClientRequest(clientName: java.lang.String, userPoolId: java.lang.String, generateSecret: scala.Option[scala.Boolean] = None, callbackURLs: scala.Option[scala.List[java.lang.String]] = None, refreshTokenValidity: scala.Option[scala.Int] = None, allowedOAuthFlows: scala.Option[scala.List[java.lang.String]] = None, readAttributes: scala.Option[scala.List[java.lang.String]] = None, writeAttributes: scala.Option[scala.List[java.lang.String]] = None, logoutURLs: scala.Option[scala.List[java.lang.String]] = None, explicitAuthFlows: scala.Option[scala.List[java.lang.String]] = None, allowedOAuthScopes: scala.Option[scala.List[java.lang.String]] = None, allowedOAuthFlowsUserPoolClient: scala.Option[scala.Boolean] = None, defaultRedirectURI: scala.Option[java.lang.String] = None, supportedIdentityProviders: scala.Option[scala.List[java.lang.String]] = None)
final case class AliasExistsException(message: scala.Option[java.lang.String] = None)
final case class UpdateResourceServerResponse(resourceServer: models.ResourceServerType)
final case class UserPoolClientDescription(clientId: scala.Option[java.lang.String] = None, userPoolId: scala.Option[java.lang.String] = None, clientName: scala.Option[java.lang.String] = None)
final case class UpdateUserPoolRequest(userPoolId: java.lang.String, emailVerificationMessage: scala.Option[java.lang.String] = None, adminCreateUserConfig: scala.Option[models.AdminCreateUserConfigType] = None, smsConfiguration: scala.Option[models.SmsConfigurationType] = None, lambdaConfig: scala.Option[models.LambdaConfigType] = None, userPoolTags: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, emailVerificationSubject: scala.Option[java.lang.String] = None, deviceConfiguration: scala.Option[models.DeviceConfigurationType] = None, autoVerifiedAttributes: scala.Option[scala.List[java.lang.String]] = None, emailConfiguration: scala.Option[models.EmailConfigurationType] = None, smsVerificationMessage: scala.Option[java.lang.String] = None, smsAuthenticationMessage: scala.Option[java.lang.String] = None, verificationMessageTemplate: scala.Option[models.VerificationMessageTemplateType] = None, mfaConfiguration: scala.Option[java.lang.String] = None, policies: scala.Option[models.UserPoolPolicyType] = None)
final case class ListUserPoolsRequest(maxResults: scala.Int, nextToken: scala.Option[java.lang.String] = None)
final case class UserImportJobType(creationDate: scala.Option[java.time.Instant] = None, startDate: scala.Option[java.time.Instant] = None, completionDate: scala.Option[java.time.Instant] = None, preSignedUrl: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, jobName: scala.Option[java.lang.String] = None, cloudWatchLogsRoleArn: scala.Option[java.lang.String] = None, importedUsers: scala.Option[scala.Long] = None, skippedUsers: scala.Option[scala.Long] = None, failedUsers: scala.Option[scala.Long] = None, userPoolId: scala.Option[java.lang.String] = None, completionMessage: scala.Option[java.lang.String] = None, jobId: scala.Option[java.lang.String] = None)
final case class GetDeviceResponse(device: models.DeviceType)
final case class PasswordPolicyType(minimumLength: scala.Option[scala.Int] = None, requireUppercase: scala.Option[scala.Boolean] = None, requireLowercase: scala.Option[scala.Boolean] = None, requireNumbers: scala.Option[scala.Boolean] = None, requireSymbols: scala.Option[scala.Boolean] = None)
final case class UserPoolClientType(lastModifiedDate: scala.Option[java.time.Instant] = None, creationDate: scala.Option[java.time.Instant] = None, callbackURLs: scala.Option[scala.List[java.lang.String]] = None, refreshTokenValidity: scala.Option[scala.Int] = None, clientId: scala.Option[java.lang.String] = None, clientSecret: scala.Option[java.lang.String] = None, clientName: scala.Option[java.lang.String] = None, allowedOAuthFlows: scala.Option[scala.List[java.lang.String]] = None, readAttributes: scala.Option[scala.List[java.lang.String]] = None, writeAttributes: scala.Option[scala.List[java.lang.String]] = None, logoutURLs: scala.Option[scala.List[java.lang.String]] = None, explicitAuthFlows: scala.Option[scala.List[java.lang.String]] = None, allowedOAuthScopes: scala.Option[scala.List[java.lang.String]] = None, userPoolId: scala.Option[java.lang.String] = None, allowedOAuthFlowsUserPoolClient: scala.Option[scala.Boolean] = None, defaultRedirectURI: scala.Option[java.lang.String] = None, supportedIdentityProviders: scala.Option[scala.List[java.lang.String]] = None)
final case class DeviceSecretVerifierConfigType(passwordVerifier: scala.Option[java.lang.String] = None, salt: scala.Option[java.lang.String] = None)
final case class UICustomizationType(lastModifiedDate: scala.Option[java.time.Instant] = None, creationDate: scala.Option[java.time.Instant] = None, css: scala.Option[java.lang.String] = None, imageUrl: scala.Option[java.lang.String] = None, clientId: scala.Option[java.lang.String] = None, cssversion: scala.Option[java.lang.String] = None, userPoolId: scala.Option[java.lang.String] = None)
final case class AdminCreateUserConfigType(allowAdminCreateUserOnly: scala.Option[scala.Boolean] = None, unusedAccountValidityDays: scala.Option[scala.Int] = None, inviteMessageTemplate: scala.Option[models.MessageTemplateType] = None)
final case class InvalidPasswordException(message: scala.Option[java.lang.String] = None)
case object UpdateDeviceStatusResponse
final case class CreateGroupRequest(groupName: java.lang.String, userPoolId: java.lang.String, description: scala.Option[java.lang.String] = None, precedence: scala.Option[scala.Int] = None, roleArn: scala.Option[java.lang.String] = None)
final case class GetUserRequest(accessToken: java.lang.String)
final case class TooManyFailedAttemptsException(message: scala.Option[java.lang.String] = None)
final case class SmsConfigurationType(snsCallerArn: java.lang.String, externalId: scala.Option[java.lang.String] = None)
final case class StopUserImportJobRequest(userPoolId: java.lang.String, jobId: java.lang.String)
final case class GetUICustomizationRequest(userPoolId: java.lang.String, clientId: scala.Option[java.lang.String] = None)
final case class ForgetDeviceRequest(deviceKey: java.lang.String, accessToken: scala.Option[java.lang.String] = None)
final case class DescribeUserImportJobResponse(userImportJob: scala.Option[models.UserImportJobType] = None)
final case class PasswordResetRequiredException(message: scala.Option[java.lang.String] = None)
final case class ForgotPasswordResponse(codeDeliveryDetails: scala.Option[models.CodeDeliveryDetailsType] = None)
case object VerifyUserAttributeResponse
final case class ListUserPoolClientsResponse(userPoolClients: scala.Option[scala.List[models.UserPoolClientDescription]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UnexpectedLambdaException(message: scala.Option[java.lang.String] = None)
final case class PreconditionNotMetException(message: scala.Option[java.lang.String] = None)
final case class DeleteGroupRequest(groupName: java.lang.String, userPoolId: java.lang.String)
final case class AdminRemoveUserFromGroupRequest(userPoolId: java.lang.String, username: java.lang.String, groupName: java.lang.String)
final case class ListUserImportJobsRequest(userPoolId: java.lang.String, maxResults: scala.Int, paginationToken: scala.Option[java.lang.String] = None)
final case class UpdateGroupRequest(groupName: java.lang.String, userPoolId: java.lang.String, description: scala.Option[java.lang.String] = None, precedence: scala.Option[scala.Int] = None, roleArn: scala.Option[java.lang.String] = None)
final case class MessageTemplateType(smsmessage: scala.Option[java.lang.String] = None, emailMessage: scala.Option[java.lang.String] = None, emailSubject: scala.Option[java.lang.String] = None)
final case class UpdateGroupResponse(group: scala.Option[models.GroupType] = None)
final case class ListResourceServersRequest(userPoolId: java.lang.String, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class ConfirmDeviceRequest(accessToken: java.lang.String, deviceKey: java.lang.String, deviceSecretVerifierConfig: scala.Option[models.DeviceSecretVerifierConfigType] = None, deviceName: scala.Option[java.lang.String] = None)
final case class AdminDeleteUserRequest(userPoolId: java.lang.String, username: java.lang.String)
final case class UserNotConfirmedException(message: scala.Option[java.lang.String] = None)
final case class AdminDisableProviderForUserRequest(userPoolId: java.lang.String, user: models.ProviderUserIdentifierType)
case object AdminResetUserPasswordResponse
final case class ConfirmDeviceResponse(userConfirmationNecessary: scala.Option[scala.Boolean] = None)
final case class ResourceServerType(userPoolId: scala.Option[java.lang.String] = None, identifier: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, scopes: scala.Option[scala.List[models.ResourceServerScopeType]] = None)
final case class SchemaAttributeType(numberAttributeConstraints: scala.Option[models.NumberAttributeConstraintsType] = None, stringAttributeConstraints: scala.Option[models.StringAttributeConstraintsType] = None, attributeDataType: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, developerOnlyAttribute: scala.Option[scala.Boolean] = None, mutable: scala.Option[scala.Boolean] = None, required: scala.Option[scala.Boolean] = None)
final case class CreateIdentityProviderRequest(providerType: java.lang.String, providerDetails: scala.collection.immutable.Map[java.lang.String, java.lang.String], providerName: java.lang.String, userPoolId: java.lang.String, attributeMapping: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, idpIdentifiers: scala.Option[scala.List[java.lang.String]] = None)
final case class LambdaConfigType(defineAuthChallenge: scala.Option[java.lang.String] = None, verifyAuthChallengeResponse: scala.Option[java.lang.String] = None, preSignUp: scala.Option[java.lang.String] = None, postConfirmation: scala.Option[java.lang.String] = None, preAuthentication: scala.Option[java.lang.String] = None, createAuthChallenge: scala.Option[java.lang.String] = None, customMessage: scala.Option[java.lang.String] = None, postAuthentication: scala.Option[java.lang.String] = None)
final case class CreateUserPoolRequest(poolName: java.lang.String, emailVerificationMessage: scala.Option[java.lang.String] = None, adminCreateUserConfig: scala.Option[models.AdminCreateUserConfigType] = None, smsConfiguration: scala.Option[models.SmsConfigurationType] = None, usernameAttributes: scala.Option[scala.List[java.lang.String]] = None, lambdaConfig: scala.Option[models.LambdaConfigType] = None, userPoolTags: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, aliasAttributes: scala.Option[scala.List[java.lang.String]] = None, emailVerificationSubject: scala.Option[java.lang.String] = None, schema: scala.Option[scala.List[models.SchemaAttributeType]] = None, deviceConfiguration: scala.Option[models.DeviceConfigurationType] = None, autoVerifiedAttributes: scala.Option[scala.List[java.lang.String]] = None, emailConfiguration: scala.Option[models.EmailConfigurationType] = None, smsVerificationMessage: scala.Option[java.lang.String] = None, smsAuthenticationMessage: scala.Option[java.lang.String] = None, verificationMessageTemplate: scala.Option[models.VerificationMessageTemplateType] = None, mfaConfiguration: scala.Option[java.lang.String] = None, policies: scala.Option[models.UserPoolPolicyType] = None)
final case class ConfirmSignUpRequest(username: java.lang.String, clientId: java.lang.String, confirmationCode: java.lang.String, forceAliasCreation: scala.Option[scala.Boolean] = None, secretHash: scala.Option[java.lang.String] = None)
final case class ExpiredCodeException(message: scala.Option[java.lang.String] = None)
final case class RespondToAuthChallengeRequest(clientId: java.lang.String, challengeName: java.lang.String, session: scala.Option[java.lang.String] = None, challengeResponses: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class InitiateAuthRequest(authFlow: java.lang.String, clientId: java.lang.String, authParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, clientMetadata: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class AdminCreateUserResponse(user: scala.Option[models.UserType] = None)
final case class AdminInitiateAuthRequest(authFlow: java.lang.String, clientId: java.lang.String, userPoolId: java.lang.String, authParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, clientMetadata: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class AdminForgetDeviceRequest(userPoolId: java.lang.String, username: java.lang.String, deviceKey: java.lang.String)
final case class GetGroupRequest(groupName: java.lang.String, userPoolId: java.lang.String)
final case class ListGroupsRequest(userPoolId: java.lang.String, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class StringAttributeConstraintsType(minLength: scala.Option[java.lang.String] = None, maxLength: scala.Option[java.lang.String] = None)
final case class AdminInitiateAuthResponse(challengeName: scala.Option[java.lang.String] = None, session: scala.Option[java.lang.String] = None, challengeParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, authenticationResult: scala.Option[models.AuthenticationResultType] = None)
final case class InternalErrorException(message: scala.Option[java.lang.String] = None)
final case class GetIdentityProviderByIdentifierResponse(identityProvider: models.IdentityProviderType)
case object AdminUserGlobalSignOutResponse
case object AdminConfirmSignUpResponse
final case class ProviderUserIdentifierType(providerName: scala.Option[java.lang.String] = None, providerAttributeName: scala.Option[java.lang.String] = None, providerAttributeValue: scala.Option[java.lang.String] = None)
final case class AdminDeleteUserAttributesRequest(userPoolId: java.lang.String, username: java.lang.String, userAttributeNames: scala.List[java.lang.String])
final case class AdminUpdateDeviceStatusRequest(userPoolId: java.lang.String, username: java.lang.String, deviceKey: java.lang.String, deviceRememberedStatus: scala.Option[java.lang.String] = None)
case object AdminSetUserSettingsResponse
final case class SignUpRequest(username: java.lang.String, clientId: java.lang.String, password: java.lang.String, userAttributes: scala.Option[scala.List[models.AttributeType]] = None, validationData: scala.Option[scala.List[models.AttributeType]] = None, secretHash: scala.Option[java.lang.String] = None)
final case class ListIdentityProvidersResponse(providers: scala.List[models.ProviderDescription], nextToken: scala.Option[java.lang.String] = None)
final case class AdminUserGlobalSignOutRequest(userPoolId: java.lang.String, username: java.lang.String)
case object AdminUpdateUserAttributesResponse
final case class GetGroupResponse(group: scala.Option[models.GroupType] = None)
final case class StartUserImportJobResponse(userImportJob: scala.Option[models.UserImportJobType] = None)
case object ConfirmForgotPasswordResponse
final case class ListUsersResponse(users: scala.Option[scala.List[models.UserType]] = None, paginationToken: scala.Option[java.lang.String] = None)
final case class UserPoolTaggingException(message: scala.Option[java.lang.String] = None)
case object ConfirmSignUpResponse
final case class NewDeviceMetadataType(deviceKey: scala.Option[java.lang.String] = None, deviceGroupKey: scala.Option[java.lang.String] = None)
final case class ConfirmForgotPasswordRequest(username: java.lang.String, clientId: java.lang.String, password: java.lang.String, confirmationCode: java.lang.String, secretHash: scala.Option[java.lang.String] = None)
final case class CreateGroupResponse(group: scala.Option[models.GroupType] = None)
final case class UpdateResourceServerRequest(userPoolId: java.lang.String, identifier: java.lang.String, name: java.lang.String, scopes: scala.Option[scala.List[models.ResourceServerScopeType]] = None)
final case class AdminResetUserPasswordRequest(userPoolId: java.lang.String, username: java.lang.String)
final case class AdminListDevicesRequest(userPoolId: java.lang.String, username: java.lang.String, limit: scala.Option[scala.Int] = None, paginationToken: scala.Option[java.lang.String] = None)
final case class ResendConfirmationCodeRequest(clientId: java.lang.String, username: java.lang.String, secretHash: scala.Option[java.lang.String] = None)
case object UpdateUserPoolResponse
final case class SignUpResponse(userConfirmed: scala.Boolean, userSub: java.lang.String, codeDeliveryDetails: scala.Option[models.CodeDeliveryDetailsType] = None)
case object AdminDeleteUserAttributesResponse
final case class GetUserResponse(username: java.lang.String, userAttributes: scala.List[models.AttributeType], mfaoptions: scala.Option[scala.List[models.MFAOptionType]] = None)
final case class AdminGetUserResponse(username: java.lang.String, userCreateDate: scala.Option[java.time.Instant] = None, userLastModifiedDate: scala.Option[java.time.Instant] = None, userAttributes: scala.Option[scala.List[models.AttributeType]] = None, mfaoptions: scala.Option[scala.List[models.MFAOptionType]] = None, userStatus: scala.Option[java.lang.String] = None, enabled: scala.Option[scala.Boolean] = None)
final case class UserLambdaValidationException(message: scala.Option[java.lang.String] = None)
final case class CreateIdentityProviderResponse(identityProvider: models.IdentityProviderType)
final case class GetUserAttributeVerificationCodeResponse(codeDeliveryDetails: scala.Option[models.CodeDeliveryDetailsType] = None)
final case class InvalidLambdaResponseException(message: scala.Option[java.lang.String] = None)
final case class DeviceConfigurationType(challengeRequiredOnNewDevice: scala.Option[scala.Boolean] = None, deviceOnlyRememberedOnUserPrompt: scala.Option[scala.Boolean] = None)
final case class AdminGetUserRequest(userPoolId: java.lang.String, username: java.lang.String)
final case class InitiateAuthResponse(challengeName: scala.Option[java.lang.String] = None, session: scala.Option[java.lang.String] = None, challengeParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, authenticationResult: scala.Option[models.AuthenticationResultType] = None)
final case class DescribeResourceServerResponse(resourceServer: models.ResourceServerType)
final case class DescribeUserPoolResponse(userPool: scala.Option[models.UserPoolType] = None)
final case class AuthenticationResultType(accessToken: scala.Option[java.lang.String] = None, refreshToken: scala.Option[java.lang.String] = None, idToken: scala.Option[java.lang.String] = None, expiresIn: scala.Option[scala.Int] = None, tokenType: scala.Option[java.lang.String] = None, newDeviceMetadata: scala.Option[models.NewDeviceMetadataType] = None)
final case class DeleteResourceServerRequest(userPoolId: java.lang.String, identifier: java.lang.String)
final case class ForgotPasswordRequest(clientId: java.lang.String, username: java.lang.String, secretHash: scala.Option[java.lang.String] = None)
final case class AttributeType(name: java.lang.String, value: scala.Option[java.lang.String] = None)
final case class AdminSetUserSettingsRequest(userPoolId: java.lang.String, username: java.lang.String, mfaoptions: scala.List[models.MFAOptionType])
final case class AdminCreateUserRequest(username: java.lang.String, userPoolId: java.lang.String, forceAliasCreation: scala.Option[scala.Boolean] = None, userAttributes: scala.Option[scala.List[models.AttributeType]] = None, validationData: scala.Option[scala.List[models.AttributeType]] = None, messageAction: scala.Option[java.lang.String] = None, temporaryPassword: scala.Option[java.lang.String] = None, desiredDeliveryMediums: scala.Option[scala.List[java.lang.String]] = None)
case object ChangePasswordResponse
final case class DescribeUserPoolRequest(userPoolId: java.lang.String)
final case class CodeDeliveryDetailsType(destination: scala.Option[java.lang.String] = None, deliveryMedium: scala.Option[java.lang.String] = None, attributeName: scala.Option[java.lang.String] = None)
final case class AdminDisableUserRequest(userPoolId: java.lang.String, username: java.lang.String)
final case class CreateUserPoolClientResponse(userPoolClient: scala.Option[models.UserPoolClientType] = None)
final case class InvalidParameterException(message: scala.Option[java.lang.String] = None)
case object CreateUserPoolDomainResponse
case object AdminEnableUserResponse
case object SetUserSettingsResponse
case object AddCustomAttributesResponse
final case class DomainDescriptionType(awsaccountId: scala.Option[java.lang.String] = None, domain: scala.Option[java.lang.String] = None, s3Bucket: scala.Option[java.lang.String] = None, version: scala.Option[java.lang.String] = None, cloudFrontDistribution: scala.Option[java.lang.String] = None, userPoolId: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None)
final case class UpdateIdentityProviderRequest(providerName: java.lang.String, userPoolId: java.lang.String, attributeMapping: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, providerDetails: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, idpIdentifiers: scala.Option[scala.List[java.lang.String]] = None)
final case class AdminListDevicesResponse(devices: scala.Option[scala.List[models.DeviceType]] = None, paginationToken: scala.Option[java.lang.String] = None)
final case class RespondToAuthChallengeResponse(challengeName: scala.Option[java.lang.String] = None, session: scala.Option[java.lang.String] = None, challengeParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, authenticationResult: scala.Option[models.AuthenticationResultType] = None)
final case class UserPoolType(name: scala.Option[java.lang.String] = None, emailVerificationMessage: scala.Option[java.lang.String] = None, lastModifiedDate: scala.Option[java.time.Instant] = None, creationDate: scala.Option[java.time.Instant] = None, estimatedNumberOfUsers: scala.Option[scala.Int] = None, adminCreateUserConfig: scala.Option[models.AdminCreateUserConfigType] = None, smsConfiguration: scala.Option[models.SmsConfigurationType] = None, smsConfigurationFailure: scala.Option[java.lang.String] = None, emailConfigurationFailure: scala.Option[java.lang.String] = None, usernameAttributes: scala.Option[scala.List[java.lang.String]] = None, lambdaConfig: scala.Option[models.LambdaConfigType] = None, userPoolTags: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, aliasAttributes: scala.Option[scala.List[java.lang.String]] = None, emailVerificationSubject: scala.Option[java.lang.String] = None, schemaAttributes: scala.Option[scala.List[models.SchemaAttributeType]] = None, deviceConfiguration: scala.Option[models.DeviceConfigurationType] = None, autoVerifiedAttributes: scala.Option[scala.List[java.lang.String]] = None, emailConfiguration: scala.Option[models.EmailConfigurationType] = None, smsVerificationMessage: scala.Option[java.lang.String] = None, smsAuthenticationMessage: scala.Option[java.lang.String] = None, verificationMessageTemplate: scala.Option[models.VerificationMessageTemplateType] = None, id: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, mfaConfiguration: scala.Option[java.lang.String] = None, policies: scala.Option[models.UserPoolPolicyType] = None)
final case class AdminConfirmSignUpRequest(userPoolId: java.lang.String, username: java.lang.String)
final case class GroupType(lastModifiedDate: scala.Option[java.time.Instant] = None, creationDate: scala.Option[java.time.Instant] = None, description: scala.Option[java.lang.String] = None, groupName: scala.Option[java.lang.String] = None, precedence: scala.Option[scala.Int] = None, roleArn: scala.Option[java.lang.String] = None, userPoolId: scala.Option[java.lang.String] = None)
final case class UpdateUserPoolClientRequest(clientId: java.lang.String, userPoolId: java.lang.String, callbackURLs: scala.Option[scala.List[java.lang.String]] = None, refreshTokenValidity: scala.Option[scala.Int] = None, clientName: scala.Option[java.lang.String] = None, allowedOAuthFlows: scala.Option[scala.List[java.lang.String]] = None, readAttributes: scala.Option[scala.List[java.lang.String]] = None, writeAttributes: scala.Option[scala.List[java.lang.String]] = None, logoutURLs: scala.Option[scala.List[java.lang.String]] = None, explicitAuthFlows: scala.Option[scala.List[java.lang.String]] = None, allowedOAuthScopes: scala.Option[scala.List[java.lang.String]] = None, allowedOAuthFlowsUserPoolClient: scala.Option[scala.Boolean] = None, defaultRedirectURI: scala.Option[java.lang.String] = None, supportedIdentityProviders: scala.Option[scala.List[java.lang.String]] = None)
final case class ListUsersInGroupResponse(users: scala.Option[scala.List[models.UserType]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UserImportInProgressException(message: scala.Option[java.lang.String] = None)
final case class DescribeUserPoolClientResponse(userPoolClient: scala.Option[models.UserPoolClientType] = None)
final case class CreateUserImportJobRequest(jobName: java.lang.String, userPoolId: java.lang.String, cloudWatchLogsRoleArn: java.lang.String)
final case class CreateUserPoolDomainRequest(domain: java.lang.String, userPoolId: java.lang.String)
final case class UpdateUserPoolClientResponse(userPoolClient: scala.Option[models.UserPoolClientType] = None)
final case class CreateUserImportJobResponse(userImportJob: scala.Option[models.UserImportJobType] = None)
final case class ListUserPoolClientsRequest(userPoolId: java.lang.String, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class CreateUserPoolResponse(userPool: scala.Option[models.UserPoolType] = None)
final case class ListIdentityProvidersRequest(userPoolId: java.lang.String, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UsernameExistsException(message: scala.Option[java.lang.String] = None)
final case class DescribeResourceServerRequest(userPoolId: java.lang.String, identifier: java.lang.String)
final case class ProviderDescription(providerName: scala.Option[java.lang.String] = None, providerType: scala.Option[java.lang.String] = None, lastModifiedDate: scala.Option[java.time.Instant] = None, creationDate: scala.Option[java.time.Instant] = None)
final case class ListUserImportJobsResponse(userImportJobs: scala.Option[scala.List[models.UserImportJobType]] = None, paginationToken: scala.Option[java.lang.String] = None)
final case class AdminLinkProviderForUserRequest(userPoolId: java.lang.String, destinationUser: models.ProviderUserIdentifierType, sourceUser: models.ProviderUserIdentifierType)
case object DeleteUserAttributesResponse
final case class DeleteUserPoolClientRequest(userPoolId: java.lang.String, clientId: java.lang.String)
final case class AdminRespondToAuthChallengeResponse(challengeName: scala.Option[java.lang.String] = None, session: scala.Option[java.lang.String] = None, challengeParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, authenticationResult: scala.Option[models.AuthenticationResultType] = None)
final case class DeviceType(deviceKey: scala.Option[java.lang.String] = None, deviceAttributes: scala.Option[scala.List[models.AttributeType]] = None, deviceCreateDate: scala.Option[java.time.Instant] = None, deviceLastModifiedDate: scala.Option[java.time.Instant] = None, deviceLastAuthenticatedDate: scala.Option[java.time.Instant] = None)
case object AdminDisableUserResponse
final case class NotAuthorizedException(message: scala.Option[java.lang.String] = None)
final case class DeleteUserRequest(accessToken: java.lang.String)
final case class EmailConfigurationType(sourceArn: scala.Option[java.lang.String] = None, replyToEmailAddress: scala.Option[java.lang.String] = None)
final case class InvalidUserPoolConfigurationException(message: scala.Option[java.lang.String] = None)
final case class ListDevicesResponse(devices: scala.Option[scala.List[models.DeviceType]] = None, paginationToken: scala.Option[java.lang.String] = None)
final case class TooManyRequestsException(message: scala.Option[java.lang.String] = None)
final case class DuplicateProviderException(message: scala.Option[java.lang.String] = None)
final case class MFAOptionType(deliveryMedium: scala.Option[java.lang.String] = None, attributeName: scala.Option[java.lang.String] = None)
final case class GetCSVHeaderRequest(userPoolId: java.lang.String)
final case class InvalidSmsRoleAccessPolicyException(message: scala.Option[java.lang.String] = None)
final case class CodeDeliveryFailureException(message: scala.Option[java.lang.String] = None)
final case class DescribeUserImportJobRequest(userPoolId: java.lang.String, jobId: java.lang.String)
final case class ConcurrentModificationException(message: scala.Option[java.lang.String] = None)
final case class DeleteUserAttributesRequest(userAttributeNames: scala.List[java.lang.String], accessToken: java.lang.String)
final case class SetUICustomizationResponse(uicustomization: models.UICustomizationType)
final case class GetDeviceRequest(deviceKey: java.lang.String, accessToken: scala.Option[java.lang.String] = None)
final case class IdentityProviderType(lastModifiedDate: scala.Option[java.time.Instant] = None, creationDate: scala.Option[java.time.Instant] = None, providerName: scala.Option[java.lang.String] = None, attributeMapping: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, providerType: scala.Option[java.lang.String] = None, providerDetails: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, userPoolId: scala.Option[java.lang.String] = None, idpIdentifiers: scala.Option[scala.List[java.lang.String]] = None)
final case class UserPoolDescriptionType(name: scala.Option[java.lang.String] = None, lastModifiedDate: scala.Option[java.time.Instant] = None, creationDate: scala.Option[java.time.Instant] = None, lambdaConfig: scala.Option[models.LambdaConfigType] = None, id: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None)
final case class ListUsersInGroupRequest(userPoolId: java.lang.String, groupName: java.lang.String, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DeleteUserPoolDomainRequest(domain: java.lang.String, userPoolId: java.lang.String)
final case class UpdateUserAttributesResponse(codeDeliveryDetailsList: scala.Option[scala.List[models.CodeDeliveryDetailsType]] = None)
final case class ListGroupsResponse(groups: scala.Option[scala.List[models.GroupType]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class LimitExceededException(message: scala.Option[java.lang.String] = None)
final case class MFAMethodNotFoundException(message: scala.Option[java.lang.String] = None)
final case class SetUserSettingsRequest(accessToken: java.lang.String, mfaoptions: scala.List[models.MFAOptionType])
final case class ListUserPoolsResponse(userPools: scala.Option[scala.List[models.UserPoolDescriptionType]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeIdentityProviderResponse(identityProvider: models.IdentityProviderType)
final case class ListUsersRequest(userPoolId: java.lang.String, limit: scala.Option[scala.Int] = None, attributesToGet: scala.Option[scala.List[java.lang.String]] = None, filter: scala.Option[java.lang.String] = None, paginationToken: scala.Option[java.lang.String] = None)
final case class SetUICustomizationRequest(userPoolId: java.lang.String, clientId: scala.Option[java.lang.String] = None, css: scala.Option[java.lang.String] = None, imageFile: scala.Option[scala.Array[scala.Byte]] = None)
final case class VerificationMessageTemplateType(emailMessage: scala.Option[java.lang.String] = None, emailSubjectByLink: scala.Option[java.lang.String] = None, emailSubject: scala.Option[java.lang.String] = None, defaultEmailOption: scala.Option[java.lang.String] = None, emailMessageByLink: scala.Option[java.lang.String] = None, smsMessage: scala.Option[java.lang.String] = None)
case object DeleteUserPoolDomainResponse
final case class UserNotFoundException(message: scala.Option[java.lang.String] = None)
final case class CreateResourceServerRequest(userPoolId: java.lang.String, identifier: java.lang.String, name: java.lang.String, scopes: scala.Option[scala.List[models.ResourceServerScopeType]] = None)
final case class ResourceNotFoundException(message: scala.Option[java.lang.String] = None)
final case class UpdateDeviceStatusRequest(accessToken: java.lang.String, deviceKey: java.lang.String, deviceRememberedStatus: scala.Option[java.lang.String] = None)
final case class DescribeUserPoolClientRequest(userPoolId: java.lang.String, clientId: java.lang.String)
final case class ChangePasswordRequest(previousPassword: java.lang.String, proposedPassword: java.lang.String, accessToken: java.lang.String)
final case class GlobalSignOutRequest(accessToken: java.lang.String)
final case class UpdateUserAttributesRequest(userAttributes: scala.List[models.AttributeType], accessToken: java.lang.String)
final case class DescribeIdentityProviderRequest(userPoolId: java.lang.String, providerName: java.lang.String)
final case class ScopeDoesNotExistException(message: scala.Option[java.lang.String] = None)
final case class DeleteIdentityProviderRequest(userPoolId: java.lang.String, providerName: java.lang.String)
final case class UserType(userCreateDate: scala.Option[java.time.Instant] = None, userLastModifiedDate: scala.Option[java.time.Instant] = None, username: scala.Option[java.lang.String] = None, attributes: scala.Option[scala.List[models.AttributeType]] = None, mfaoptions: scala.Option[scala.List[models.MFAOptionType]] = None, userStatus: scala.Option[java.lang.String] = None, enabled: scala.Option[scala.Boolean] = None)
final case class CodeMismatchException(message: scala.Option[java.lang.String] = None)
final case class ResourceServerScopeType(scopeName: java.lang.String, scopeDescription: java.lang.String)
final case class UnsupportedUserStateException(message: scala.Option[java.lang.String] = None)
final case class GetIdentityProviderByIdentifierRequest(userPoolId: java.lang.String, idpIdentifier: java.lang.String)
final case class GetCSVHeaderResponse(userPoolId: scala.Option[java.lang.String] = None, csvheader: scala.Option[scala.List[java.lang.String]] = None)
case object AdminUpdateDeviceStatusResponse
final case class GroupExistsException(message: scala.Option[java.lang.String] = None)
final case class AddCustomAttributesRequest(userPoolId: java.lang.String, customAttributes: scala.List[models.SchemaAttributeType])
final case class AdminRespondToAuthChallengeRequest(clientId: java.lang.String, challengeName: java.lang.String, userPoolId: java.lang.String, session: scala.Option[java.lang.String] = None, challengeResponses: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class AdminListGroupsForUserRequest(username: java.lang.String, userPoolId: java.lang.String, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InvalidOAuthFlowException(message: scala.Option[java.lang.String] = None)
final case class AdminAddUserToGroupRequest(userPoolId: java.lang.String, username: java.lang.String, groupName: java.lang.String)
final case class CreateResourceServerResponse(resourceServer: models.ResourceServerType)
final case class UserPoolPolicyType(passwordPolicy: scala.Option[models.PasswordPolicyType] = None)
final case class GetUserAttributeVerificationCodeRequest(accessToken: java.lang.String, attributeName: java.lang.String)
final case class AdminGetDeviceResponse(device: models.DeviceType)
final case class ListDevicesRequest(accessToken: java.lang.String, limit: scala.Option[scala.Int] = None, paginationToken: scala.Option[java.lang.String] = None)
final case class StopUserImportJobResponse(userImportJob: scala.Option[models.UserImportJobType] = None)
final case class ResendConfirmationCodeResponse(codeDeliveryDetails: scala.Option[models.CodeDeliveryDetailsType] = None)
case object GlobalSignOutResponse
final case class UnsupportedIdentityProviderException(message: scala.Option[java.lang.String] = None)
final case class StartUserImportJobRequest(userPoolId: java.lang.String, jobId: java.lang.String)
final case class DescribeUserPoolDomainRequest(domain: java.lang.String)
case object AdminDisableProviderForUserResponse
final case class AdminUpdateUserAttributesRequest(userPoolId: java.lang.String, username: java.lang.String, userAttributes: scala.List[models.AttributeType])