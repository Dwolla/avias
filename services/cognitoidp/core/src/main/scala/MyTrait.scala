package org.lyranthe.araethura.cognitoidp
trait Amazoncognitoidp[F[_]] {
  def listResourceServers(input: models.ListResourceServersRequest): F[models.ListResourceServersResponse]
  def listUserImportJobs(input: models.ListUserImportJobsRequest): F[models.ListUserImportJobsResponse]
  def adminUserGlobalSignOut(input: models.AdminUserGlobalSignOutRequest): F[scala.Unit]
  def adminEnableUser(input: models.AdminEnableUserRequest): F[scala.Unit]
  def adminGetDevice(input: models.AdminGetDeviceRequest): F[models.AdminGetDeviceResponse]
  def changePassword(input: models.ChangePasswordRequest): F[scala.Unit]
  def getDevice(input: models.GetDeviceRequest): F[models.GetDeviceResponse]
  def adminListDevices(input: models.AdminListDevicesRequest): F[models.AdminListDevicesResponse]
  def adminSetUserSettings(input: models.AdminSetUserSettingsRequest): F[scala.Unit]
  def createUserImportJob(input: models.CreateUserImportJobRequest): F[models.CreateUserImportJobResponse]
  def getUserAttributeVerificationCode(input: models.GetUserAttributeVerificationCodeRequest): F[models.GetUserAttributeVerificationCodeResponse]
  def initiateAuth(input: models.InitiateAuthRequest): F[models.InitiateAuthResponse]
  def getUser(input: models.GetUserRequest): F[models.GetUserResponse]
  def adminRespondToAuthChallenge(input: models.AdminRespondToAuthChallengeRequest): F[models.AdminRespondToAuthChallengeResponse]
  def updateUserPool(input: models.UpdateUserPoolRequest): F[scala.Unit]
  def listUserPools(input: models.ListUserPoolsRequest): F[models.ListUserPoolsResponse]
  def deleteUser(input: models.DeleteUserRequest): F[Unit]
  def adminUpdateDeviceStatus(input: models.AdminUpdateDeviceStatusRequest): F[scala.Unit]
  def getUICustomization(input: models.GetUICustomizationRequest): F[models.GetUICustomizationResponse]
  def respondToAuthChallenge(input: models.RespondToAuthChallengeRequest): F[models.RespondToAuthChallengeResponse]
  def deleteUserPoolDomain(input: models.DeleteUserPoolDomainRequest): F[scala.Unit]
  def adminGetUser(input: models.AdminGetUserRequest): F[models.AdminGetUserResponse]
  def deleteUserPoolClient(input: models.DeleteUserPoolClientRequest): F[Unit]
  def deleteIdentityProvider(input: models.DeleteIdentityProviderRequest): F[Unit]
  def deleteResourceServer(input: models.DeleteResourceServerRequest): F[Unit]
  def createGroup(input: models.CreateGroupRequest): F[models.CreateGroupResponse]
  def listUsersInGroup(input: models.ListUsersInGroupRequest): F[models.ListUsersInGroupResponse]
  def createUserPool(input: models.CreateUserPoolRequest): F[models.CreateUserPoolResponse]
  def adminDisableProviderForUser(input: models.AdminDisableProviderForUserRequest): F[scala.Unit]
  def updateDeviceStatus(input: models.UpdateDeviceStatusRequest): F[scala.Unit]
  def adminDisableUser(input: models.AdminDisableUserRequest): F[scala.Unit]
  def addCustomAttributes(input: models.AddCustomAttributesRequest): F[scala.Unit]
  def adminLinkProviderForUser(input: models.AdminLinkProviderForUserRequest): F[scala.Unit]
  def listIdentityProviders(input: models.ListIdentityProvidersRequest): F[models.ListIdentityProvidersResponse]
  def getIdentityProviderByIdentifier(input: models.GetIdentityProviderByIdentifierRequest): F[models.GetIdentityProviderByIdentifierResponse]
  def getGroup(input: models.GetGroupRequest): F[models.GetGroupResponse]
  def updateUserPoolClient(input: models.UpdateUserPoolClientRequest): F[models.UpdateUserPoolClientResponse]
  def updateUserAttributes(input: models.UpdateUserAttributesRequest): F[models.UpdateUserAttributesResponse]
  def describeUserPoolClient(input: models.DescribeUserPoolClientRequest): F[models.DescribeUserPoolClientResponse]
  def deleteUserAttributes(input: models.DeleteUserAttributesRequest): F[scala.Unit]
  def resendConfirmationCode(input: models.ResendConfirmationCodeRequest): F[models.ResendConfirmationCodeResponse]
  def describeUserPoolDomain(input: models.DescribeUserPoolDomainRequest): F[models.DescribeUserPoolDomainResponse]
  def createResourceServer(input: models.CreateResourceServerRequest): F[models.CreateResourceServerResponse]
  def describeUserImportJob(input: models.DescribeUserImportJobRequest): F[models.DescribeUserImportJobResponse]
  def setUICustomization(input: models.SetUICustomizationRequest): F[models.SetUICustomizationResponse]
  def describeResourceServer(input: models.DescribeResourceServerRequest): F[models.DescribeResourceServerResponse]
  def listUserPoolClients(input: models.ListUserPoolClientsRequest): F[models.ListUserPoolClientsResponse]
  def confirmForgotPassword(input: models.ConfirmForgotPasswordRequest): F[scala.Unit]
  def listUsers(input: models.ListUsersRequest): F[models.ListUsersResponse]
  def adminForgetDevice(input: models.AdminForgetDeviceRequest): F[Unit]
  def updateIdentityProvider(input: models.UpdateIdentityProviderRequest): F[models.UpdateIdentityProviderResponse]
  def listDevices(input: models.ListDevicesRequest): F[models.ListDevicesResponse]
  def updateResourceServer(input: models.UpdateResourceServerRequest): F[models.UpdateResourceServerResponse]
  def adminListGroupsForUser(input: models.AdminListGroupsForUserRequest): F[models.AdminListGroupsForUserResponse]
  def startUserImportJob(input: models.StartUserImportJobRequest): F[models.StartUserImportJobResponse]
  def createIdentityProvider(input: models.CreateIdentityProviderRequest): F[models.CreateIdentityProviderResponse]
  def forgotPassword(input: models.ForgotPasswordRequest): F[models.ForgotPasswordResponse]
  def deleteUserPool(input: models.DeleteUserPoolRequest): F[Unit]
  def adminCreateUser(input: models.AdminCreateUserRequest): F[models.AdminCreateUserResponse]
  def deleteGroup(input: models.DeleteGroupRequest): F[Unit]
  def createUserPoolDomain(input: models.CreateUserPoolDomainRequest): F[scala.Unit]
  def adminDeleteUserAttributes(input: models.AdminDeleteUserAttributesRequest): F[scala.Unit]
  def confirmSignUp(input: models.ConfirmSignUpRequest): F[scala.Unit]
  def globalSignOut(input: models.GlobalSignOutRequest): F[scala.Unit]
  def adminAddUserToGroup(input: models.AdminAddUserToGroupRequest): F[Unit]
  def adminRemoveUserFromGroup(input: models.AdminRemoveUserFromGroupRequest): F[Unit]
  def confirmDevice(input: models.ConfirmDeviceRequest): F[models.ConfirmDeviceResponse]
  def getCSVHeader(input: models.GetCSVHeaderRequest): F[models.GetCSVHeaderResponse]
  def verifyUserAttribute(input: models.VerifyUserAttributeRequest): F[scala.Unit]
  def adminDeleteUser(input: models.AdminDeleteUserRequest): F[Unit]
  def describeIdentityProvider(input: models.DescribeIdentityProviderRequest): F[models.DescribeIdentityProviderResponse]
  def updateGroup(input: models.UpdateGroupRequest): F[models.UpdateGroupResponse]
  def describeUserPool(input: models.DescribeUserPoolRequest): F[models.DescribeUserPoolResponse]
  def adminUpdateUserAttributes(input: models.AdminUpdateUserAttributesRequest): F[scala.Unit]
  def adminResetUserPassword(input: models.AdminResetUserPasswordRequest): F[scala.Unit]
  def stopUserImportJob(input: models.StopUserImportJobRequest): F[models.StopUserImportJobResponse]
  def adminInitiateAuth(input: models.AdminInitiateAuthRequest): F[models.AdminInitiateAuthResponse]
  def adminConfirmSignUp(input: models.AdminConfirmSignUpRequest): F[scala.Unit]
  def setUserSettings(input: models.SetUserSettingsRequest): F[scala.Unit]
  def createUserPoolClient(input: models.CreateUserPoolClientRequest): F[models.CreateUserPoolClientResponse]
  def listGroups(input: models.ListGroupsRequest): F[models.ListGroupsResponse]
  def signUp(input: models.SignUpRequest): F[models.SignUpResponse]
  def forgetDevice(input: models.ForgetDeviceRequest): F[Unit]
}