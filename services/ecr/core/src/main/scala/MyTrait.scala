package org.lyranthe.araethura.ecr
trait Amazonecr[F[_]] {
  def initiateLayerUpload(input: models.InitiateLayerUploadRequest): F[models.InitiateLayerUploadResponse]
  def putImage(input: models.PutImageRequest): F[models.PutImageResponse]
  def uploadLayerPart(input: models.UploadLayerPartRequest): F[models.UploadLayerPartResponse]
  def setRepositoryPolicy(input: models.SetRepositoryPolicyRequest): F[models.SetRepositoryPolicyResponse]
  def putLifecyclePolicy(input: models.PutLifecyclePolicyRequest): F[models.PutLifecyclePolicyResponse]
  def batchCheckLayerAvailability(input: models.BatchCheckLayerAvailabilityRequest): F[models.BatchCheckLayerAvailabilityResponse]
  def batchDeleteImage(input: models.BatchDeleteImageRequest): F[models.BatchDeleteImageResponse]
  def describeImages(input: models.DescribeImagesRequest): F[models.DescribeImagesResponse]
  def listImages(input: models.ListImagesRequest): F[models.ListImagesResponse]
  def startLifecyclePolicyPreview(input: models.StartLifecyclePolicyPreviewRequest): F[models.StartLifecyclePolicyPreviewResponse]
  def completeLayerUpload(input: models.CompleteLayerUploadRequest): F[models.CompleteLayerUploadResponse]
  def deleteLifecyclePolicy(input: models.DeleteLifecyclePolicyRequest): F[models.DeleteLifecyclePolicyResponse]
  def createRepository(input: models.CreateRepositoryRequest): F[models.CreateRepositoryResponse]
  def getLifecyclePolicyPreview(input: models.GetLifecyclePolicyPreviewRequest): F[models.GetLifecyclePolicyPreviewResponse]
  def batchGetImage(input: models.BatchGetImageRequest): F[models.BatchGetImageResponse]
  def deleteRepository(input: models.DeleteRepositoryRequest): F[models.DeleteRepositoryResponse]
  def describeRepositories(input: models.DescribeRepositoriesRequest): F[models.DescribeRepositoriesResponse]
  def getDownloadUrlForLayer(input: models.GetDownloadUrlForLayerRequest): F[models.GetDownloadUrlForLayerResponse]
  def getLifecyclePolicy(input: models.GetLifecyclePolicyRequest): F[models.GetLifecyclePolicyResponse]
  def deleteRepositoryPolicy(input: models.DeleteRepositoryPolicyRequest): F[models.DeleteRepositoryPolicyResponse]
  def getAuthorizationToken(input: models.GetAuthorizationTokenRequest): F[models.GetAuthorizationTokenResponse]
  def getRepositoryPolicy(input: models.GetRepositoryPolicyRequest): F[models.GetRepositoryPolicyResponse]
}