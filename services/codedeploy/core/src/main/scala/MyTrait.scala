package org.lyranthe.araethura.codedeploy
trait Amazoncodedeploy[F[_]] {
  def deleteDeploymentConfig(input: models.DeleteDeploymentConfigInput): F[Unit]
  def batchGetDeploymentInstances(input: models.BatchGetDeploymentInstancesInput): F[models.BatchGetDeploymentInstancesOutput]
  def deleteApplication(input: models.DeleteApplicationInput): F[Unit]
  def batchGetApplicationRevisions(input: models.BatchGetApplicationRevisionsInput): F[models.BatchGetApplicationRevisionsOutput]
  def createDeploymentGroup(input: models.CreateDeploymentGroupInput): F[models.CreateDeploymentGroupOutput]
  def listDeploymentInstances(input: models.ListDeploymentInstancesInput): F[models.ListDeploymentInstancesOutput]
  def stopDeployment(input: models.StopDeploymentInput): F[models.StopDeploymentOutput]
  def registerOnPremisesInstance(input: models.RegisterOnPremisesInstanceInput): F[Unit]
  def listGitHubAccountTokenNames(input: models.ListGitHubAccountTokenNamesInput): F[models.ListGitHubAccountTokenNamesOutput]
  def getDeploymentInstance(input: models.GetDeploymentInstanceInput): F[models.GetDeploymentInstanceOutput]
  def updateDeploymentGroup(input: models.UpdateDeploymentGroupInput): F[models.UpdateDeploymentGroupOutput]
  def listDeployments(input: models.ListDeploymentsInput): F[models.ListDeploymentsOutput]
  def createDeployment(input: models.CreateDeploymentInput): F[models.CreateDeploymentOutput]
  def removeTagsFromOnPremisesInstances(input: models.RemoveTagsFromOnPremisesInstancesInput): F[Unit]
  def deleteDeploymentGroup(input: models.DeleteDeploymentGroupInput): F[models.DeleteDeploymentGroupOutput]
  def addTagsToOnPremisesInstances(input: models.AddTagsToOnPremisesInstancesInput): F[Unit]
  def createDeploymentConfig(input: models.CreateDeploymentConfigInput): F[models.CreateDeploymentConfigOutput]
  def getDeployment(input: models.GetDeploymentInput): F[models.GetDeploymentOutput]
  def skipWaitTimeForInstanceTermination(input: models.SkipWaitTimeForInstanceTerminationInput): F[Unit]
  def updateApplication(input: models.UpdateApplicationInput): F[Unit]
  def getDeploymentConfig(input: models.GetDeploymentConfigInput): F[models.GetDeploymentConfigOutput]
  def listDeploymentConfigs(input: models.ListDeploymentConfigsInput): F[models.ListDeploymentConfigsOutput]
  def continueDeployment(input: models.ContinueDeploymentInput): F[Unit]
  def listOnPremisesInstances(input: models.ListOnPremisesInstancesInput): F[models.ListOnPremisesInstancesOutput]
  def listApplicationRevisions(input: models.ListApplicationRevisionsInput): F[models.ListApplicationRevisionsOutput]
  def listApplications(input: models.ListApplicationsInput): F[models.ListApplicationsOutput]
  def getApplicationRevision(input: models.GetApplicationRevisionInput): F[models.GetApplicationRevisionOutput]
  def createApplication(input: models.CreateApplicationInput): F[models.CreateApplicationOutput]
  def getOnPremisesInstance(input: models.GetOnPremisesInstanceInput): F[models.GetOnPremisesInstanceOutput]
  def getDeploymentGroup(input: models.GetDeploymentGroupInput): F[models.GetDeploymentGroupOutput]
  def registerApplicationRevision(input: models.RegisterApplicationRevisionInput): F[Unit]
  def batchGetDeploymentGroups(input: models.BatchGetDeploymentGroupsInput): F[models.BatchGetDeploymentGroupsOutput]
  def batchGetDeployments(input: models.BatchGetDeploymentsInput): F[models.BatchGetDeploymentsOutput]
  def batchGetApplications(input: models.BatchGetApplicationsInput): F[models.BatchGetApplicationsOutput]
  def batchGetOnPremisesInstances(input: models.BatchGetOnPremisesInstancesInput): F[models.BatchGetOnPremisesInstancesOutput]
  def getApplication(input: models.GetApplicationInput): F[models.GetApplicationOutput]
  def listDeploymentGroups(input: models.ListDeploymentGroupsInput): F[models.ListDeploymentGroupsOutput]
  def deregisterOnPremisesInstance(input: models.DeregisterOnPremisesInstanceInput): F[Unit]
}