package org.lyranthe.araethura.storagegateway
trait Amazonstoragegateway[F[_]] {
  def shutdownGateway(input: models.ShutdownGatewayInput): F[models.ShutdownGatewayOutput]
  def describeCachediSCSIVolumes(input: models.DescribeCachediSCSIVolumesInput): F[models.DescribeCachediSCSIVolumesOutput]
  def updateMaintenanceStartTime(input: models.UpdateMaintenanceStartTimeInput): F[models.UpdateMaintenanceStartTimeOutput]
  def describeCache(input: models.DescribeCacheInput): F[models.DescribeCacheOutput]
  def createCachediSCSIVolume(input: models.CreateCachediSCSIVolumeInput): F[models.CreateCachediSCSIVolumeOutput]
  def deleteBandwidthRateLimit(input: models.DeleteBandwidthRateLimitInput): F[models.DeleteBandwidthRateLimitOutput]
  def listVolumeInitiators(input: models.ListVolumeInitiatorsInput): F[models.ListVolumeInitiatorsOutput]
  def deleteTapeArchive(input: models.DeleteTapeArchiveInput): F[models.DeleteTapeArchiveOutput]
  def listLocalDisks(input: models.ListLocalDisksInput): F[models.ListLocalDisksOutput]
  def removeTagsFromResource(input: models.RemoveTagsFromResourceInput): F[models.RemoveTagsFromResourceOutput]
  def activateGateway(input: models.ActivateGatewayInput): F[models.ActivateGatewayOutput]
  def deleteTape(input: models.DeleteTapeInput): F[models.DeleteTapeOutput]
  def describeWorkingStorage(input: models.DescribeWorkingStorageInput): F[models.DescribeWorkingStorageOutput]
  def resetCache(input: models.ResetCacheInput): F[models.ResetCacheOutput]
  def listVolumeRecoveryPoints(input: models.ListVolumeRecoveryPointsInput): F[models.ListVolumeRecoveryPointsOutput]
  def describeNFSFileShares(input: models.DescribeNFSFileSharesInput): F[models.DescribeNFSFileSharesOutput]
  def describeTapeArchives(input: models.DescribeTapeArchivesInput): F[models.DescribeTapeArchivesOutput]
  def describeMaintenanceStartTime(input: models.DescribeMaintenanceStartTimeInput): F[models.DescribeMaintenanceStartTimeOutput]
  def describeStorediSCSIVolumes(input: models.DescribeStorediSCSIVolumesInput): F[models.DescribeStorediSCSIVolumesOutput]
  def setLocalConsolePassword(input: models.SetLocalConsolePasswordInput): F[models.SetLocalConsolePasswordOutput]
  def createTapeWithBarcode(input: models.CreateTapeWithBarcodeInput): F[models.CreateTapeWithBarcodeOutput]
  def describeBandwidthRateLimit(input: models.DescribeBandwidthRateLimitInput): F[models.DescribeBandwidthRateLimitOutput]
  def listVolumes(input: models.ListVolumesInput): F[models.ListVolumesOutput]
  def createStorediSCSIVolume(input: models.CreateStorediSCSIVolumeInput): F[models.CreateStorediSCSIVolumeOutput]
  def describeGatewayInformation(input: models.DescribeGatewayInformationInput): F[models.DescribeGatewayInformationOutput]
  def describeUploadBuffer(input: models.DescribeUploadBufferInput): F[models.DescribeUploadBufferOutput]
  def deleteSnapshotSchedule(input: models.DeleteSnapshotScheduleInput): F[models.DeleteSnapshotScheduleOutput]
  def updateGatewayInformation(input: models.UpdateGatewayInformationInput): F[models.UpdateGatewayInformationOutput]
  def retrieveTapeArchive(input: models.RetrieveTapeArchiveInput): F[models.RetrieveTapeArchiveOutput]
  def disableGateway(input: models.DisableGatewayInput): F[models.DisableGatewayOutput]
  def listGateways(input: models.ListGatewaysInput): F[models.ListGatewaysOutput]
  def createSnapshotFromVolumeRecoveryPoint(input: models.CreateSnapshotFromVolumeRecoveryPointInput): F[models.CreateSnapshotFromVolumeRecoveryPointOutput]
  def updateGatewaySoftwareNow(input: models.UpdateGatewaySoftwareNowInput): F[models.UpdateGatewaySoftwareNowOutput]
  def deleteFileShare(input: models.DeleteFileShareInput): F[models.DeleteFileShareOutput]
  def listTapes(input: models.ListTapesInput): F[models.ListTapesOutput]
  def addTagsToResource(input: models.AddTagsToResourceInput): F[models.AddTagsToResourceOutput]
  def cancelArchival(input: models.CancelArchivalInput): F[models.CancelArchivalOutput]
  def updateNFSFileShare(input: models.UpdateNFSFileShareInput): F[models.UpdateNFSFileShareOutput]
  def deleteGateway(input: models.DeleteGatewayInput): F[models.DeleteGatewayOutput]
  def listTagsForResource(input: models.ListTagsForResourceInput): F[models.ListTagsForResourceOutput]
  def addUploadBuffer(input: models.AddUploadBufferInput): F[models.AddUploadBufferOutput]
  def updateChapCredentials(input: models.UpdateChapCredentialsInput): F[models.UpdateChapCredentialsOutput]
  def updateVTLDeviceType(input: models.UpdateVTLDeviceTypeInput): F[models.UpdateVTLDeviceTypeOutput]
  def addCache(input: models.AddCacheInput): F[models.AddCacheOutput]
  def deleteVolume(input: models.DeleteVolumeInput): F[models.DeleteVolumeOutput]
  def refreshCache(input: models.RefreshCacheInput): F[models.RefreshCacheOutput]
  def retrieveTapeRecoveryPoint(input: models.RetrieveTapeRecoveryPointInput): F[models.RetrieveTapeRecoveryPointOutput]
  def createNFSFileShare(input: models.CreateNFSFileShareInput): F[models.CreateNFSFileShareOutput]
  def updateBandwidthRateLimit(input: models.UpdateBandwidthRateLimitInput): F[models.UpdateBandwidthRateLimitOutput]
  def updateSnapshotSchedule(input: models.UpdateSnapshotScheduleInput): F[models.UpdateSnapshotScheduleOutput]
  def describeTapes(input: models.DescribeTapesInput): F[models.DescribeTapesOutput]
  def deleteChapCredentials(input: models.DeleteChapCredentialsInput): F[models.DeleteChapCredentialsOutput]
  def describeChapCredentials(input: models.DescribeChapCredentialsInput): F[models.DescribeChapCredentialsOutput]
  def describeVTLDevices(input: models.DescribeVTLDevicesInput): F[models.DescribeVTLDevicesOutput]
  def createTapes(input: models.CreateTapesInput): F[models.CreateTapesOutput]
  def addWorkingStorage(input: models.AddWorkingStorageInput): F[models.AddWorkingStorageOutput]
  def startGateway(input: models.StartGatewayInput): F[models.StartGatewayOutput]
  def describeSnapshotSchedule(input: models.DescribeSnapshotScheduleInput): F[models.DescribeSnapshotScheduleOutput]
  def createSnapshot(input: models.CreateSnapshotInput): F[models.CreateSnapshotOutput]
  def listFileShares(input: models.ListFileSharesInput): F[models.ListFileSharesOutput]
  def cancelRetrieval(input: models.CancelRetrievalInput): F[models.CancelRetrievalOutput]
  def describeTapeRecoveryPoints(input: models.DescribeTapeRecoveryPointsInput): F[models.DescribeTapeRecoveryPointsOutput]
}