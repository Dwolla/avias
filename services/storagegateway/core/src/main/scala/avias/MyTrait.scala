package avias.storagegateway
trait Amazonstoragegateway[F[_]] {
  def shutdownGateway(input: avias.storagegateway.models.ShutdownGatewayInput): F[avias.storagegateway.models.ShutdownGatewayOutput]
  def describeCachediSCSIVolumes(input: avias.storagegateway.models.DescribeCachediSCSIVolumesInput): F[avias.storagegateway.models.DescribeCachediSCSIVolumesOutput]
  def updateMaintenanceStartTime(input: avias.storagegateway.models.UpdateMaintenanceStartTimeInput): F[avias.storagegateway.models.UpdateMaintenanceStartTimeOutput]
  def describeCache(input: avias.storagegateway.models.DescribeCacheInput): F[avias.storagegateway.models.DescribeCacheOutput]
  def createCachediSCSIVolume(input: avias.storagegateway.models.CreateCachediSCSIVolumeInput): F[avias.storagegateway.models.CreateCachediSCSIVolumeOutput]
  def deleteBandwidthRateLimit(input: avias.storagegateway.models.DeleteBandwidthRateLimitInput): F[avias.storagegateway.models.DeleteBandwidthRateLimitOutput]
  def listVolumeInitiators(input: avias.storagegateway.models.ListVolumeInitiatorsInput): F[avias.storagegateway.models.ListVolumeInitiatorsOutput]
  def deleteTapeArchive(input: avias.storagegateway.models.DeleteTapeArchiveInput): F[avias.storagegateway.models.DeleteTapeArchiveOutput]
  def listLocalDisks(input: avias.storagegateway.models.ListLocalDisksInput): F[avias.storagegateway.models.ListLocalDisksOutput]
  def removeTagsFromResource(input: avias.storagegateway.models.RemoveTagsFromResourceInput): F[avias.storagegateway.models.RemoveTagsFromResourceOutput]
  def activateGateway(input: avias.storagegateway.models.ActivateGatewayInput): F[avias.storagegateway.models.ActivateGatewayOutput]
  def deleteTape(input: avias.storagegateway.models.DeleteTapeInput): F[avias.storagegateway.models.DeleteTapeOutput]
  def describeWorkingStorage(input: avias.storagegateway.models.DescribeWorkingStorageInput): F[avias.storagegateway.models.DescribeWorkingStorageOutput]
  def resetCache(input: avias.storagegateway.models.ResetCacheInput): F[avias.storagegateway.models.ResetCacheOutput]
  def listVolumeRecoveryPoints(input: avias.storagegateway.models.ListVolumeRecoveryPointsInput): F[avias.storagegateway.models.ListVolumeRecoveryPointsOutput]
  def describeNFSFileShares(input: avias.storagegateway.models.DescribeNFSFileSharesInput): F[avias.storagegateway.models.DescribeNFSFileSharesOutput]
  def describeTapeArchives(input: avias.storagegateway.models.DescribeTapeArchivesInput): F[avias.storagegateway.models.DescribeTapeArchivesOutput]
  def describeMaintenanceStartTime(input: avias.storagegateway.models.DescribeMaintenanceStartTimeInput): F[avias.storagegateway.models.DescribeMaintenanceStartTimeOutput]
  def describeStorediSCSIVolumes(input: avias.storagegateway.models.DescribeStorediSCSIVolumesInput): F[avias.storagegateway.models.DescribeStorediSCSIVolumesOutput]
  def setLocalConsolePassword(input: avias.storagegateway.models.SetLocalConsolePasswordInput): F[avias.storagegateway.models.SetLocalConsolePasswordOutput]
  def createTapeWithBarcode(input: avias.storagegateway.models.CreateTapeWithBarcodeInput): F[avias.storagegateway.models.CreateTapeWithBarcodeOutput]
  def describeBandwidthRateLimit(input: avias.storagegateway.models.DescribeBandwidthRateLimitInput): F[avias.storagegateway.models.DescribeBandwidthRateLimitOutput]
  def listVolumes(input: avias.storagegateway.models.ListVolumesInput): F[avias.storagegateway.models.ListVolumesOutput]
  def createStorediSCSIVolume(input: avias.storagegateway.models.CreateStorediSCSIVolumeInput): F[avias.storagegateway.models.CreateStorediSCSIVolumeOutput]
  def describeGatewayInformation(input: avias.storagegateway.models.DescribeGatewayInformationInput): F[avias.storagegateway.models.DescribeGatewayInformationOutput]
  def describeUploadBuffer(input: avias.storagegateway.models.DescribeUploadBufferInput): F[avias.storagegateway.models.DescribeUploadBufferOutput]
  def deleteSnapshotSchedule(input: avias.storagegateway.models.DeleteSnapshotScheduleInput): F[avias.storagegateway.models.DeleteSnapshotScheduleOutput]
  def updateGatewayInformation(input: avias.storagegateway.models.UpdateGatewayInformationInput): F[avias.storagegateway.models.UpdateGatewayInformationOutput]
  def retrieveTapeArchive(input: avias.storagegateway.models.RetrieveTapeArchiveInput): F[avias.storagegateway.models.RetrieveTapeArchiveOutput]
  def disableGateway(input: avias.storagegateway.models.DisableGatewayInput): F[avias.storagegateway.models.DisableGatewayOutput]
  def listGateways(input: avias.storagegateway.models.ListGatewaysInput): F[avias.storagegateway.models.ListGatewaysOutput]
  def createSnapshotFromVolumeRecoveryPoint(input: avias.storagegateway.models.CreateSnapshotFromVolumeRecoveryPointInput): F[avias.storagegateway.models.CreateSnapshotFromVolumeRecoveryPointOutput]
  def updateGatewaySoftwareNow(input: avias.storagegateway.models.UpdateGatewaySoftwareNowInput): F[avias.storagegateway.models.UpdateGatewaySoftwareNowOutput]
  def deleteFileShare(input: avias.storagegateway.models.DeleteFileShareInput): F[avias.storagegateway.models.DeleteFileShareOutput]
  def listTapes(input: avias.storagegateway.models.ListTapesInput): F[avias.storagegateway.models.ListTapesOutput]
  def addTagsToResource(input: avias.storagegateway.models.AddTagsToResourceInput): F[avias.storagegateway.models.AddTagsToResourceOutput]
  def cancelArchival(input: avias.storagegateway.models.CancelArchivalInput): F[avias.storagegateway.models.CancelArchivalOutput]
  def updateNFSFileShare(input: avias.storagegateway.models.UpdateNFSFileShareInput): F[avias.storagegateway.models.UpdateNFSFileShareOutput]
  def deleteGateway(input: avias.storagegateway.models.DeleteGatewayInput): F[avias.storagegateway.models.DeleteGatewayOutput]
  def listTagsForResource(input: avias.storagegateway.models.ListTagsForResourceInput): F[avias.storagegateway.models.ListTagsForResourceOutput]
  def addUploadBuffer(input: avias.storagegateway.models.AddUploadBufferInput): F[avias.storagegateway.models.AddUploadBufferOutput]
  def updateChapCredentials(input: avias.storagegateway.models.UpdateChapCredentialsInput): F[avias.storagegateway.models.UpdateChapCredentialsOutput]
  def updateVTLDeviceType(input: avias.storagegateway.models.UpdateVTLDeviceTypeInput): F[avias.storagegateway.models.UpdateVTLDeviceTypeOutput]
  def addCache(input: avias.storagegateway.models.AddCacheInput): F[avias.storagegateway.models.AddCacheOutput]
  def deleteVolume(input: avias.storagegateway.models.DeleteVolumeInput): F[avias.storagegateway.models.DeleteVolumeOutput]
  def refreshCache(input: avias.storagegateway.models.RefreshCacheInput): F[avias.storagegateway.models.RefreshCacheOutput]
  def retrieveTapeRecoveryPoint(input: avias.storagegateway.models.RetrieveTapeRecoveryPointInput): F[avias.storagegateway.models.RetrieveTapeRecoveryPointOutput]
  def createNFSFileShare(input: avias.storagegateway.models.CreateNFSFileShareInput): F[avias.storagegateway.models.CreateNFSFileShareOutput]
  def updateBandwidthRateLimit(input: avias.storagegateway.models.UpdateBandwidthRateLimitInput): F[avias.storagegateway.models.UpdateBandwidthRateLimitOutput]
  def updateSnapshotSchedule(input: avias.storagegateway.models.UpdateSnapshotScheduleInput): F[avias.storagegateway.models.UpdateSnapshotScheduleOutput]
  def describeTapes(input: avias.storagegateway.models.DescribeTapesInput): F[avias.storagegateway.models.DescribeTapesOutput]
  def deleteChapCredentials(input: avias.storagegateway.models.DeleteChapCredentialsInput): F[avias.storagegateway.models.DeleteChapCredentialsOutput]
  def describeChapCredentials(input: avias.storagegateway.models.DescribeChapCredentialsInput): F[avias.storagegateway.models.DescribeChapCredentialsOutput]
  def describeVTLDevices(input: avias.storagegateway.models.DescribeVTLDevicesInput): F[avias.storagegateway.models.DescribeVTLDevicesOutput]
  def createTapes(input: avias.storagegateway.models.CreateTapesInput): F[avias.storagegateway.models.CreateTapesOutput]
  def addWorkingStorage(input: avias.storagegateway.models.AddWorkingStorageInput): F[avias.storagegateway.models.AddWorkingStorageOutput]
  def startGateway(input: avias.storagegateway.models.StartGatewayInput): F[avias.storagegateway.models.StartGatewayOutput]
  def describeSnapshotSchedule(input: avias.storagegateway.models.DescribeSnapshotScheduleInput): F[avias.storagegateway.models.DescribeSnapshotScheduleOutput]
  def createSnapshot(input: avias.storagegateway.models.CreateSnapshotInput): F[avias.storagegateway.models.CreateSnapshotOutput]
  def listFileShares(input: avias.storagegateway.models.ListFileSharesInput): F[avias.storagegateway.models.ListFileSharesOutput]
  def cancelRetrieval(input: avias.storagegateway.models.CancelRetrievalInput): F[avias.storagegateway.models.CancelRetrievalOutput]
  def describeTapeRecoveryPoints(input: avias.storagegateway.models.DescribeTapeRecoveryPointsInput): F[avias.storagegateway.models.DescribeTapeRecoveryPointsOutput]
}