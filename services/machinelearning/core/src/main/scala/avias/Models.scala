package avias.machinelearning.models
final case class MLModel(mlmodelId: scala.Option[java.lang.String] = scala.None, trainingDataSourceId: scala.Option[java.lang.String] = scala.None, trainingParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, scoreThresholdLastUpdatedAt: scala.Option[java.time.Instant] = scala.None, lastUpdatedAt: scala.Option[java.time.Instant] = scala.None, createdAt: scala.Option[java.time.Instant] = scala.None, finishedAt: scala.Option[java.time.Instant] = scala.None, startedAt: scala.Option[java.time.Instant] = scala.None, message: scala.Option[java.lang.String] = scala.None, mlmodelType: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, algorithm: scala.Option[java.lang.String] = scala.None, endpointInfo: scala.Option[avias.machinelearning.models.RealtimeEndpointInfo] = scala.None, scoreThreshold: scala.Option[scala.Float] = scala.None, inputDataLocationS3: scala.Option[java.lang.String] = scala.None, sizeInBytes: scala.Option[scala.Long] = scala.None, computeTime: scala.Option[scala.Long] = scala.None, name: scala.Option[java.lang.String] = scala.None, createdByIamUser: scala.Option[java.lang.String] = scala.None)
final case class CreateMLModelOutput(mlmodelId: scala.Option[java.lang.String] = scala.None)
final case class BatchPrediction(batchPredictionId: scala.Option[java.lang.String] = scala.None, mlmodelId: scala.Option[java.lang.String] = scala.None, batchPredictionDataSourceId: scala.Option[java.lang.String] = scala.None, createdAt: scala.Option[java.time.Instant] = scala.None, lastUpdatedAt: scala.Option[java.time.Instant] = scala.None, finishedAt: scala.Option[java.time.Instant] = scala.None, startedAt: scala.Option[java.time.Instant] = scala.None, message: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, inputDataLocationS3: scala.Option[java.lang.String] = scala.None, outputUri: scala.Option[java.lang.String] = scala.None, computeTime: scala.Option[scala.Long] = scala.None, totalRecordCount: scala.Option[scala.Long] = scala.None, invalidRecordCount: scala.Option[scala.Long] = scala.None, createdByIamUser: scala.Option[java.lang.String] = scala.None)
final case class GetEvaluationInput(evaluationId: java.lang.String)
final case class CreateBatchPredictionInput(batchPredictionId: java.lang.String, mlmodelId: java.lang.String, batchPredictionDataSourceId: java.lang.String, outputUri: java.lang.String, batchPredictionName: scala.Option[java.lang.String] = scala.None)
final case class DeleteMLModelOutput(mlmodelId: scala.Option[java.lang.String] = scala.None)
final case class IdempotentParameterMismatchException(message: scala.Option[java.lang.String] = scala.None, code: scala.Option[scala.Int] = scala.None)
final case class CreateDataSourceFromRDSOutput(dataSourceId: scala.Option[java.lang.String] = scala.None)
final case class Evaluation(evaluationId: scala.Option[java.lang.String] = scala.None, mlmodelId: scala.Option[java.lang.String] = scala.None, evaluationDataSourceId: scala.Option[java.lang.String] = scala.None, createdAt: scala.Option[java.time.Instant] = scala.None, lastUpdatedAt: scala.Option[java.time.Instant] = scala.None, finishedAt: scala.Option[java.time.Instant] = scala.None, startedAt: scala.Option[java.time.Instant] = scala.None, message: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, performanceMetrics: scala.Option[avias.machinelearning.models.PerformanceMetrics] = scala.None, name: scala.Option[java.lang.String] = scala.None, inputDataLocationS3: scala.Option[java.lang.String] = scala.None, computeTime: scala.Option[scala.Long] = scala.None, createdByIamUser: scala.Option[java.lang.String] = scala.None)
final case class CreateBatchPredictionOutput(batchPredictionId: scala.Option[java.lang.String] = scala.None)
final case class DescribeBatchPredictionsOutput(results: scala.Option[scala.List[avias.machinelearning.models.BatchPrediction]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeMLModelsInput(nextToken: scala.Option[java.lang.String] = scala.None, sortOrder: scala.Option[java.lang.String] = scala.None, gt: scala.Option[java.lang.String] = scala.None, lt: scala.Option[java.lang.String] = scala.None, prefix: scala.Option[java.lang.String] = scala.None, eq: scala.Option[java.lang.String] = scala.None, ne: scala.Option[java.lang.String] = scala.None, ge: scala.Option[java.lang.String] = scala.None, le: scala.Option[java.lang.String] = scala.None, limit: scala.Option[scala.Int] = scala.None, filterVariable: scala.Option[java.lang.String] = scala.None)
final case class InternalServerException(message: scala.Option[java.lang.String] = scala.None, code: scala.Option[scala.Int] = scala.None)
final case class DescribeMLModelsOutput(results: scala.Option[scala.List[avias.machinelearning.models.MLModel]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class RDSDatabaseCredentials(username: java.lang.String, password: java.lang.String)
final case class RDSDatabase(instanceIdentifier: java.lang.String, databaseName: java.lang.String)
final case class PredictOutput(prediction: scala.Option[avias.machinelearning.models.Prediction] = scala.None)
final case class DescribeDataSourcesOutput(results: scala.Option[scala.List[avias.machinelearning.models.DataSource]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DeleteEvaluationInput(evaluationId: java.lang.String)
final case class DeleteRealtimeEndpointInput(mlmodelId: java.lang.String)
final case class DeleteDataSourceInput(dataSourceId: java.lang.String)
final case class TagLimitExceededException(message: scala.Option[java.lang.String] = scala.None)
final case class DescribeEvaluationsOutput(results: scala.Option[scala.List[avias.machinelearning.models.Evaluation]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DeleteTagsInput(tagKeys: scala.List[java.lang.String], resourceId: java.lang.String, resourceType: java.lang.String)
final case class CreateDataSourceFromRDSInput(dataSourceId: java.lang.String, roleARN: java.lang.String, rdsdata: avias.machinelearning.models.RDSDataSpec, computeStatistics: scala.Option[scala.Boolean] = scala.None, dataSourceName: scala.Option[java.lang.String] = scala.None)
final case class Prediction(predictedLabel: scala.Option[java.lang.String] = scala.None, predictedValue: scala.Option[scala.Float] = scala.None, predictedScores: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.Float]] = scala.None, details: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None)
final case class CreateEvaluationInput(evaluationId: java.lang.String, mlmodelId: java.lang.String, evaluationDataSourceId: java.lang.String, evaluationName: scala.Option[java.lang.String] = scala.None)
final case class DeleteBatchPredictionInput(batchPredictionId: java.lang.String)
final case class DeleteTagsOutput(resourceId: scala.Option[java.lang.String] = scala.None, resourceType: scala.Option[java.lang.String] = scala.None)
final case class GetEvaluationOutput(evaluationId: scala.Option[java.lang.String] = scala.None, mlmodelId: scala.Option[java.lang.String] = scala.None, evaluationDataSourceId: scala.Option[java.lang.String] = scala.None, createdAt: scala.Option[java.time.Instant] = scala.None, lastUpdatedAt: scala.Option[java.time.Instant] = scala.None, finishedAt: scala.Option[java.time.Instant] = scala.None, startedAt: scala.Option[java.time.Instant] = scala.None, message: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, performanceMetrics: scala.Option[avias.machinelearning.models.PerformanceMetrics] = scala.None, name: scala.Option[java.lang.String] = scala.None, inputDataLocationS3: scala.Option[java.lang.String] = scala.None, logUri: scala.Option[java.lang.String] = scala.None, computeTime: scala.Option[scala.Long] = scala.None, createdByIamUser: scala.Option[java.lang.String] = scala.None)
final case class UpdateBatchPredictionOutput(batchPredictionId: scala.Option[java.lang.String] = scala.None)
final case class UpdateBatchPredictionInput(batchPredictionId: java.lang.String, batchPredictionName: java.lang.String)
final case class CreateRealtimeEndpointInput(mlmodelId: java.lang.String)
final case class PerformanceMetrics(properties: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None)
final case class InvalidInputException(message: scala.Option[java.lang.String] = scala.None, code: scala.Option[scala.Int] = scala.None)
final case class CreateEvaluationOutput(evaluationId: scala.Option[java.lang.String] = scala.None)
final case class RealtimeEndpointInfo(peakRequestsPerSecond: scala.Option[scala.Int] = scala.None, createdAt: scala.Option[java.time.Instant] = scala.None, endpointUrl: scala.Option[java.lang.String] = scala.None, endpointStatus: scala.Option[java.lang.String] = scala.None)
final case class GetMLModelOutput(schema: scala.Option[java.lang.String] = scala.None, mlmodelId: scala.Option[java.lang.String] = scala.None, trainingDataSourceId: scala.Option[java.lang.String] = scala.None, trainingParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, scoreThresholdLastUpdatedAt: scala.Option[java.time.Instant] = scala.None, lastUpdatedAt: scala.Option[java.time.Instant] = scala.None, createdAt: scala.Option[java.time.Instant] = scala.None, finishedAt: scala.Option[java.time.Instant] = scala.None, startedAt: scala.Option[java.time.Instant] = scala.None, recipe: scala.Option[java.lang.String] = scala.None, message: scala.Option[java.lang.String] = scala.None, mlmodelType: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, endpointInfo: scala.Option[avias.machinelearning.models.RealtimeEndpointInfo] = scala.None, scoreThreshold: scala.Option[scala.Float] = scala.None, inputDataLocationS3: scala.Option[java.lang.String] = scala.None, logUri: scala.Option[java.lang.String] = scala.None, sizeInBytes: scala.Option[scala.Long] = scala.None, computeTime: scala.Option[scala.Long] = scala.None, name: scala.Option[java.lang.String] = scala.None, createdByIamUser: scala.Option[java.lang.String] = scala.None)
final case class RedshiftDatabase(databaseName: java.lang.String, clusterIdentifier: java.lang.String)
final case class GetDataSourceOutput(dataSourceSchema: scala.Option[java.lang.String] = scala.None, dataSourceId: scala.Option[java.lang.String] = scala.None, createdAt: scala.Option[java.time.Instant] = scala.None, lastUpdatedAt: scala.Option[java.time.Instant] = scala.None, finishedAt: scala.Option[java.time.Instant] = scala.None, startedAt: scala.Option[java.time.Instant] = scala.None, message: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, computeStatistics: scala.Option[scala.Boolean] = scala.None, name: scala.Option[java.lang.String] = scala.None, dataRearrangement: scala.Option[java.lang.String] = scala.None, redshiftMetadata: scala.Option[avias.machinelearning.models.RedshiftMetadata] = scala.None, roleARN: scala.Option[java.lang.String] = scala.None, dataLocationS3: scala.Option[java.lang.String] = scala.None, logUri: scala.Option[java.lang.String] = scala.None, rdsmetadata: scala.Option[avias.machinelearning.models.RDSMetadata] = scala.None, dataSizeInBytes: scala.Option[scala.Long] = scala.None, numberOfFiles: scala.Option[scala.Long] = scala.None, computeTime: scala.Option[scala.Long] = scala.None, createdByIamUser: scala.Option[java.lang.String] = scala.None)
final case class CreateRealtimeEndpointOutput(mlmodelId: scala.Option[java.lang.String] = scala.None, realtimeEndpointInfo: scala.Option[avias.machinelearning.models.RealtimeEndpointInfo] = scala.None)
final case class UpdateMLModelOutput(mlmodelId: scala.Option[java.lang.String] = scala.None)
final case class AddTagsOutput(resourceId: scala.Option[java.lang.String] = scala.None, resourceType: scala.Option[java.lang.String] = scala.None)
final case class UpdateEvaluationOutput(evaluationId: scala.Option[java.lang.String] = scala.None)
final case class RedshiftMetadata(redshiftDatabase: scala.Option[avias.machinelearning.models.RedshiftDatabase] = scala.None, databaseUserName: scala.Option[java.lang.String] = scala.None, selectSqlQuery: scala.Option[java.lang.String] = scala.None)
final case class DeleteRealtimeEndpointOutput(mlmodelId: scala.Option[java.lang.String] = scala.None, realtimeEndpointInfo: scala.Option[avias.machinelearning.models.RealtimeEndpointInfo] = scala.None)
final case class GetDataSourceInput(dataSourceId: java.lang.String, verbose: scala.Option[scala.Boolean] = scala.None)
final case class RedshiftDataSpec(databaseInformation: avias.machinelearning.models.RedshiftDatabase, s3StagingLocation: java.lang.String, databaseCredentials: avias.machinelearning.models.RedshiftDatabaseCredentials, selectSqlQuery: java.lang.String, dataSchema: scala.Option[java.lang.String] = scala.None, dataRearrangement: scala.Option[java.lang.String] = scala.None, dataSchemaUri: scala.Option[java.lang.String] = scala.None)
final case class CreateMLModelInput(mlmodelId: java.lang.String, trainingDataSourceId: java.lang.String, mlmodelType: java.lang.String, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, recipe: scala.Option[java.lang.String] = scala.None, mlmodelName: scala.Option[java.lang.String] = scala.None, recipeUri: scala.Option[java.lang.String] = scala.None)
final case class DeleteDataSourceOutput(dataSourceId: scala.Option[java.lang.String] = scala.None)
final case class UpdateDataSourceOutput(dataSourceId: scala.Option[java.lang.String] = scala.None)
final case class CreateDataSourceFromRedshiftOutput(dataSourceId: scala.Option[java.lang.String] = scala.None)
final case class Tag(key: scala.Option[java.lang.String] = scala.None, value: scala.Option[java.lang.String] = scala.None)
final case class AddTagsInput(tags: scala.List[avias.machinelearning.models.Tag], resourceId: java.lang.String, resourceType: java.lang.String)
final case class DescribeBatchPredictionsInput(nextToken: scala.Option[java.lang.String] = scala.None, sortOrder: scala.Option[java.lang.String] = scala.None, gt: scala.Option[java.lang.String] = scala.None, lt: scala.Option[java.lang.String] = scala.None, prefix: scala.Option[java.lang.String] = scala.None, eq: scala.Option[java.lang.String] = scala.None, ne: scala.Option[java.lang.String] = scala.None, ge: scala.Option[java.lang.String] = scala.None, le: scala.Option[java.lang.String] = scala.None, limit: scala.Option[scala.Int] = scala.None, filterVariable: scala.Option[java.lang.String] = scala.None)
final case class RDSDataSpec(subnetId: java.lang.String, databaseCredentials: avias.machinelearning.models.RDSDatabaseCredentials, databaseInformation: avias.machinelearning.models.RDSDatabase, serviceRole: java.lang.String, resourceRole: java.lang.String, s3StagingLocation: java.lang.String, selectSqlQuery: java.lang.String, securityGroupIds: scala.List[java.lang.String], dataSchema: scala.Option[java.lang.String] = scala.None, dataRearrangement: scala.Option[java.lang.String] = scala.None, dataSchemaUri: scala.Option[java.lang.String] = scala.None)
final case class CreateDataSourceFromRedshiftInput(dataSourceId: java.lang.String, dataSpec: avias.machinelearning.models.RedshiftDataSpec, roleARN: java.lang.String, computeStatistics: scala.Option[scala.Boolean] = scala.None, dataSourceName: scala.Option[java.lang.String] = scala.None)
final case class S3DataSpec(dataLocationS3: java.lang.String, dataSchemaLocationS3: scala.Option[java.lang.String] = scala.None, dataRearrangement: scala.Option[java.lang.String] = scala.None, dataSchema: scala.Option[java.lang.String] = scala.None)
final case class DeleteBatchPredictionOutput(batchPredictionId: scala.Option[java.lang.String] = scala.None)
final case class PredictInput(mlmodelId: java.lang.String, record: scala.collection.immutable.Map[java.lang.String, java.lang.String], predictEndpoint: java.lang.String)
final case class UpdateMLModelInput(mlmodelId: java.lang.String, mlmodelName: scala.Option[java.lang.String] = scala.None, scoreThreshold: scala.Option[scala.Float] = scala.None)
final case class DescribeDataSourcesInput(nextToken: scala.Option[java.lang.String] = scala.None, sortOrder: scala.Option[java.lang.String] = scala.None, gt: scala.Option[java.lang.String] = scala.None, lt: scala.Option[java.lang.String] = scala.None, prefix: scala.Option[java.lang.String] = scala.None, eq: scala.Option[java.lang.String] = scala.None, ne: scala.Option[java.lang.String] = scala.None, ge: scala.Option[java.lang.String] = scala.None, le: scala.Option[java.lang.String] = scala.None, limit: scala.Option[scala.Int] = scala.None, filterVariable: scala.Option[java.lang.String] = scala.None)
final case class ResourceNotFoundException(message: scala.Option[java.lang.String] = scala.None, code: scala.Option[scala.Int] = scala.None)
final case class GetBatchPredictionOutput(batchPredictionId: scala.Option[java.lang.String] = scala.None, mlmodelId: scala.Option[java.lang.String] = scala.None, batchPredictionDataSourceId: scala.Option[java.lang.String] = scala.None, createdAt: scala.Option[java.time.Instant] = scala.None, lastUpdatedAt: scala.Option[java.time.Instant] = scala.None, finishedAt: scala.Option[java.time.Instant] = scala.None, startedAt: scala.Option[java.time.Instant] = scala.None, message: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, inputDataLocationS3: scala.Option[java.lang.String] = scala.None, outputUri: scala.Option[java.lang.String] = scala.None, logUri: scala.Option[java.lang.String] = scala.None, computeTime: scala.Option[scala.Long] = scala.None, totalRecordCount: scala.Option[scala.Long] = scala.None, invalidRecordCount: scala.Option[scala.Long] = scala.None, createdByIamUser: scala.Option[java.lang.String] = scala.None)
final case class RedshiftDatabaseCredentials(username: java.lang.String, password: java.lang.String)
final case class DeleteEvaluationOutput(evaluationId: scala.Option[java.lang.String] = scala.None)
final case class CreateDataSourceFromS3Input(dataSourceId: java.lang.String, dataSpec: avias.machinelearning.models.S3DataSpec, dataSourceName: scala.Option[java.lang.String] = scala.None, computeStatistics: scala.Option[scala.Boolean] = scala.None)
final case class DeleteMLModelInput(mlmodelId: java.lang.String)
final case class RDSMetadata(database: scala.Option[avias.machinelearning.models.RDSDatabase] = scala.None, serviceRole: scala.Option[java.lang.String] = scala.None, dataPipelineId: scala.Option[java.lang.String] = scala.None, resourceRole: scala.Option[java.lang.String] = scala.None, databaseUserName: scala.Option[java.lang.String] = scala.None, selectSqlQuery: scala.Option[java.lang.String] = scala.None)
final case class UpdateDataSourceInput(dataSourceId: java.lang.String, dataSourceName: java.lang.String)
final case class InvalidTagException(message: scala.Option[java.lang.String] = scala.None)
final case class LimitExceededException(message: scala.Option[java.lang.String] = scala.None, code: scala.Option[scala.Int] = scala.None)
final case class CreateDataSourceFromS3Output(dataSourceId: scala.Option[java.lang.String] = scala.None)
final case class DescribeTagsInput(resourceId: java.lang.String, resourceType: java.lang.String)
final case class GetMLModelInput(mlmodelId: java.lang.String, verbose: scala.Option[scala.Boolean] = scala.None)
final case class DescribeTagsOutput(resourceId: scala.Option[java.lang.String] = scala.None, resourceType: scala.Option[java.lang.String] = scala.None, tags: scala.Option[scala.List[avias.machinelearning.models.Tag]] = scala.None)
final case class GetBatchPredictionInput(batchPredictionId: java.lang.String)
final case class UpdateEvaluationInput(evaluationId: java.lang.String, evaluationName: java.lang.String)
final case class PredictorNotMountedException(message: scala.Option[java.lang.String] = scala.None)
final case class DescribeEvaluationsInput(nextToken: scala.Option[java.lang.String] = scala.None, sortOrder: scala.Option[java.lang.String] = scala.None, gt: scala.Option[java.lang.String] = scala.None, lt: scala.Option[java.lang.String] = scala.None, prefix: scala.Option[java.lang.String] = scala.None, eq: scala.Option[java.lang.String] = scala.None, ne: scala.Option[java.lang.String] = scala.None, ge: scala.Option[java.lang.String] = scala.None, le: scala.Option[java.lang.String] = scala.None, limit: scala.Option[scala.Int] = scala.None, filterVariable: scala.Option[java.lang.String] = scala.None)
final case class DataSource(dataSourceId: scala.Option[java.lang.String] = scala.None, createdAt: scala.Option[java.time.Instant] = scala.None, lastUpdatedAt: scala.Option[java.time.Instant] = scala.None, finishedAt: scala.Option[java.time.Instant] = scala.None, startedAt: scala.Option[java.time.Instant] = scala.None, message: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, computeStatistics: scala.Option[scala.Boolean] = scala.None, name: scala.Option[java.lang.String] = scala.None, dataRearrangement: scala.Option[java.lang.String] = scala.None, redshiftMetadata: scala.Option[avias.machinelearning.models.RedshiftMetadata] = scala.None, roleARN: scala.Option[java.lang.String] = scala.None, dataLocationS3: scala.Option[java.lang.String] = scala.None, rdsmetadata: scala.Option[avias.machinelearning.models.RDSMetadata] = scala.None, dataSizeInBytes: scala.Option[scala.Long] = scala.None, numberOfFiles: scala.Option[scala.Long] = scala.None, computeTime: scala.Option[scala.Long] = scala.None, createdByIamUser: scala.Option[java.lang.String] = scala.None)