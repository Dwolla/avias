package org.lyranthe.araethura.kinesisfirehose.models
final case class DeleteDeliveryStreamInput(deliveryStreamName: java.lang.String)
final case class ProcessorParameter(parameterName: java.lang.String, parameterValue: java.lang.String)
final case class S3DestinationUpdate(cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, encryptionConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.EncryptionConfiguration] = scala.None, bucketARN: scala.Option[java.lang.String] = scala.None, roleARN: scala.Option[java.lang.String] = scala.None, compressionFormat: scala.Option[java.lang.String] = scala.None, bufferingHints: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.BufferingHints] = scala.None, prefix: scala.Option[java.lang.String] = scala.None)
final case class CreateDeliveryStreamInput(deliveryStreamName: java.lang.String, splunkDestinationConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.SplunkDestinationConfiguration] = scala.None, extendedS3DestinationConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ExtendedS3DestinationConfiguration] = scala.None, s3DestinationConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationConfiguration] = scala.None, deliveryStreamType: scala.Option[java.lang.String] = scala.None, redshiftDestinationConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.RedshiftDestinationConfiguration] = scala.None, kinesisStreamSourceConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.KinesisStreamSourceConfiguration] = scala.None, elasticsearchDestinationConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ElasticsearchDestinationConfiguration] = scala.None)
final case class ConcurrentModificationException(message: scala.Option[java.lang.String] = scala.None)
final case class CloudWatchLoggingOptions(enabled: scala.Option[scala.Boolean] = scala.None, logGroupName: scala.Option[java.lang.String] = scala.None, logStreamName: scala.Option[java.lang.String] = scala.None)
final case class UpdateDestinationInput(destinationId: java.lang.String, deliveryStreamName: java.lang.String, currentDeliveryStreamVersionId: java.lang.String, s3DestinationUpdate: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationUpdate] = scala.None, redshiftDestinationUpdate: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.RedshiftDestinationUpdate] = scala.None, elasticsearchDestinationUpdate: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ElasticsearchDestinationUpdate] = scala.None, splunkDestinationUpdate: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.SplunkDestinationUpdate] = scala.None, extendedS3DestinationUpdate: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ExtendedS3DestinationUpdate] = scala.None)
final case class S3DestinationDescription(encryptionConfiguration: org.lyranthe.araethura.kinesisfirehose.models.EncryptionConfiguration, bucketARN: java.lang.String, roleARN: java.lang.String, compressionFormat: java.lang.String, bufferingHints: org.lyranthe.araethura.kinesisfirehose.models.BufferingHints, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, prefix: scala.Option[java.lang.String] = scala.None)
final case class SplunkRetryOptions(durationInSeconds: scala.Option[scala.Int] = scala.None)
final case class SplunkDestinationConfiguration(hecendpointType: java.lang.String, s3Configuration: org.lyranthe.araethura.kinesisfirehose.models.S3DestinationConfiguration, hecendpoint: java.lang.String, hectoken: java.lang.String, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, retryOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.SplunkRetryOptions] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, hecacknowledgmentTimeoutInSeconds: scala.Option[scala.Int] = scala.None, s3BackupMode: scala.Option[java.lang.String] = scala.None)
final case class PutRecordInput(deliveryStreamName: java.lang.String, record: org.lyranthe.araethura.kinesisfirehose.models.Record)
final case class SplunkDestinationDescription(hecendpointType: scala.Option[java.lang.String] = scala.None, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, s3DestinationDescription: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationDescription] = scala.None, retryOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.SplunkRetryOptions] = scala.None, hecendpoint: scala.Option[java.lang.String] = scala.None, hectoken: scala.Option[java.lang.String] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, hecacknowledgmentTimeoutInSeconds: scala.Option[scala.Int] = scala.None, s3BackupMode: scala.Option[java.lang.String] = scala.None)
final case class ElasticsearchBufferingHints(intervalInSeconds: scala.Option[scala.Int] = scala.None, sizeInMBs: scala.Option[scala.Int] = scala.None)
case object DeleteDeliveryStreamOutput
final case class CreateDeliveryStreamOutput(deliveryStreamARN: scala.Option[java.lang.String] = scala.None)
final case class LimitExceededException(message: scala.Option[java.lang.String] = scala.None)
final case class PutRecordBatchOutput(failedPutCount: scala.Int, requestResponses: scala.List[org.lyranthe.araethura.kinesisfirehose.models.PutRecordBatchResponseEntry])
final case class RedshiftDestinationUpdate(s3Update: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationUpdate] = scala.None, s3BackupUpdate: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationUpdate] = scala.None, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, username: scala.Option[java.lang.String] = scala.None, copyCommand: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CopyCommand] = scala.None, password: scala.Option[java.lang.String] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, roleARN: scala.Option[java.lang.String] = scala.None, clusterJDBCURL: scala.Option[java.lang.String] = scala.None, s3BackupMode: scala.Option[java.lang.String] = scala.None, retryOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.RedshiftRetryOptions] = scala.None)
final case class KMSEncryptionConfig(awskmskeyARN: java.lang.String)
final case class DeliveryStreamDescription(deliveryStreamARN: java.lang.String, destinations: scala.List[org.lyranthe.araethura.kinesisfirehose.models.DestinationDescription], deliveryStreamType: java.lang.String, hasMoreDestinations: scala.Boolean, deliveryStreamName: java.lang.String, versionId: java.lang.String, deliveryStreamStatus: java.lang.String, createTimestamp: scala.Option[java.time.Instant] = scala.None, lastUpdateTimestamp: scala.Option[java.time.Instant] = scala.None, source: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.SourceDescription] = scala.None)
final case class RedshiftDestinationDescription(s3DestinationDescription: org.lyranthe.araethura.kinesisfirehose.models.S3DestinationDescription, username: java.lang.String, copyCommand: org.lyranthe.araethura.kinesisfirehose.models.CopyCommand, roleARN: java.lang.String, clusterJDBCURL: java.lang.String, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, s3BackupDescription: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationDescription] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, s3BackupMode: scala.Option[java.lang.String] = scala.None, retryOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.RedshiftRetryOptions] = scala.None)
final case class ExtendedS3DestinationConfiguration(bucketARN: java.lang.String, roleARN: java.lang.String, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, s3BackupConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationConfiguration] = scala.None, encryptionConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.EncryptionConfiguration] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, compressionFormat: scala.Option[java.lang.String] = scala.None, s3BackupMode: scala.Option[java.lang.String] = scala.None, bufferingHints: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.BufferingHints] = scala.None, prefix: scala.Option[java.lang.String] = scala.None)
final case class S3DestinationConfiguration(bucketARN: java.lang.String, roleARN: java.lang.String, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, encryptionConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.EncryptionConfiguration] = scala.None, compressionFormat: scala.Option[java.lang.String] = scala.None, bufferingHints: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.BufferingHints] = scala.None, prefix: scala.Option[java.lang.String] = scala.None)
final case class SourceDescription(kinesisStreamSourceDescription: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.KinesisStreamSourceDescription] = scala.None)
final case class DescribeDeliveryStreamInput(deliveryStreamName: java.lang.String, limit: scala.Option[scala.Int] = scala.None, exclusiveStartDestinationId: scala.Option[java.lang.String] = scala.None)
final case class ExtendedS3DestinationDescription(encryptionConfiguration: org.lyranthe.araethura.kinesisfirehose.models.EncryptionConfiguration, bucketARN: java.lang.String, roleARN: java.lang.String, compressionFormat: java.lang.String, bufferingHints: org.lyranthe.araethura.kinesisfirehose.models.BufferingHints, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, s3BackupDescription: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationDescription] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, s3BackupMode: scala.Option[java.lang.String] = scala.None, prefix: scala.Option[java.lang.String] = scala.None)
final case class DescribeDeliveryStreamOutput(deliveryStreamDescription: org.lyranthe.araethura.kinesisfirehose.models.DeliveryStreamDescription)
final case class ResourceInUseException(message: scala.Option[java.lang.String] = scala.None)
final case class PutRecordOutput(recordId: java.lang.String)
final case class EncryptionConfiguration(noEncryptionConfig: scala.Option[java.lang.String] = scala.None, kmsencryptionConfig: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.KMSEncryptionConfig] = scala.None)
final case class DestinationDescription(destinationId: java.lang.String, s3DestinationDescription: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationDescription] = scala.None, splunkDestinationDescription: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.SplunkDestinationDescription] = scala.None, redshiftDestinationDescription: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.RedshiftDestinationDescription] = scala.None, extendedS3DestinationDescription: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ExtendedS3DestinationDescription] = scala.None, elasticsearchDestinationDescription: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ElasticsearchDestinationDescription] = scala.None)
final case class ResourceNotFoundException(message: scala.Option[java.lang.String] = scala.None)
final case class CopyCommand(dataTableName: java.lang.String, dataTableColumns: scala.Option[java.lang.String] = scala.None, copyOptions: scala.Option[java.lang.String] = scala.None)
final case class ElasticsearchDestinationDescription(cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, s3DestinationDescription: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationDescription] = scala.None, bufferingHints: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ElasticsearchBufferingHints] = scala.None, domainARN: scala.Option[java.lang.String] = scala.None, typeName: scala.Option[java.lang.String] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, s3BackupMode: scala.Option[java.lang.String] = scala.None, roleARN: scala.Option[java.lang.String] = scala.None, indexName: scala.Option[java.lang.String] = scala.None, indexRotationPeriod: scala.Option[java.lang.String] = scala.None, retryOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ElasticsearchRetryOptions] = scala.None)
final case class KinesisStreamSourceDescription(kinesisStreamARN: scala.Option[java.lang.String] = scala.None, roleARN: scala.Option[java.lang.String] = scala.None, deliveryStartTimestamp: scala.Option[java.time.Instant] = scala.None)
final case class Processor(`type`: java.lang.String, parameters: scala.Option[scala.List[org.lyranthe.araethura.kinesisfirehose.models.ProcessorParameter]] = scala.None)
final case class ProcessingConfiguration(enabled: scala.Option[scala.Boolean] = scala.None, processors: scala.Option[scala.List[org.lyranthe.araethura.kinesisfirehose.models.Processor]] = scala.None)
final case class PutRecordBatchInput(deliveryStreamName: java.lang.String, records: scala.List[org.lyranthe.araethura.kinesisfirehose.models.Record])
final case class RedshiftDestinationConfiguration(username: java.lang.String, s3Configuration: org.lyranthe.araethura.kinesisfirehose.models.S3DestinationConfiguration, copyCommand: org.lyranthe.araethura.kinesisfirehose.models.CopyCommand, password: java.lang.String, roleARN: java.lang.String, clusterJDBCURL: java.lang.String, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, s3BackupConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationConfiguration] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, s3BackupMode: scala.Option[java.lang.String] = scala.None, retryOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.RedshiftRetryOptions] = scala.None)
final case class ListDeliveryStreamsInput(limit: scala.Option[scala.Int] = scala.None, deliveryStreamType: scala.Option[java.lang.String] = scala.None, exclusiveStartDeliveryStreamName: scala.Option[java.lang.String] = scala.None)
final case class ElasticsearchDestinationUpdate(s3Update: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationUpdate] = scala.None, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, bufferingHints: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ElasticsearchBufferingHints] = scala.None, domainARN: scala.Option[java.lang.String] = scala.None, typeName: scala.Option[java.lang.String] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, roleARN: scala.Option[java.lang.String] = scala.None, indexName: scala.Option[java.lang.String] = scala.None, indexRotationPeriod: scala.Option[java.lang.String] = scala.None, retryOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ElasticsearchRetryOptions] = scala.None)
final case class PutRecordBatchResponseEntry(recordId: scala.Option[java.lang.String] = scala.None, errorCode: scala.Option[java.lang.String] = scala.None, errorMessage: scala.Option[java.lang.String] = scala.None)
final case class SplunkDestinationUpdate(hecendpointType: scala.Option[java.lang.String] = scala.None, s3Update: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationUpdate] = scala.None, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, retryOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.SplunkRetryOptions] = scala.None, hecendpoint: scala.Option[java.lang.String] = scala.None, hectoken: scala.Option[java.lang.String] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, hecacknowledgmentTimeoutInSeconds: scala.Option[scala.Int] = scala.None, s3BackupMode: scala.Option[java.lang.String] = scala.None)
final case class KinesisStreamSourceConfiguration(kinesisStreamARN: java.lang.String, roleARN: java.lang.String)
final case class ExtendedS3DestinationUpdate(s3BackupUpdate: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.S3DestinationUpdate] = scala.None, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, encryptionConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.EncryptionConfiguration] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, bucketARN: scala.Option[java.lang.String] = scala.None, roleARN: scala.Option[java.lang.String] = scala.None, compressionFormat: scala.Option[java.lang.String] = scala.None, s3BackupMode: scala.Option[java.lang.String] = scala.None, bufferingHints: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.BufferingHints] = scala.None, prefix: scala.Option[java.lang.String] = scala.None)
final case class ElasticsearchDestinationConfiguration(s3Configuration: org.lyranthe.araethura.kinesisfirehose.models.S3DestinationConfiguration, domainARN: java.lang.String, typeName: java.lang.String, roleARN: java.lang.String, indexName: java.lang.String, cloudWatchLoggingOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.CloudWatchLoggingOptions] = scala.None, bufferingHints: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ElasticsearchBufferingHints] = scala.None, processingConfiguration: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ProcessingConfiguration] = scala.None, s3BackupMode: scala.Option[java.lang.String] = scala.None, indexRotationPeriod: scala.Option[java.lang.String] = scala.None, retryOptions: scala.Option[org.lyranthe.araethura.kinesisfirehose.models.ElasticsearchRetryOptions] = scala.None)
final case class ListDeliveryStreamsOutput(deliveryStreamNames: scala.List[java.lang.String], hasMoreDeliveryStreams: scala.Boolean)
final case class Record(data: scala.Array[scala.Byte])
case object UpdateDestinationOutput
final case class ServiceUnavailableException(message: scala.Option[java.lang.String] = scala.None)
final case class InvalidArgumentException(message: scala.Option[java.lang.String] = scala.None)
final case class RedshiftRetryOptions(durationInSeconds: scala.Option[scala.Int] = scala.None)
final case class BufferingHints(sizeInMBs: scala.Option[scala.Int] = scala.None, intervalInSeconds: scala.Option[scala.Int] = scala.None)
final case class ElasticsearchRetryOptions(durationInSeconds: scala.Option[scala.Int] = scala.None)