package org.lyranthe.araethura.servicecatalog
trait Amazonservicecatalog[F[_]] {
  def scanProvisionedProducts(input: models.ScanProvisionedProductsInput): F[models.ScanProvisionedProductsOutput]
  def describePortfolio(input: models.DescribePortfolioInput): F[models.DescribePortfolioOutput]
  def disassociateTagOptionFromResource(input: models.DisassociateTagOptionFromResourceInput): F[scala.Unit]
  def acceptPortfolioShare(input: models.AcceptPortfolioShareInput): F[scala.Unit]
  def describeCopyProductStatus(input: models.DescribeCopyProductStatusInput): F[models.DescribeCopyProductStatusOutput]
  def listLaunchPaths(input: models.ListLaunchPathsInput): F[models.ListLaunchPathsOutput]
  def describeProduct(input: models.DescribeProductInput): F[models.DescribeProductOutput]
  def rejectPortfolioShare(input: models.RejectPortfolioShareInput): F[scala.Unit]
  def describeProvisionedProduct(input: models.DescribeProvisionedProductInput): F[models.DescribeProvisionedProductOutput]
  def provisionProduct(input: models.ProvisionProductInput): F[models.ProvisionProductOutput]
  def associateTagOptionWithResource(input: models.AssociateTagOptionWithResourceInput): F[scala.Unit]
  def describeTagOption(input: models.DescribeTagOptionInput): F[models.DescribeTagOptionOutput]
  def createPortfolioShare(input: models.CreatePortfolioShareInput): F[scala.Unit]
  def searchProducts(input: models.SearchProductsInput): F[models.SearchProductsOutput]
  def updateConstraint(input: models.UpdateConstraintInput): F[models.UpdateConstraintOutput]
  def listPortfolios(input: models.ListPortfoliosInput): F[models.ListPortfoliosOutput]
  def deletePortfolio(input: models.DeletePortfolioInput): F[scala.Unit]
  def disassociatePrincipalFromPortfolio(input: models.DisassociatePrincipalFromPortfolioInput): F[scala.Unit]
  def listResourcesForTagOption(input: models.ListResourcesForTagOptionInput): F[models.ListResourcesForTagOptionOutput]
  def searchProductsAsAdmin(input: models.SearchProductsAsAdminInput): F[models.SearchProductsAsAdminOutput]
  def describeProductAsAdmin(input: models.DescribeProductAsAdminInput): F[models.DescribeProductAsAdminOutput]
  def listAcceptedPortfolioShares(input: models.ListAcceptedPortfolioSharesInput): F[models.ListAcceptedPortfolioSharesOutput]
  def listTagOptions(input: models.ListTagOptionsInput): F[models.ListTagOptionsOutput]
  def deleteConstraint(input: models.DeleteConstraintInput): F[scala.Unit]
  def disassociateProductFromPortfolio(input: models.DisassociateProductFromPortfolioInput): F[scala.Unit]
  def associateProductWithPortfolio(input: models.AssociateProductWithPortfolioInput): F[scala.Unit]
  def deleteProvisioningArtifact(input: models.DeleteProvisioningArtifactInput): F[scala.Unit]
  def copyProduct(input: models.CopyProductInput): F[models.CopyProductOutput]
  def describeConstraint(input: models.DescribeConstraintInput): F[models.DescribeConstraintOutput]
  def associatePrincipalWithPortfolio(input: models.AssociatePrincipalWithPortfolioInput): F[scala.Unit]
  def createTagOption(input: models.CreateTagOptionInput): F[models.CreateTagOptionOutput]
  def createProvisioningArtifact(input: models.CreateProvisioningArtifactInput): F[models.CreateProvisioningArtifactOutput]
  def describeProvisioningArtifact(input: models.DescribeProvisioningArtifactInput): F[models.DescribeProvisioningArtifactOutput]
  def updatePortfolio(input: models.UpdatePortfolioInput): F[models.UpdatePortfolioOutput]
  def updateProvisioningArtifact(input: models.UpdateProvisioningArtifactInput): F[models.UpdateProvisioningArtifactOutput]
  def deleteProduct(input: models.DeleteProductInput): F[scala.Unit]
  def listPrincipalsForPortfolio(input: models.ListPrincipalsForPortfolioInput): F[models.ListPrincipalsForPortfolioOutput]
  def updateTagOption(input: models.UpdateTagOptionInput): F[models.UpdateTagOptionOutput]
  def createConstraint(input: models.CreateConstraintInput): F[models.CreateConstraintOutput]
  def createPortfolio(input: models.CreatePortfolioInput): F[models.CreatePortfolioOutput]
  def listPortfoliosForProduct(input: models.ListPortfoliosForProductInput): F[models.ListPortfoliosForProductOutput]
  def listPortfolioAccess(input: models.ListPortfolioAccessInput): F[models.ListPortfolioAccessOutput]
  def listConstraintsForPortfolio(input: models.ListConstraintsForPortfolioInput): F[models.ListConstraintsForPortfolioOutput]
  def describeProvisioningParameters(input: models.DescribeProvisioningParametersInput): F[models.DescribeProvisioningParametersOutput]
  def listRecordHistory(input: models.ListRecordHistoryInput): F[models.ListRecordHistoryOutput]
  def describeProductView(input: models.DescribeProductViewInput): F[models.DescribeProductViewOutput]
  def describeRecord(input: models.DescribeRecordInput): F[models.DescribeRecordOutput]
  def deletePortfolioShare(input: models.DeletePortfolioShareInput): F[scala.Unit]
  def updateProvisionedProduct(input: models.UpdateProvisionedProductInput): F[models.UpdateProvisionedProductOutput]
  def createProduct(input: models.CreateProductInput): F[models.CreateProductOutput]
  def terminateProvisionedProduct(input: models.TerminateProvisionedProductInput): F[models.TerminateProvisionedProductOutput]
  def updateProduct(input: models.UpdateProductInput): F[models.UpdateProductOutput]
  def listProvisioningArtifacts(input: models.ListProvisioningArtifactsInput): F[models.ListProvisioningArtifactsOutput]
}