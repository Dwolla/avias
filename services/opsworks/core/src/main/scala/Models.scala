package org.lyranthe.araethura.opsworks.models
import org.lyranthe.araethura.opsworks.models
final case class DeleteInstanceRequest(instanceId: java.lang.String, deleteElasticIp: scala.Option[scala.Boolean] = None, deleteVolumes: scala.Option[scala.Boolean] = None)
final case class InstanceIdentity(document: scala.Option[java.lang.String] = None, signature: scala.Option[java.lang.String] = None)
final case class DetachElasticLoadBalancerRequest(elasticLoadBalancerName: java.lang.String, layerId: java.lang.String)
final case class ShutdownEventConfiguration(executionTimeout: scala.Option[scala.Int] = None, delayUntilElbConnectionsDrained: scala.Option[scala.Boolean] = None)
final case class DeregisterVolumeRequest(volumeId: java.lang.String)
final case class CloneStackRequest(serviceRoleArn: java.lang.String, sourceStackId: java.lang.String, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, defaultOs: scala.Option[java.lang.String] = None, vpcId: scala.Option[java.lang.String] = None, defaultInstanceProfileArn: scala.Option[java.lang.String] = None, hostnameTheme: scala.Option[java.lang.String] = None, defaultSshKeyName: scala.Option[java.lang.String] = None, agentVersion: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, customJson: scala.Option[java.lang.String] = None, defaultSubnetId: scala.Option[java.lang.String] = None, region: scala.Option[java.lang.String] = None, defaultAvailabilityZone: scala.Option[java.lang.String] = None, customCookbooksSource: scala.Option[models.Source] = None, chefConfiguration: scala.Option[models.ChefConfiguration] = None, configurationManager: scala.Option[models.StackConfigurationManager] = None, useCustomCookbooks: scala.Option[scala.Boolean] = None, useOpsworksSecurityGroups: scala.Option[scala.Boolean] = None, clonePermissions: scala.Option[scala.Boolean] = None, defaultRootDeviceType: scala.Option[java.lang.String] = None, cloneAppIds: scala.Option[scala.List[java.lang.String]] = None)
final case class DeregisterEcsClusterRequest(ecsClusterArn: java.lang.String)
final case class RegisterInstanceResult(instanceId: scala.Option[java.lang.String] = None)
final case class UpdateRdsDbInstanceRequest(rdsDbInstanceArn: java.lang.String, dbUser: scala.Option[java.lang.String] = None, dbPassword: scala.Option[java.lang.String] = None)
final case class VolumeConfiguration(mountPoint: java.lang.String, numberOfDisks: scala.Int, size: scala.Int, volumeType: scala.Option[java.lang.String] = None, raidLevel: scala.Option[scala.Int] = None, iops: scala.Option[scala.Int] = None)
final case class DescribeTimeBasedAutoScalingRequest(instanceIds: scala.List[java.lang.String])
final case class RegisterElasticIpResult(elasticIp: scala.Option[java.lang.String] = None)
final case class RegisterInstanceRequest(stackId: java.lang.String, rsaPublicKeyFingerprint: scala.Option[java.lang.String] = None, privateIp: scala.Option[java.lang.String] = None, rsaPublicKey: scala.Option[java.lang.String] = None, hostname: scala.Option[java.lang.String] = None, publicIp: scala.Option[java.lang.String] = None, instanceIdentity: scala.Option[models.InstanceIdentity] = None)
final case class UnassignVolumeRequest(volumeId: java.lang.String)
final case class SelfUserProfile(iamUserArn: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, sshUsername: scala.Option[java.lang.String] = None, sshPublicKey: scala.Option[java.lang.String] = None)
final case class Layer(shortname: scala.Option[java.lang.String] = None, customInstanceProfileArn: scala.Option[java.lang.String] = None, arn: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, customJson: scala.Option[java.lang.String] = None, layerId: scala.Option[java.lang.String] = None, cloudWatchLogsConfiguration: scala.Option[models.CloudWatchLogsConfiguration] = None, `type`: scala.Option[java.lang.String] = None, defaultRecipes: scala.Option[models.Recipes] = None, customRecipes: scala.Option[models.Recipes] = None, volumeConfigurations: scala.Option[scala.List[models.VolumeConfiguration]] = None, createdAt: scala.Option[java.lang.String] = None, useEbsOptimizedInstances: scala.Option[scala.Boolean] = None, installUpdatesOnBoot: scala.Option[scala.Boolean] = None, enableAutoHealing: scala.Option[scala.Boolean] = None, autoAssignElasticIps: scala.Option[scala.Boolean] = None, autoAssignPublicIps: scala.Option[scala.Boolean] = None, lifecycleEventConfiguration: scala.Option[models.LifecycleEventConfiguration] = None, customSecurityGroupIds: scala.Option[scala.List[java.lang.String]] = None, defaultSecurityGroupNames: scala.Option[scala.List[java.lang.String]] = None, packages: scala.Option[scala.List[java.lang.String]] = None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class DescribeServiceErrorsResult(serviceErrors: scala.Option[scala.List[models.ServiceError]] = None)
final case class DescribeStackProvisioningParametersRequest(stackId: java.lang.String)
final case class SslConfiguration(certificate: java.lang.String, privateKey: java.lang.String, chain: scala.Option[java.lang.String] = None)
final case class App(dataSources: scala.Option[scala.List[models.DataSource]] = None, shortname: scala.Option[java.lang.String] = None, appId: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, createdAt: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, sslConfiguration: scala.Option[models.SslConfiguration] = None, `type`: scala.Option[java.lang.String] = None, appSource: scala.Option[models.Source] = None, enableSsl: scala.Option[scala.Boolean] = None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, domains: scala.Option[scala.List[java.lang.String]] = None, environment: scala.Option[scala.List[models.EnvironmentVariable]] = None)
final case class DescribeRaidArraysRequest(instanceId: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, raidArrayIds: scala.Option[scala.List[java.lang.String]] = None)
final case class DescribeRdsDbInstancesResult(rdsDbInstances: scala.Option[scala.List[models.RdsDbInstance]] = None)
final case class AssignVolumeRequest(volumeId: java.lang.String, instanceId: scala.Option[java.lang.String] = None)
final case class RebootInstanceRequest(instanceId: java.lang.String)
final case class DescribeStacksRequest(stackIds: scala.Option[scala.List[java.lang.String]] = None)
final case class DeregisterElasticIpRequest(elasticIp: java.lang.String)
final case class AutoScalingThresholds(instanceCount: scala.Option[scala.Int] = None, thresholdsWaitTime: scala.Option[scala.Int] = None, ignoreMetricsTime: scala.Option[scala.Int] = None, cpuThreshold: scala.Option[scala.Double] = None, memoryThreshold: scala.Option[scala.Double] = None, loadThreshold: scala.Option[scala.Double] = None, alarms: scala.Option[scala.List[java.lang.String]] = None)
final case class GrantAccessRequest(instanceId: java.lang.String, validForInMinutes: scala.Option[scala.Int] = None)
final case class EcsCluster(ecsClusterArn: scala.Option[java.lang.String] = None, ecsClusterName: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, registeredAt: scala.Option[java.lang.String] = None)
final case class DescribeEcsClustersResult(ecsClusters: scala.Option[scala.List[models.EcsCluster]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class Source(`type`: scala.Option[java.lang.String] = None, revision: scala.Option[java.lang.String] = None, username: scala.Option[java.lang.String] = None, password: scala.Option[java.lang.String] = None, url: scala.Option[java.lang.String] = None, sshKey: scala.Option[java.lang.String] = None)
final case class DescribeRdsDbInstancesRequest(stackId: java.lang.String, rdsDbInstanceArns: scala.Option[scala.List[java.lang.String]] = None)
final case class CreateUserProfileResult(iamUserArn: scala.Option[java.lang.String] = None)
final case class Instance(blockDeviceMappings: scala.Option[scala.List[models.BlockDeviceMapping]] = None, privateIp: scala.Option[java.lang.String] = None, subnetId: scala.Option[java.lang.String] = None, sshHostRsaKeyFingerprint: scala.Option[java.lang.String] = None, reportedAgentVersion: scala.Option[java.lang.String] = None, amiId: scala.Option[java.lang.String] = None, sshHostDsaKeyFingerprint: scala.Option[java.lang.String] = None, arn: scala.Option[java.lang.String] = None, tenancy: scala.Option[java.lang.String] = None, ec2InstanceId: scala.Option[java.lang.String] = None, instanceType: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, instanceProfileArn: scala.Option[java.lang.String] = None, rootDeviceVolumeId: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, agentVersion: scala.Option[java.lang.String] = None, availabilityZone: scala.Option[java.lang.String] = None, hostname: scala.Option[java.lang.String] = None, publicDns: scala.Option[java.lang.String] = None, platform: scala.Option[java.lang.String] = None, os: scala.Option[java.lang.String] = None, ecsClusterArn: scala.Option[java.lang.String] = None, sshKeyName: scala.Option[java.lang.String] = None, infrastructureClass: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None, ecsContainerInstanceArn: scala.Option[java.lang.String] = None, lastServiceErrorId: scala.Option[java.lang.String] = None, publicIp: scala.Option[java.lang.String] = None, privateDns: scala.Option[java.lang.String] = None, registeredBy: scala.Option[java.lang.String] = None, elasticIp: scala.Option[java.lang.String] = None, virtualizationType: scala.Option[java.lang.String] = None, reportedOs: scala.Option[models.ReportedOs] = None, createdAt: scala.Option[java.lang.String] = None, ebsOptimized: scala.Option[scala.Boolean] = None, installUpdatesOnBoot: scala.Option[scala.Boolean] = None, rootDeviceType: scala.Option[java.lang.String] = None, autoScalingType: scala.Option[java.lang.String] = None, layerIds: scala.Option[scala.List[java.lang.String]] = None, securityGroupIds: scala.Option[scala.List[java.lang.String]] = None, architecture: scala.Option[java.lang.String] = None)
final case class RegisterVolumeResult(volumeId: scala.Option[java.lang.String] = None)
final case class DataSource(`type`: scala.Option[java.lang.String] = None, arn: scala.Option[java.lang.String] = None, databaseName: scala.Option[java.lang.String] = None)
final case class DescribeInstancesResult(instances: scala.Option[scala.List[models.Instance]] = None)
final case class ListTagsRequest(resourceArn: java.lang.String, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeAppsRequest(stackId: scala.Option[java.lang.String] = None, appIds: scala.Option[scala.List[java.lang.String]] = None)
final case class CreateDeploymentRequest(stackId: java.lang.String, command: models.DeploymentCommand, appId: scala.Option[java.lang.String] = None, comment: scala.Option[java.lang.String] = None, customJson: scala.Option[java.lang.String] = None, instanceIds: scala.Option[scala.List[java.lang.String]] = None, layerIds: scala.Option[scala.List[java.lang.String]] = None)
final case class DescribeUserProfilesRequest(iamUserArns: scala.Option[scala.List[java.lang.String]] = None)
final case class CreateDeploymentResult(deploymentId: scala.Option[java.lang.String] = None)
final case class TagResourceRequest(resourceArn: java.lang.String, tags: scala.collection.immutable.Map[java.lang.String, java.lang.String])
final case class DeleteAppRequest(appId: java.lang.String)
final case class UpdateVolumeRequest(volumeId: java.lang.String, name: scala.Option[java.lang.String] = None, mountPoint: scala.Option[java.lang.String] = None)
final case class SetLoadBasedAutoScalingRequest(layerId: java.lang.String, enable: scala.Option[scala.Boolean] = None, upScaling: scala.Option[models.AutoScalingThresholds] = None, downScaling: scala.Option[models.AutoScalingThresholds] = None)
final case class DescribeElasticLoadBalancersResult(elasticLoadBalancers: scala.Option[scala.List[models.ElasticLoadBalancer]] = None)
final case class DescribeDeploymentsResult(deployments: scala.Option[scala.List[models.Deployment]] = None)
final case class DescribeStackSummaryResult(stackSummary: scala.Option[models.StackSummary] = None)
final case class DeregisterRdsDbInstanceRequest(rdsDbInstanceArn: java.lang.String)
final case class DescribeAgentVersionsResult(agentVersions: scala.Option[scala.List[models.AgentVersion]] = None)
final case class InstancesCount(shuttingDown: scala.Option[scala.Int] = None, stopping: scala.Option[scala.Int] = None, unassigning: scala.Option[scala.Int] = None, terminating: scala.Option[scala.Int] = None, startFailed: scala.Option[scala.Int] = None, deregistering: scala.Option[scala.Int] = None, registering: scala.Option[scala.Int] = None, assigning: scala.Option[scala.Int] = None, rebooting: scala.Option[scala.Int] = None, registered: scala.Option[scala.Int] = None, connectionLost: scala.Option[scala.Int] = None, booting: scala.Option[scala.Int] = None, terminated: scala.Option[scala.Int] = None, stopped: scala.Option[scala.Int] = None, runningSetup: scala.Option[scala.Int] = None, pending: scala.Option[scala.Int] = None, online: scala.Option[scala.Int] = None, requested: scala.Option[scala.Int] = None, setupFailed: scala.Option[scala.Int] = None)
final case class ServiceError(message: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, `type`: scala.Option[java.lang.String] = None, serviceErrorId: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None, createdAt: scala.Option[java.lang.String] = None)
final case class RegisterElasticIpRequest(elasticIp: java.lang.String, stackId: java.lang.String)
final case class AssociateElasticIpRequest(elasticIp: java.lang.String, instanceId: scala.Option[java.lang.String] = None)
final case class ReportedOs(family: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, version: scala.Option[java.lang.String] = None)
final case class RegisterRdsDbInstanceRequest(stackId: java.lang.String, rdsDbInstanceArn: java.lang.String, dbUser: java.lang.String, dbPassword: java.lang.String)
final case class ListTagsResult(tags: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class SetPermissionRequest(stackId: java.lang.String, iamUserArn: java.lang.String, level: scala.Option[java.lang.String] = None, allowSsh: scala.Option[scala.Boolean] = None, allowSudo: scala.Option[scala.Boolean] = None)
final case class CloudWatchLogsConfiguration(enabled: scala.Option[scala.Boolean] = None, logStreams: scala.Option[scala.List[models.CloudWatchLogsLogStream]] = None)
final case class StopInstanceRequest(instanceId: java.lang.String)
final case class DeleteLayerRequest(layerId: java.lang.String)
final case class DescribeLayersRequest(stackId: scala.Option[java.lang.String] = None, layerIds: scala.Option[scala.List[java.lang.String]] = None)
final case class Deployment(status: scala.Option[java.lang.String] = None, appId: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, customJson: scala.Option[java.lang.String] = None, comment: scala.Option[java.lang.String] = None, iamUserArn: scala.Option[java.lang.String] = None, deploymentId: scala.Option[java.lang.String] = None, command: scala.Option[models.DeploymentCommand] = None, duration: scala.Option[scala.Int] = None, createdAt: scala.Option[java.lang.String] = None, completedAt: scala.Option[java.lang.String] = None, instanceIds: scala.Option[scala.List[java.lang.String]] = None)
final case class ChefConfiguration(manageBerkshelf: scala.Option[scala.Boolean] = None, berkshelfVersion: scala.Option[java.lang.String] = None)
final case class DescribeAgentVersionsRequest(stackId: scala.Option[java.lang.String] = None, configurationManager: scala.Option[models.StackConfigurationManager] = None)
final case class ValidationException(message: scala.Option[java.lang.String] = None)
final case class DescribeLayersResult(layers: scala.Option[scala.List[models.Layer]] = None)
final case class SetTimeBasedAutoScalingRequest(instanceId: java.lang.String, autoScalingSchedule: scala.Option[models.WeeklyAutoScalingSchedule] = None)
final case class StopStackRequest(stackId: java.lang.String)
final case class EbsBlockDevice(snapshotId: scala.Option[java.lang.String] = None, iops: scala.Option[scala.Int] = None, volumeSize: scala.Option[scala.Int] = None, volumeType: scala.Option[java.lang.String] = None, deleteOnTermination: scala.Option[scala.Boolean] = None)
final case class StackConfigurationManager(name: scala.Option[java.lang.String] = None, version: scala.Option[java.lang.String] = None)
final case class CreateAppRequest(stackId: java.lang.String, name: java.lang.String, `type`: java.lang.String, dataSources: scala.Option[scala.List[models.DataSource]] = None, shortname: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, sslConfiguration: scala.Option[models.SslConfiguration] = None, appSource: scala.Option[models.Source] = None, enableSsl: scala.Option[scala.Boolean] = None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, domains: scala.Option[scala.List[java.lang.String]] = None, environment: scala.Option[scala.List[models.EnvironmentVariable]] = None)
final case class TemporaryCredential(username: scala.Option[java.lang.String] = None, password: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None, validForInMinutes: scala.Option[scala.Int] = None)
final case class UntagResourceRequest(resourceArn: java.lang.String, tagKeys: scala.List[java.lang.String])
final case class UpdateInstanceRequest(instanceId: java.lang.String, amiId: scala.Option[java.lang.String] = None, instanceType: scala.Option[java.lang.String] = None, agentVersion: scala.Option[java.lang.String] = None, hostname: scala.Option[java.lang.String] = None, os: scala.Option[java.lang.String] = None, sshKeyName: scala.Option[java.lang.String] = None, installUpdatesOnBoot: scala.Option[scala.Boolean] = None, ebsOptimized: scala.Option[scala.Boolean] = None, autoScalingType: scala.Option[java.lang.String] = None, layerIds: scala.Option[scala.List[java.lang.String]] = None, architecture: scala.Option[java.lang.String] = None)
final case class AgentVersion(version: scala.Option[java.lang.String] = None, configurationManager: scala.Option[models.StackConfigurationManager] = None)
final case class DescribeVolumesRequest(instanceId: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, raidArrayId: scala.Option[java.lang.String] = None, volumeIds: scala.Option[scala.List[java.lang.String]] = None)
final case class DescribeLoadBasedAutoScalingRequest(layerIds: scala.List[java.lang.String])
final case class ElasticLoadBalancer(vpcId: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, dnsName: scala.Option[java.lang.String] = None, layerId: scala.Option[java.lang.String] = None, region: scala.Option[java.lang.String] = None, elasticLoadBalancerName: scala.Option[java.lang.String] = None, availabilityZones: scala.Option[scala.List[java.lang.String]] = None, subnetIds: scala.Option[scala.List[java.lang.String]] = None, ec2InstanceIds: scala.Option[scala.List[java.lang.String]] = None)
final case class BlockDeviceMapping(deviceName: scala.Option[java.lang.String] = None, noDevice: scala.Option[java.lang.String] = None, virtualName: scala.Option[java.lang.String] = None, ebs: scala.Option[models.EbsBlockDevice] = None)
final case class UpdateMyUserProfileRequest(sshPublicKey: scala.Option[java.lang.String] = None)
final case class RaidArray(device: scala.Option[java.lang.String] = None, raidArrayId: scala.Option[java.lang.String] = None, mountPoint: scala.Option[java.lang.String] = None, volumeType: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, availabilityZone: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None, raidLevel: scala.Option[scala.Int] = None, numberOfDisks: scala.Option[scala.Int] = None, size: scala.Option[scala.Int] = None, iops: scala.Option[scala.Int] = None, createdAt: scala.Option[java.lang.String] = None)
final case class RdsDbInstance(dbPassword: scala.Option[java.lang.String] = None, dbUser: scala.Option[java.lang.String] = None, engine: scala.Option[java.lang.String] = None, dbInstanceIdentifier: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, region: scala.Option[java.lang.String] = None, address: scala.Option[java.lang.String] = None, rdsDbInstanceArn: scala.Option[java.lang.String] = None, missingOnRds: scala.Option[scala.Boolean] = None)
final case class DescribeElasticIpsRequest(instanceId: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, ips: scala.Option[scala.List[java.lang.String]] = None)
final case class Permission(stackId: scala.Option[java.lang.String] = None, iamUserArn: scala.Option[java.lang.String] = None, level: scala.Option[java.lang.String] = None, allowSsh: scala.Option[scala.Boolean] = None, allowSudo: scala.Option[scala.Boolean] = None)
final case class DescribeDeploymentsRequest(stackId: scala.Option[java.lang.String] = None, appId: scala.Option[java.lang.String] = None, deploymentIds: scala.Option[scala.List[java.lang.String]] = None)
final case class Command(logUrl: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, `type`: scala.Option[java.lang.String] = None, commandId: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None, deploymentId: scala.Option[java.lang.String] = None, createdAt: scala.Option[java.lang.String] = None, acknowledgedAt: scala.Option[java.lang.String] = None, completedAt: scala.Option[java.lang.String] = None, exitCode: scala.Option[scala.Int] = None)
final case class RegisterEcsClusterRequest(ecsClusterArn: java.lang.String, stackId: java.lang.String)
final case class CreateStackRequest(name: java.lang.String, defaultInstanceProfileArn: java.lang.String, serviceRoleArn: java.lang.String, region: java.lang.String, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, defaultOs: scala.Option[java.lang.String] = None, vpcId: scala.Option[java.lang.String] = None, hostnameTheme: scala.Option[java.lang.String] = None, defaultSshKeyName: scala.Option[java.lang.String] = None, agentVersion: scala.Option[java.lang.String] = None, customJson: scala.Option[java.lang.String] = None, defaultSubnetId: scala.Option[java.lang.String] = None, defaultAvailabilityZone: scala.Option[java.lang.String] = None, customCookbooksSource: scala.Option[models.Source] = None, chefConfiguration: scala.Option[models.ChefConfiguration] = None, configurationManager: scala.Option[models.StackConfigurationManager] = None, useCustomCookbooks: scala.Option[scala.Boolean] = None, useOpsworksSecurityGroups: scala.Option[scala.Boolean] = None, defaultRootDeviceType: scala.Option[java.lang.String] = None)
final case class Recipes(undeploy: scala.Option[scala.List[java.lang.String]] = None, deploy: scala.Option[scala.List[java.lang.String]] = None, configure: scala.Option[scala.List[java.lang.String]] = None, setup: scala.Option[scala.List[java.lang.String]] = None, shutdown: scala.Option[scala.List[java.lang.String]] = None)
final case class DescribeUserProfilesResult(userProfiles: scala.Option[scala.List[models.UserProfile]] = None)
final case class GrantAccessResult(temporaryCredential: scala.Option[models.TemporaryCredential] = None)
final case class UpdateElasticIpRequest(elasticIp: java.lang.String, name: scala.Option[java.lang.String] = None)
final case class DescribeVolumesResult(volumes: scala.Option[scala.List[models.Volume]] = None)
final case class Volume(device: scala.Option[java.lang.String] = None, raidArrayId: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, ec2VolumeId: scala.Option[java.lang.String] = None, mountPoint: scala.Option[java.lang.String] = None, volumeType: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, availabilityZone: scala.Option[java.lang.String] = None, region: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None, volumeId: scala.Option[java.lang.String] = None, size: scala.Option[scala.Int] = None, iops: scala.Option[scala.Int] = None)
final case class EnvironmentVariable(key: java.lang.String, value: java.lang.String, secure: scala.Option[scala.Boolean] = None)
final case class Stack(attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, defaultOs: scala.Option[java.lang.String] = None, vpcId: scala.Option[java.lang.String] = None, defaultInstanceProfileArn: scala.Option[java.lang.String] = None, arn: scala.Option[java.lang.String] = None, hostnameTheme: scala.Option[java.lang.String] = None, serviceRoleArn: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None, defaultSshKeyName: scala.Option[java.lang.String] = None, agentVersion: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, customJson: scala.Option[java.lang.String] = None, defaultSubnetId: scala.Option[java.lang.String] = None, region: scala.Option[java.lang.String] = None, defaultAvailabilityZone: scala.Option[java.lang.String] = None, customCookbooksSource: scala.Option[models.Source] = None, chefConfiguration: scala.Option[models.ChefConfiguration] = None, configurationManager: scala.Option[models.StackConfigurationManager] = None, createdAt: scala.Option[java.lang.String] = None, useCustomCookbooks: scala.Option[scala.Boolean] = None, useOpsworksSecurityGroups: scala.Option[scala.Boolean] = None, defaultRootDeviceType: scala.Option[java.lang.String] = None)
final case class CreateLayerRequest(name: java.lang.String, stackId: java.lang.String, shortname: java.lang.String, `type`: java.lang.String, customInstanceProfileArn: scala.Option[java.lang.String] = None, customJson: scala.Option[java.lang.String] = None, cloudWatchLogsConfiguration: scala.Option[models.CloudWatchLogsConfiguration] = None, customRecipes: scala.Option[models.Recipes] = None, volumeConfigurations: scala.Option[scala.List[models.VolumeConfiguration]] = None, useEbsOptimizedInstances: scala.Option[scala.Boolean] = None, installUpdatesOnBoot: scala.Option[scala.Boolean] = None, enableAutoHealing: scala.Option[scala.Boolean] = None, autoAssignElasticIps: scala.Option[scala.Boolean] = None, autoAssignPublicIps: scala.Option[scala.Boolean] = None, lifecycleEventConfiguration: scala.Option[models.LifecycleEventConfiguration] = None, customSecurityGroupIds: scala.Option[scala.List[java.lang.String]] = None, packages: scala.Option[scala.List[java.lang.String]] = None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class AssignInstanceRequest(instanceId: java.lang.String, layerIds: scala.List[java.lang.String])
final case class StackSummary(stackId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, arn: scala.Option[java.lang.String] = None, layersCount: scala.Option[scala.Int] = None, appsCount: scala.Option[scala.Int] = None, instancesCount: scala.Option[models.InstancesCount] = None)
final case class DescribeElasticLoadBalancersRequest(stackId: scala.Option[java.lang.String] = None, layerIds: scala.Option[scala.List[java.lang.String]] = None)
final case class UpdateUserProfileRequest(iamUserArn: java.lang.String, sshUsername: scala.Option[java.lang.String] = None, sshPublicKey: scala.Option[java.lang.String] = None, allowSelfManagement: scala.Option[scala.Boolean] = None)
final case class StartInstanceRequest(instanceId: java.lang.String)
final case class DeregisterInstanceRequest(instanceId: java.lang.String)
final case class DescribePermissionsResult(permissions: scala.Option[scala.List[models.Permission]] = None)
final case class GetHostnameSuggestionResult(layerId: scala.Option[java.lang.String] = None, hostname: scala.Option[java.lang.String] = None)
final case class ResourceNotFoundException(message: scala.Option[java.lang.String] = None)
final case class DeploymentCommand(name: java.lang.String, args: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None)
final case class CreateLayerResult(layerId: scala.Option[java.lang.String] = None)
final case class DescribeTimeBasedAutoScalingResult(timeBasedAutoScalingConfigurations: scala.Option[scala.List[models.TimeBasedAutoScalingConfiguration]] = None)
final case class DescribeServiceErrorsRequest(stackId: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None, serviceErrorIds: scala.Option[scala.List[java.lang.String]] = None)
final case class CreateUserProfileRequest(iamUserArn: java.lang.String, sshUsername: scala.Option[java.lang.String] = None, sshPublicKey: scala.Option[java.lang.String] = None, allowSelfManagement: scala.Option[scala.Boolean] = None)
final case class StartStackRequest(stackId: java.lang.String)
final case class DescribePermissionsRequest(iamUserArn: scala.Option[java.lang.String] = None, stackId: scala.Option[java.lang.String] = None)
final case class DescribeStackProvisioningParametersResult(agentInstallerUrl: scala.Option[java.lang.String] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class DescribeAppsResult(apps: scala.Option[scala.List[models.App]] = None)
final case class UnassignInstanceRequest(instanceId: java.lang.String)
final case class UserProfile(iamUserArn: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, sshUsername: scala.Option[java.lang.String] = None, sshPublicKey: scala.Option[java.lang.String] = None, allowSelfManagement: scala.Option[scala.Boolean] = None)
final case class TimeBasedAutoScalingConfiguration(instanceId: scala.Option[java.lang.String] = None, autoScalingSchedule: scala.Option[models.WeeklyAutoScalingSchedule] = None)
final case class UpdateStackRequest(stackId: java.lang.String, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, defaultOs: scala.Option[java.lang.String] = None, defaultInstanceProfileArn: scala.Option[java.lang.String] = None, hostnameTheme: scala.Option[java.lang.String] = None, serviceRoleArn: scala.Option[java.lang.String] = None, defaultSshKeyName: scala.Option[java.lang.String] = None, agentVersion: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, customJson: scala.Option[java.lang.String] = None, defaultSubnetId: scala.Option[java.lang.String] = None, defaultAvailabilityZone: scala.Option[java.lang.String] = None, customCookbooksSource: scala.Option[models.Source] = None, chefConfiguration: scala.Option[models.ChefConfiguration] = None, configurationManager: scala.Option[models.StackConfigurationManager] = None, useCustomCookbooks: scala.Option[scala.Boolean] = None, useOpsworksSecurityGroups: scala.Option[scala.Boolean] = None, defaultRootDeviceType: scala.Option[java.lang.String] = None)
final case class UpdateAppRequest(appId: java.lang.String, dataSources: scala.Option[scala.List[models.DataSource]] = None, name: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, sslConfiguration: scala.Option[models.SslConfiguration] = None, `type`: scala.Option[java.lang.String] = None, appSource: scala.Option[models.Source] = None, enableSsl: scala.Option[scala.Boolean] = None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, domains: scala.Option[scala.List[java.lang.String]] = None, environment: scala.Option[scala.List[models.EnvironmentVariable]] = None)
final case class DescribeCommandsRequest(deploymentId: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None, commandIds: scala.Option[scala.List[java.lang.String]] = None)
final case class RegisterEcsClusterResult(ecsClusterArn: scala.Option[java.lang.String] = None)
final case class DisassociateElasticIpRequest(elasticIp: java.lang.String)
final case class RegisterVolumeRequest(stackId: java.lang.String, ec2VolumeId: scala.Option[java.lang.String] = None)
final case class CreateStackResult(stackId: scala.Option[java.lang.String] = None)
final case class DescribeStacksResult(stacks: scala.Option[scala.List[models.Stack]] = None)
final case class CreateInstanceRequest(stackId: java.lang.String, instanceType: java.lang.String, layerIds: scala.List[java.lang.String], blockDeviceMappings: scala.Option[scala.List[models.BlockDeviceMapping]] = None, subnetId: scala.Option[java.lang.String] = None, amiId: scala.Option[java.lang.String] = None, tenancy: scala.Option[java.lang.String] = None, agentVersion: scala.Option[java.lang.String] = None, availabilityZone: scala.Option[java.lang.String] = None, hostname: scala.Option[java.lang.String] = None, os: scala.Option[java.lang.String] = None, sshKeyName: scala.Option[java.lang.String] = None, virtualizationType: scala.Option[java.lang.String] = None, installUpdatesOnBoot: scala.Option[scala.Boolean] = None, ebsOptimized: scala.Option[scala.Boolean] = None, rootDeviceType: scala.Option[java.lang.String] = None, autoScalingType: scala.Option[java.lang.String] = None, architecture: scala.Option[java.lang.String] = None)
final case class DescribeLoadBasedAutoScalingResult(loadBasedAutoScalingConfigurations: scala.Option[scala.List[models.LoadBasedAutoScalingConfiguration]] = None)
final case class CreateInstanceResult(instanceId: scala.Option[java.lang.String] = None)
final case class DescribeMyUserProfileResult(userProfile: scala.Option[models.SelfUserProfile] = None)
final case class DescribeInstancesRequest(stackId: scala.Option[java.lang.String] = None, layerId: scala.Option[java.lang.String] = None, instanceIds: scala.Option[scala.List[java.lang.String]] = None)
final case class DeleteUserProfileRequest(iamUserArn: java.lang.String)
final case class WeeklyAutoScalingSchedule(wednesday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, sunday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, saturday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, tuesday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, monday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, friday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, thursday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class CloudWatchLogsLogStream(datetimeFormat: scala.Option[java.lang.String] = None, fileFingerprintLines: scala.Option[java.lang.String] = None, logGroupName: scala.Option[java.lang.String] = None, multiLineStartPattern: scala.Option[java.lang.String] = None, file: scala.Option[java.lang.String] = None, initialPosition: scala.Option[java.lang.String] = None, encoding: scala.Option[java.lang.String] = None, timeZone: scala.Option[java.lang.String] = None, bufferDuration: scala.Option[scala.Int] = None, batchCount: scala.Option[scala.Int] = None, batchSize: scala.Option[scala.Int] = None)
final case class DescribeElasticIpsResult(elasticIps: scala.Option[scala.List[models.ElasticIp]] = None)
final case class GetHostnameSuggestionRequest(layerId: java.lang.String)
final case class LoadBasedAutoScalingConfiguration(layerId: scala.Option[java.lang.String] = None, enable: scala.Option[scala.Boolean] = None, upScaling: scala.Option[models.AutoScalingThresholds] = None, downScaling: scala.Option[models.AutoScalingThresholds] = None)
final case class DescribeCommandsResult(commands: scala.Option[scala.List[models.Command]] = None)
final case class LifecycleEventConfiguration(shutdown: scala.Option[models.ShutdownEventConfiguration] = None)
final case class DescribeStackSummaryRequest(stackId: java.lang.String)
final case class DeleteStackRequest(stackId: java.lang.String)
final case class AttachElasticLoadBalancerRequest(elasticLoadBalancerName: java.lang.String, layerId: java.lang.String)
final case class DescribeEcsClustersRequest(ecsClusterArns: scala.Option[scala.List[java.lang.String]] = None, stackId: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class UpdateLayerRequest(layerId: java.lang.String, shortname: scala.Option[java.lang.String] = None, customInstanceProfileArn: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, customJson: scala.Option[java.lang.String] = None, cloudWatchLogsConfiguration: scala.Option[models.CloudWatchLogsConfiguration] = None, customRecipes: scala.Option[models.Recipes] = None, volumeConfigurations: scala.Option[scala.List[models.VolumeConfiguration]] = None, useEbsOptimizedInstances: scala.Option[scala.Boolean] = None, installUpdatesOnBoot: scala.Option[scala.Boolean] = None, enableAutoHealing: scala.Option[scala.Boolean] = None, autoAssignElasticIps: scala.Option[scala.Boolean] = None, autoAssignPublicIps: scala.Option[scala.Boolean] = None, lifecycleEventConfiguration: scala.Option[models.LifecycleEventConfiguration] = None, customSecurityGroupIds: scala.Option[scala.List[java.lang.String]] = None, packages: scala.Option[scala.List[java.lang.String]] = None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class CloneStackResult(stackId: scala.Option[java.lang.String] = None)
final case class ElasticIp(domain: scala.Option[java.lang.String] = None, ip: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, region: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None)
final case class CreateAppResult(appId: scala.Option[java.lang.String] = None)
final case class DescribeRaidArraysResult(raidArrays: scala.Option[scala.List[models.RaidArray]] = None)