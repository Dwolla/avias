package avias.opsworks.models
final case class DeleteInstanceRequest(instanceId: java.lang.String, deleteElasticIp: scala.Option[scala.Boolean] = scala.None, deleteVolumes: scala.Option[scala.Boolean] = scala.None)
final case class InstanceIdentity(document: scala.Option[java.lang.String] = scala.None, signature: scala.Option[java.lang.String] = scala.None)
final case class DetachElasticLoadBalancerRequest(elasticLoadBalancerName: java.lang.String, layerId: java.lang.String)
final case class ShutdownEventConfiguration(executionTimeout: scala.Option[scala.Int] = scala.None, delayUntilElbConnectionsDrained: scala.Option[scala.Boolean] = scala.None)
final case class DeregisterVolumeRequest(volumeId: java.lang.String)
final case class CloneStackRequest(serviceRoleArn: java.lang.String, sourceStackId: java.lang.String, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, defaultOs: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, defaultInstanceProfileArn: scala.Option[java.lang.String] = scala.None, hostnameTheme: scala.Option[java.lang.String] = scala.None, defaultSshKeyName: scala.Option[java.lang.String] = scala.None, agentVersion: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, customJson: scala.Option[java.lang.String] = scala.None, defaultSubnetId: scala.Option[java.lang.String] = scala.None, region: scala.Option[java.lang.String] = scala.None, defaultAvailabilityZone: scala.Option[java.lang.String] = scala.None, customCookbooksSource: scala.Option[avias.opsworks.models.Source] = scala.None, chefConfiguration: scala.Option[avias.opsworks.models.ChefConfiguration] = scala.None, configurationManager: scala.Option[avias.opsworks.models.StackConfigurationManager] = scala.None, useCustomCookbooks: scala.Option[scala.Boolean] = scala.None, useOpsworksSecurityGroups: scala.Option[scala.Boolean] = scala.None, clonePermissions: scala.Option[scala.Boolean] = scala.None, defaultRootDeviceType: scala.Option[java.lang.String] = scala.None, cloneAppIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DeregisterEcsClusterRequest(ecsClusterArn: java.lang.String)
final case class RegisterInstanceResult(instanceId: scala.Option[java.lang.String] = scala.None)
final case class UpdateRdsDbInstanceRequest(rdsDbInstanceArn: java.lang.String, dbUser: scala.Option[java.lang.String] = scala.None, dbPassword: scala.Option[java.lang.String] = scala.None)
final case class VolumeConfiguration(mountPoint: java.lang.String, numberOfDisks: scala.Int, size: scala.Int, volumeType: scala.Option[java.lang.String] = scala.None, raidLevel: scala.Option[scala.Int] = scala.None, iops: scala.Option[scala.Int] = scala.None)
final case class DescribeTimeBasedAutoScalingRequest(instanceIds: scala.List[java.lang.String])
final case class RegisterElasticIpResult(elasticIp: scala.Option[java.lang.String] = scala.None)
final case class RegisterInstanceRequest(stackId: java.lang.String, rsaPublicKeyFingerprint: scala.Option[java.lang.String] = scala.None, privateIp: scala.Option[java.lang.String] = scala.None, rsaPublicKey: scala.Option[java.lang.String] = scala.None, hostname: scala.Option[java.lang.String] = scala.None, publicIp: scala.Option[java.lang.String] = scala.None, instanceIdentity: scala.Option[avias.opsworks.models.InstanceIdentity] = scala.None)
final case class UnassignVolumeRequest(volumeId: java.lang.String)
final case class SelfUserProfile(iamUserArn: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, sshUsername: scala.Option[java.lang.String] = scala.None, sshPublicKey: scala.Option[java.lang.String] = scala.None)
final case class Layer(shortname: scala.Option[java.lang.String] = scala.None, customInstanceProfileArn: scala.Option[java.lang.String] = scala.None, arn: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, customJson: scala.Option[java.lang.String] = scala.None, layerId: scala.Option[java.lang.String] = scala.None, cloudWatchLogsConfiguration: scala.Option[avias.opsworks.models.CloudWatchLogsConfiguration] = scala.None, `type`: scala.Option[java.lang.String] = scala.None, defaultRecipes: scala.Option[avias.opsworks.models.Recipes] = scala.None, customRecipes: scala.Option[avias.opsworks.models.Recipes] = scala.None, volumeConfigurations: scala.Option[scala.List[avias.opsworks.models.VolumeConfiguration]] = scala.None, createdAt: scala.Option[java.lang.String] = scala.None, useEbsOptimizedInstances: scala.Option[scala.Boolean] = scala.None, installUpdatesOnBoot: scala.Option[scala.Boolean] = scala.None, enableAutoHealing: scala.Option[scala.Boolean] = scala.None, autoAssignElasticIps: scala.Option[scala.Boolean] = scala.None, autoAssignPublicIps: scala.Option[scala.Boolean] = scala.None, lifecycleEventConfiguration: scala.Option[avias.opsworks.models.LifecycleEventConfiguration] = scala.None, customSecurityGroupIds: scala.Option[scala.List[java.lang.String]] = scala.None, defaultSecurityGroupNames: scala.Option[scala.List[java.lang.String]] = scala.None, packages: scala.Option[scala.List[java.lang.String]] = scala.None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None)
final case class DescribeServiceErrorsResult(serviceErrors: scala.Option[scala.List[avias.opsworks.models.ServiceError]] = scala.None)
final case class DescribeStackProvisioningParametersRequest(stackId: java.lang.String)
final case class SslConfiguration(certificate: java.lang.String, privateKey: java.lang.String, chain: scala.Option[java.lang.String] = scala.None)
final case class App(dataSources: scala.Option[scala.List[avias.opsworks.models.DataSource]] = scala.None, shortname: scala.Option[java.lang.String] = scala.None, appId: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, createdAt: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, sslConfiguration: scala.Option[avias.opsworks.models.SslConfiguration] = scala.None, `type`: scala.Option[java.lang.String] = scala.None, appSource: scala.Option[avias.opsworks.models.Source] = scala.None, enableSsl: scala.Option[scala.Boolean] = scala.None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, domains: scala.Option[scala.List[java.lang.String]] = scala.None, environment: scala.Option[scala.List[avias.opsworks.models.EnvironmentVariable]] = scala.None)
final case class DescribeRaidArraysRequest(instanceId: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, raidArrayIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DescribeRdsDbInstancesResult(rdsDbInstances: scala.Option[scala.List[avias.opsworks.models.RdsDbInstance]] = scala.None)
final case class AssignVolumeRequest(volumeId: java.lang.String, instanceId: scala.Option[java.lang.String] = scala.None)
final case class RebootInstanceRequest(instanceId: java.lang.String)
final case class DescribeStacksRequest(stackIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DeregisterElasticIpRequest(elasticIp: java.lang.String)
final case class AutoScalingThresholds(instanceCount: scala.Option[scala.Int] = scala.None, thresholdsWaitTime: scala.Option[scala.Int] = scala.None, ignoreMetricsTime: scala.Option[scala.Int] = scala.None, cpuThreshold: scala.Option[scala.Double] = scala.None, memoryThreshold: scala.Option[scala.Double] = scala.None, loadThreshold: scala.Option[scala.Double] = scala.None, alarms: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class GrantAccessRequest(instanceId: java.lang.String, validForInMinutes: scala.Option[scala.Int] = scala.None)
final case class EcsCluster(ecsClusterArn: scala.Option[java.lang.String] = scala.None, ecsClusterName: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, registeredAt: scala.Option[java.lang.String] = scala.None)
final case class DescribeEcsClustersResult(ecsClusters: scala.Option[scala.List[avias.opsworks.models.EcsCluster]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class Source(`type`: scala.Option[java.lang.String] = scala.None, revision: scala.Option[java.lang.String] = scala.None, username: scala.Option[java.lang.String] = scala.None, password: scala.Option[java.lang.String] = scala.None, url: scala.Option[java.lang.String] = scala.None, sshKey: scala.Option[java.lang.String] = scala.None)
final case class DescribeRdsDbInstancesRequest(stackId: java.lang.String, rdsDbInstanceArns: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class CreateUserProfileResult(iamUserArn: scala.Option[java.lang.String] = scala.None)
final case class Instance(blockDeviceMappings: scala.Option[scala.List[avias.opsworks.models.BlockDeviceMapping]] = scala.None, privateIp: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, sshHostRsaKeyFingerprint: scala.Option[java.lang.String] = scala.None, reportedAgentVersion: scala.Option[java.lang.String] = scala.None, amiId: scala.Option[java.lang.String] = scala.None, sshHostDsaKeyFingerprint: scala.Option[java.lang.String] = scala.None, arn: scala.Option[java.lang.String] = scala.None, tenancy: scala.Option[java.lang.String] = scala.None, ec2InstanceId: scala.Option[java.lang.String] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, instanceProfileArn: scala.Option[java.lang.String] = scala.None, rootDeviceVolumeId: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, agentVersion: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, hostname: scala.Option[java.lang.String] = scala.None, publicDns: scala.Option[java.lang.String] = scala.None, platform: scala.Option[java.lang.String] = scala.None, os: scala.Option[java.lang.String] = scala.None, ecsClusterArn: scala.Option[java.lang.String] = scala.None, sshKeyName: scala.Option[java.lang.String] = scala.None, infrastructureClass: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, ecsContainerInstanceArn: scala.Option[java.lang.String] = scala.None, lastServiceErrorId: scala.Option[java.lang.String] = scala.None, publicIp: scala.Option[java.lang.String] = scala.None, privateDns: scala.Option[java.lang.String] = scala.None, registeredBy: scala.Option[java.lang.String] = scala.None, elasticIp: scala.Option[java.lang.String] = scala.None, virtualizationType: scala.Option[java.lang.String] = scala.None, reportedOs: scala.Option[avias.opsworks.models.ReportedOs] = scala.None, createdAt: scala.Option[java.lang.String] = scala.None, ebsOptimized: scala.Option[scala.Boolean] = scala.None, installUpdatesOnBoot: scala.Option[scala.Boolean] = scala.None, rootDeviceType: scala.Option[java.lang.String] = scala.None, autoScalingType: scala.Option[java.lang.String] = scala.None, layerIds: scala.Option[scala.List[java.lang.String]] = scala.None, securityGroupIds: scala.Option[scala.List[java.lang.String]] = scala.None, architecture: scala.Option[java.lang.String] = scala.None)
final case class RegisterVolumeResult(volumeId: scala.Option[java.lang.String] = scala.None)
final case class DataSource(`type`: scala.Option[java.lang.String] = scala.None, arn: scala.Option[java.lang.String] = scala.None, databaseName: scala.Option[java.lang.String] = scala.None)
final case class DescribeInstancesResult(instances: scala.Option[scala.List[avias.opsworks.models.Instance]] = scala.None)
final case class ListTagsRequest(resourceArn: java.lang.String, maxResults: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeAppsRequest(stackId: scala.Option[java.lang.String] = scala.None, appIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class CreateDeploymentRequest(stackId: java.lang.String, command: avias.opsworks.models.DeploymentCommand, appId: scala.Option[java.lang.String] = scala.None, comment: scala.Option[java.lang.String] = scala.None, customJson: scala.Option[java.lang.String] = scala.None, instanceIds: scala.Option[scala.List[java.lang.String]] = scala.None, layerIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DescribeUserProfilesRequest(iamUserArns: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class CreateDeploymentResult(deploymentId: scala.Option[java.lang.String] = scala.None)
final case class TagResourceRequest(resourceArn: java.lang.String, tags: scala.collection.immutable.Map[java.lang.String, java.lang.String])
final case class DeleteAppRequest(appId: java.lang.String)
final case class UpdateVolumeRequest(volumeId: java.lang.String, name: scala.Option[java.lang.String] = scala.None, mountPoint: scala.Option[java.lang.String] = scala.None)
final case class SetLoadBasedAutoScalingRequest(layerId: java.lang.String, enable: scala.Option[scala.Boolean] = scala.None, upScaling: scala.Option[avias.opsworks.models.AutoScalingThresholds] = scala.None, downScaling: scala.Option[avias.opsworks.models.AutoScalingThresholds] = scala.None)
final case class DescribeElasticLoadBalancersResult(elasticLoadBalancers: scala.Option[scala.List[avias.opsworks.models.ElasticLoadBalancer]] = scala.None)
final case class DescribeDeploymentsResult(deployments: scala.Option[scala.List[avias.opsworks.models.Deployment]] = scala.None)
final case class DescribeStackSummaryResult(stackSummary: scala.Option[avias.opsworks.models.StackSummary] = scala.None)
final case class DeregisterRdsDbInstanceRequest(rdsDbInstanceArn: java.lang.String)
final case class DescribeAgentVersionsResult(agentVersions: scala.Option[scala.List[avias.opsworks.models.AgentVersion]] = scala.None)
final case class InstancesCount(shuttingDown: scala.Option[scala.Int] = scala.None, stopping: scala.Option[scala.Int] = scala.None, unassigning: scala.Option[scala.Int] = scala.None, terminating: scala.Option[scala.Int] = scala.None, startFailed: scala.Option[scala.Int] = scala.None, deregistering: scala.Option[scala.Int] = scala.None, registering: scala.Option[scala.Int] = scala.None, assigning: scala.Option[scala.Int] = scala.None, rebooting: scala.Option[scala.Int] = scala.None, registered: scala.Option[scala.Int] = scala.None, connectionLost: scala.Option[scala.Int] = scala.None, booting: scala.Option[scala.Int] = scala.None, terminated: scala.Option[scala.Int] = scala.None, stopped: scala.Option[scala.Int] = scala.None, runningSetup: scala.Option[scala.Int] = scala.None, pending: scala.Option[scala.Int] = scala.None, online: scala.Option[scala.Int] = scala.None, requested: scala.Option[scala.Int] = scala.None, setupFailed: scala.Option[scala.Int] = scala.None)
final case class ServiceError(message: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, `type`: scala.Option[java.lang.String] = scala.None, serviceErrorId: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, createdAt: scala.Option[java.lang.String] = scala.None)
final case class RegisterElasticIpRequest(elasticIp: java.lang.String, stackId: java.lang.String)
final case class AssociateElasticIpRequest(elasticIp: java.lang.String, instanceId: scala.Option[java.lang.String] = scala.None)
final case class ReportedOs(family: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, version: scala.Option[java.lang.String] = scala.None)
final case class RegisterRdsDbInstanceRequest(stackId: java.lang.String, rdsDbInstanceArn: java.lang.String, dbUser: java.lang.String, dbPassword: java.lang.String)
final case class ListTagsResult(tags: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class SetPermissionRequest(stackId: java.lang.String, iamUserArn: java.lang.String, level: scala.Option[java.lang.String] = scala.None, allowSsh: scala.Option[scala.Boolean] = scala.None, allowSudo: scala.Option[scala.Boolean] = scala.None)
final case class CloudWatchLogsConfiguration(enabled: scala.Option[scala.Boolean] = scala.None, logStreams: scala.Option[scala.List[avias.opsworks.models.CloudWatchLogsLogStream]] = scala.None)
final case class StopInstanceRequest(instanceId: java.lang.String)
final case class DeleteLayerRequest(layerId: java.lang.String)
final case class DescribeLayersRequest(stackId: scala.Option[java.lang.String] = scala.None, layerIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class Deployment(status: scala.Option[java.lang.String] = scala.None, appId: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, customJson: scala.Option[java.lang.String] = scala.None, comment: scala.Option[java.lang.String] = scala.None, iamUserArn: scala.Option[java.lang.String] = scala.None, deploymentId: scala.Option[java.lang.String] = scala.None, command: scala.Option[avias.opsworks.models.DeploymentCommand] = scala.None, duration: scala.Option[scala.Int] = scala.None, createdAt: scala.Option[java.lang.String] = scala.None, completedAt: scala.Option[java.lang.String] = scala.None, instanceIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class ChefConfiguration(manageBerkshelf: scala.Option[scala.Boolean] = scala.None, berkshelfVersion: scala.Option[java.lang.String] = scala.None)
final case class DescribeAgentVersionsRequest(stackId: scala.Option[java.lang.String] = scala.None, configurationManager: scala.Option[avias.opsworks.models.StackConfigurationManager] = scala.None)
final case class ValidationException(message: scala.Option[java.lang.String] = scala.None)
final case class DescribeLayersResult(layers: scala.Option[scala.List[avias.opsworks.models.Layer]] = scala.None)
final case class SetTimeBasedAutoScalingRequest(instanceId: java.lang.String, autoScalingSchedule: scala.Option[avias.opsworks.models.WeeklyAutoScalingSchedule] = scala.None)
final case class StopStackRequest(stackId: java.lang.String)
final case class EbsBlockDevice(snapshotId: scala.Option[java.lang.String] = scala.None, iops: scala.Option[scala.Int] = scala.None, volumeSize: scala.Option[scala.Int] = scala.None, volumeType: scala.Option[java.lang.String] = scala.None, deleteOnTermination: scala.Option[scala.Boolean] = scala.None)
final case class StackConfigurationManager(name: scala.Option[java.lang.String] = scala.None, version: scala.Option[java.lang.String] = scala.None)
final case class CreateAppRequest(stackId: java.lang.String, name: java.lang.String, `type`: java.lang.String, dataSources: scala.Option[scala.List[avias.opsworks.models.DataSource]] = scala.None, shortname: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, sslConfiguration: scala.Option[avias.opsworks.models.SslConfiguration] = scala.None, appSource: scala.Option[avias.opsworks.models.Source] = scala.None, enableSsl: scala.Option[scala.Boolean] = scala.None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, domains: scala.Option[scala.List[java.lang.String]] = scala.None, environment: scala.Option[scala.List[avias.opsworks.models.EnvironmentVariable]] = scala.None)
final case class TemporaryCredential(username: scala.Option[java.lang.String] = scala.None, password: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, validForInMinutes: scala.Option[scala.Int] = scala.None)
final case class UntagResourceRequest(resourceArn: java.lang.String, tagKeys: scala.List[java.lang.String])
final case class UpdateInstanceRequest(instanceId: java.lang.String, amiId: scala.Option[java.lang.String] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None, agentVersion: scala.Option[java.lang.String] = scala.None, hostname: scala.Option[java.lang.String] = scala.None, os: scala.Option[java.lang.String] = scala.None, sshKeyName: scala.Option[java.lang.String] = scala.None, installUpdatesOnBoot: scala.Option[scala.Boolean] = scala.None, ebsOptimized: scala.Option[scala.Boolean] = scala.None, autoScalingType: scala.Option[java.lang.String] = scala.None, layerIds: scala.Option[scala.List[java.lang.String]] = scala.None, architecture: scala.Option[java.lang.String] = scala.None)
final case class AgentVersion(version: scala.Option[java.lang.String] = scala.None, configurationManager: scala.Option[avias.opsworks.models.StackConfigurationManager] = scala.None)
final case class DescribeVolumesRequest(instanceId: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, raidArrayId: scala.Option[java.lang.String] = scala.None, volumeIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DescribeLoadBasedAutoScalingRequest(layerIds: scala.List[java.lang.String])
final case class ElasticLoadBalancer(vpcId: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, dnsName: scala.Option[java.lang.String] = scala.None, layerId: scala.Option[java.lang.String] = scala.None, region: scala.Option[java.lang.String] = scala.None, elasticLoadBalancerName: scala.Option[java.lang.String] = scala.None, availabilityZones: scala.Option[scala.List[java.lang.String]] = scala.None, subnetIds: scala.Option[scala.List[java.lang.String]] = scala.None, ec2InstanceIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class BlockDeviceMapping(deviceName: scala.Option[java.lang.String] = scala.None, noDevice: scala.Option[java.lang.String] = scala.None, virtualName: scala.Option[java.lang.String] = scala.None, ebs: scala.Option[avias.opsworks.models.EbsBlockDevice] = scala.None)
final case class UpdateMyUserProfileRequest(sshPublicKey: scala.Option[java.lang.String] = scala.None)
final case class RaidArray(device: scala.Option[java.lang.String] = scala.None, raidArrayId: scala.Option[java.lang.String] = scala.None, mountPoint: scala.Option[java.lang.String] = scala.None, volumeType: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, raidLevel: scala.Option[scala.Int] = scala.None, numberOfDisks: scala.Option[scala.Int] = scala.None, size: scala.Option[scala.Int] = scala.None, iops: scala.Option[scala.Int] = scala.None, createdAt: scala.Option[java.lang.String] = scala.None)
final case class RdsDbInstance(dbPassword: scala.Option[java.lang.String] = scala.None, dbUser: scala.Option[java.lang.String] = scala.None, engine: scala.Option[java.lang.String] = scala.None, dbInstanceIdentifier: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, region: scala.Option[java.lang.String] = scala.None, address: scala.Option[java.lang.String] = scala.None, rdsDbInstanceArn: scala.Option[java.lang.String] = scala.None, missingOnRds: scala.Option[scala.Boolean] = scala.None)
final case class DescribeElasticIpsRequest(instanceId: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, ips: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class Permission(stackId: scala.Option[java.lang.String] = scala.None, iamUserArn: scala.Option[java.lang.String] = scala.None, level: scala.Option[java.lang.String] = scala.None, allowSsh: scala.Option[scala.Boolean] = scala.None, allowSudo: scala.Option[scala.Boolean] = scala.None)
final case class DescribeDeploymentsRequest(stackId: scala.Option[java.lang.String] = scala.None, appId: scala.Option[java.lang.String] = scala.None, deploymentIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class Command(logUrl: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, `type`: scala.Option[java.lang.String] = scala.None, commandId: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, deploymentId: scala.Option[java.lang.String] = scala.None, createdAt: scala.Option[java.lang.String] = scala.None, acknowledgedAt: scala.Option[java.lang.String] = scala.None, completedAt: scala.Option[java.lang.String] = scala.None, exitCode: scala.Option[scala.Int] = scala.None)
final case class RegisterEcsClusterRequest(ecsClusterArn: java.lang.String, stackId: java.lang.String)
final case class CreateStackRequest(name: java.lang.String, defaultInstanceProfileArn: java.lang.String, serviceRoleArn: java.lang.String, region: java.lang.String, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, defaultOs: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, hostnameTheme: scala.Option[java.lang.String] = scala.None, defaultSshKeyName: scala.Option[java.lang.String] = scala.None, agentVersion: scala.Option[java.lang.String] = scala.None, customJson: scala.Option[java.lang.String] = scala.None, defaultSubnetId: scala.Option[java.lang.String] = scala.None, defaultAvailabilityZone: scala.Option[java.lang.String] = scala.None, customCookbooksSource: scala.Option[avias.opsworks.models.Source] = scala.None, chefConfiguration: scala.Option[avias.opsworks.models.ChefConfiguration] = scala.None, configurationManager: scala.Option[avias.opsworks.models.StackConfigurationManager] = scala.None, useCustomCookbooks: scala.Option[scala.Boolean] = scala.None, useOpsworksSecurityGroups: scala.Option[scala.Boolean] = scala.None, defaultRootDeviceType: scala.Option[java.lang.String] = scala.None)
final case class Recipes(undeploy: scala.Option[scala.List[java.lang.String]] = scala.None, deploy: scala.Option[scala.List[java.lang.String]] = scala.None, configure: scala.Option[scala.List[java.lang.String]] = scala.None, setup: scala.Option[scala.List[java.lang.String]] = scala.None, shutdown: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DescribeUserProfilesResult(userProfiles: scala.Option[scala.List[avias.opsworks.models.UserProfile]] = scala.None)
final case class GrantAccessResult(temporaryCredential: scala.Option[avias.opsworks.models.TemporaryCredential] = scala.None)
final case class UpdateElasticIpRequest(elasticIp: java.lang.String, name: scala.Option[java.lang.String] = scala.None)
final case class DescribeVolumesResult(volumes: scala.Option[scala.List[avias.opsworks.models.Volume]] = scala.None)
final case class Volume(device: scala.Option[java.lang.String] = scala.None, raidArrayId: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, ec2VolumeId: scala.Option[java.lang.String] = scala.None, mountPoint: scala.Option[java.lang.String] = scala.None, volumeType: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, region: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, volumeId: scala.Option[java.lang.String] = scala.None, size: scala.Option[scala.Int] = scala.None, iops: scala.Option[scala.Int] = scala.None)
final case class EnvironmentVariable(key: java.lang.String, value: java.lang.String, secure: scala.Option[scala.Boolean] = scala.None)
final case class Stack(attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, defaultOs: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, defaultInstanceProfileArn: scala.Option[java.lang.String] = scala.None, arn: scala.Option[java.lang.String] = scala.None, hostnameTheme: scala.Option[java.lang.String] = scala.None, serviceRoleArn: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, defaultSshKeyName: scala.Option[java.lang.String] = scala.None, agentVersion: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, customJson: scala.Option[java.lang.String] = scala.None, defaultSubnetId: scala.Option[java.lang.String] = scala.None, region: scala.Option[java.lang.String] = scala.None, defaultAvailabilityZone: scala.Option[java.lang.String] = scala.None, customCookbooksSource: scala.Option[avias.opsworks.models.Source] = scala.None, chefConfiguration: scala.Option[avias.opsworks.models.ChefConfiguration] = scala.None, configurationManager: scala.Option[avias.opsworks.models.StackConfigurationManager] = scala.None, createdAt: scala.Option[java.lang.String] = scala.None, useCustomCookbooks: scala.Option[scala.Boolean] = scala.None, useOpsworksSecurityGroups: scala.Option[scala.Boolean] = scala.None, defaultRootDeviceType: scala.Option[java.lang.String] = scala.None)
final case class CreateLayerRequest(name: java.lang.String, stackId: java.lang.String, shortname: java.lang.String, `type`: java.lang.String, customInstanceProfileArn: scala.Option[java.lang.String] = scala.None, customJson: scala.Option[java.lang.String] = scala.None, cloudWatchLogsConfiguration: scala.Option[avias.opsworks.models.CloudWatchLogsConfiguration] = scala.None, customRecipes: scala.Option[avias.opsworks.models.Recipes] = scala.None, volumeConfigurations: scala.Option[scala.List[avias.opsworks.models.VolumeConfiguration]] = scala.None, useEbsOptimizedInstances: scala.Option[scala.Boolean] = scala.None, installUpdatesOnBoot: scala.Option[scala.Boolean] = scala.None, enableAutoHealing: scala.Option[scala.Boolean] = scala.None, autoAssignElasticIps: scala.Option[scala.Boolean] = scala.None, autoAssignPublicIps: scala.Option[scala.Boolean] = scala.None, lifecycleEventConfiguration: scala.Option[avias.opsworks.models.LifecycleEventConfiguration] = scala.None, customSecurityGroupIds: scala.Option[scala.List[java.lang.String]] = scala.None, packages: scala.Option[scala.List[java.lang.String]] = scala.None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None)
final case class AssignInstanceRequest(instanceId: java.lang.String, layerIds: scala.List[java.lang.String])
final case class StackSummary(stackId: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, arn: scala.Option[java.lang.String] = scala.None, layersCount: scala.Option[scala.Int] = scala.None, appsCount: scala.Option[scala.Int] = scala.None, instancesCount: scala.Option[avias.opsworks.models.InstancesCount] = scala.None)
final case class DescribeElasticLoadBalancersRequest(stackId: scala.Option[java.lang.String] = scala.None, layerIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class UpdateUserProfileRequest(iamUserArn: java.lang.String, sshUsername: scala.Option[java.lang.String] = scala.None, sshPublicKey: scala.Option[java.lang.String] = scala.None, allowSelfManagement: scala.Option[scala.Boolean] = scala.None)
final case class StartInstanceRequest(instanceId: java.lang.String)
final case class DeregisterInstanceRequest(instanceId: java.lang.String)
final case class DescribePermissionsResult(permissions: scala.Option[scala.List[avias.opsworks.models.Permission]] = scala.None)
final case class GetHostnameSuggestionResult(layerId: scala.Option[java.lang.String] = scala.None, hostname: scala.Option[java.lang.String] = scala.None)
final case class ResourceNotFoundException(message: scala.Option[java.lang.String] = scala.None)
final case class DeploymentCommand(name: java.lang.String, args: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = scala.None)
final case class CreateLayerResult(layerId: scala.Option[java.lang.String] = scala.None)
final case class DescribeTimeBasedAutoScalingResult(timeBasedAutoScalingConfigurations: scala.Option[scala.List[avias.opsworks.models.TimeBasedAutoScalingConfiguration]] = scala.None)
final case class DescribeServiceErrorsRequest(stackId: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, serviceErrorIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class CreateUserProfileRequest(iamUserArn: java.lang.String, sshUsername: scala.Option[java.lang.String] = scala.None, sshPublicKey: scala.Option[java.lang.String] = scala.None, allowSelfManagement: scala.Option[scala.Boolean] = scala.None)
final case class StartStackRequest(stackId: java.lang.String)
final case class DescribePermissionsRequest(iamUserArn: scala.Option[java.lang.String] = scala.None, stackId: scala.Option[java.lang.String] = scala.None)
final case class DescribeStackProvisioningParametersResult(agentInstallerUrl: scala.Option[java.lang.String] = scala.None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None)
final case class DescribeAppsResult(apps: scala.Option[scala.List[avias.opsworks.models.App]] = scala.None)
final case class UnassignInstanceRequest(instanceId: java.lang.String)
final case class UserProfile(iamUserArn: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, sshUsername: scala.Option[java.lang.String] = scala.None, sshPublicKey: scala.Option[java.lang.String] = scala.None, allowSelfManagement: scala.Option[scala.Boolean] = scala.None)
final case class TimeBasedAutoScalingConfiguration(instanceId: scala.Option[java.lang.String] = scala.None, autoScalingSchedule: scala.Option[avias.opsworks.models.WeeklyAutoScalingSchedule] = scala.None)
final case class UpdateStackRequest(stackId: java.lang.String, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, defaultOs: scala.Option[java.lang.String] = scala.None, defaultInstanceProfileArn: scala.Option[java.lang.String] = scala.None, hostnameTheme: scala.Option[java.lang.String] = scala.None, serviceRoleArn: scala.Option[java.lang.String] = scala.None, defaultSshKeyName: scala.Option[java.lang.String] = scala.None, agentVersion: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, customJson: scala.Option[java.lang.String] = scala.None, defaultSubnetId: scala.Option[java.lang.String] = scala.None, defaultAvailabilityZone: scala.Option[java.lang.String] = scala.None, customCookbooksSource: scala.Option[avias.opsworks.models.Source] = scala.None, chefConfiguration: scala.Option[avias.opsworks.models.ChefConfiguration] = scala.None, configurationManager: scala.Option[avias.opsworks.models.StackConfigurationManager] = scala.None, useCustomCookbooks: scala.Option[scala.Boolean] = scala.None, useOpsworksSecurityGroups: scala.Option[scala.Boolean] = scala.None, defaultRootDeviceType: scala.Option[java.lang.String] = scala.None)
final case class UpdateAppRequest(appId: java.lang.String, dataSources: scala.Option[scala.List[avias.opsworks.models.DataSource]] = scala.None, name: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, sslConfiguration: scala.Option[avias.opsworks.models.SslConfiguration] = scala.None, `type`: scala.Option[java.lang.String] = scala.None, appSource: scala.Option[avias.opsworks.models.Source] = scala.None, enableSsl: scala.Option[scala.Boolean] = scala.None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, domains: scala.Option[scala.List[java.lang.String]] = scala.None, environment: scala.Option[scala.List[avias.opsworks.models.EnvironmentVariable]] = scala.None)
final case class DescribeCommandsRequest(deploymentId: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, commandIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class RegisterEcsClusterResult(ecsClusterArn: scala.Option[java.lang.String] = scala.None)
final case class DisassociateElasticIpRequest(elasticIp: java.lang.String)
final case class RegisterVolumeRequest(stackId: java.lang.String, ec2VolumeId: scala.Option[java.lang.String] = scala.None)
final case class CreateStackResult(stackId: scala.Option[java.lang.String] = scala.None)
final case class DescribeStacksResult(stacks: scala.Option[scala.List[avias.opsworks.models.Stack]] = scala.None)
final case class CreateInstanceRequest(stackId: java.lang.String, instanceType: java.lang.String, layerIds: scala.List[java.lang.String], blockDeviceMappings: scala.Option[scala.List[avias.opsworks.models.BlockDeviceMapping]] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, amiId: scala.Option[java.lang.String] = scala.None, tenancy: scala.Option[java.lang.String] = scala.None, agentVersion: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, hostname: scala.Option[java.lang.String] = scala.None, os: scala.Option[java.lang.String] = scala.None, sshKeyName: scala.Option[java.lang.String] = scala.None, virtualizationType: scala.Option[java.lang.String] = scala.None, installUpdatesOnBoot: scala.Option[scala.Boolean] = scala.None, ebsOptimized: scala.Option[scala.Boolean] = scala.None, rootDeviceType: scala.Option[java.lang.String] = scala.None, autoScalingType: scala.Option[java.lang.String] = scala.None, architecture: scala.Option[java.lang.String] = scala.None)
final case class DescribeLoadBasedAutoScalingResult(loadBasedAutoScalingConfigurations: scala.Option[scala.List[avias.opsworks.models.LoadBasedAutoScalingConfiguration]] = scala.None)
final case class CreateInstanceResult(instanceId: scala.Option[java.lang.String] = scala.None)
final case class DescribeMyUserProfileResult(userProfile: scala.Option[avias.opsworks.models.SelfUserProfile] = scala.None)
final case class DescribeInstancesRequest(stackId: scala.Option[java.lang.String] = scala.None, layerId: scala.Option[java.lang.String] = scala.None, instanceIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DeleteUserProfileRequest(iamUserArn: java.lang.String)
final case class WeeklyAutoScalingSchedule(wednesday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, sunday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, saturday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, tuesday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, monday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, friday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None, thursday: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None)
final case class CloudWatchLogsLogStream(datetimeFormat: scala.Option[java.lang.String] = scala.None, fileFingerprintLines: scala.Option[java.lang.String] = scala.None, logGroupName: scala.Option[java.lang.String] = scala.None, multiLineStartPattern: scala.Option[java.lang.String] = scala.None, file: scala.Option[java.lang.String] = scala.None, initialPosition: scala.Option[java.lang.String] = scala.None, encoding: scala.Option[java.lang.String] = scala.None, timeZone: scala.Option[java.lang.String] = scala.None, bufferDuration: scala.Option[scala.Int] = scala.None, batchCount: scala.Option[scala.Int] = scala.None, batchSize: scala.Option[scala.Int] = scala.None)
final case class DescribeElasticIpsResult(elasticIps: scala.Option[scala.List[avias.opsworks.models.ElasticIp]] = scala.None)
final case class GetHostnameSuggestionRequest(layerId: java.lang.String)
final case class LoadBasedAutoScalingConfiguration(layerId: scala.Option[java.lang.String] = scala.None, enable: scala.Option[scala.Boolean] = scala.None, upScaling: scala.Option[avias.opsworks.models.AutoScalingThresholds] = scala.None, downScaling: scala.Option[avias.opsworks.models.AutoScalingThresholds] = scala.None)
final case class DescribeCommandsResult(commands: scala.Option[scala.List[avias.opsworks.models.Command]] = scala.None)
final case class LifecycleEventConfiguration(shutdown: scala.Option[avias.opsworks.models.ShutdownEventConfiguration] = scala.None)
final case class DescribeStackSummaryRequest(stackId: java.lang.String)
final case class DeleteStackRequest(stackId: java.lang.String)
final case class AttachElasticLoadBalancerRequest(elasticLoadBalancerName: java.lang.String, layerId: java.lang.String)
final case class DescribeEcsClustersRequest(ecsClusterArns: scala.Option[scala.List[java.lang.String]] = scala.None, stackId: scala.Option[java.lang.String] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, maxResults: scala.Option[scala.Int] = scala.None)
final case class UpdateLayerRequest(layerId: java.lang.String, shortname: scala.Option[java.lang.String] = scala.None, customInstanceProfileArn: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, customJson: scala.Option[java.lang.String] = scala.None, cloudWatchLogsConfiguration: scala.Option[avias.opsworks.models.CloudWatchLogsConfiguration] = scala.None, customRecipes: scala.Option[avias.opsworks.models.Recipes] = scala.None, volumeConfigurations: scala.Option[scala.List[avias.opsworks.models.VolumeConfiguration]] = scala.None, useEbsOptimizedInstances: scala.Option[scala.Boolean] = scala.None, installUpdatesOnBoot: scala.Option[scala.Boolean] = scala.None, enableAutoHealing: scala.Option[scala.Boolean] = scala.None, autoAssignElasticIps: scala.Option[scala.Boolean] = scala.None, autoAssignPublicIps: scala.Option[scala.Boolean] = scala.None, lifecycleEventConfiguration: scala.Option[avias.opsworks.models.LifecycleEventConfiguration] = scala.None, customSecurityGroupIds: scala.Option[scala.List[java.lang.String]] = scala.None, packages: scala.Option[scala.List[java.lang.String]] = scala.None, attributes: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = scala.None)
final case class CloneStackResult(stackId: scala.Option[java.lang.String] = scala.None)
final case class ElasticIp(domain: scala.Option[java.lang.String] = scala.None, ip: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, region: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None)
final case class CreateAppResult(appId: scala.Option[java.lang.String] = scala.None)
final case class DescribeRaidArraysResult(raidArrays: scala.Option[scala.List[avias.opsworks.models.RaidArray]] = scala.None)