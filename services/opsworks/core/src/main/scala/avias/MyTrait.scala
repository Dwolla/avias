package avias.opsworks
trait Amazonopsworks[F[_]] {
  def describeElasticIps(input: avias.opsworks.models.DescribeElasticIpsRequest): F[avias.opsworks.models.DescribeElasticIpsResult]
  def untagResource(input: avias.opsworks.models.UntagResourceRequest): F[scala.Unit]
  def setTimeBasedAutoScaling(input: avias.opsworks.models.SetTimeBasedAutoScalingRequest): F[scala.Unit]
  def describeInstances(input: avias.opsworks.models.DescribeInstancesRequest): F[avias.opsworks.models.DescribeInstancesResult]
  def describeRaidArrays(input: avias.opsworks.models.DescribeRaidArraysRequest): F[avias.opsworks.models.DescribeRaidArraysResult]
  def unassignVolume(input: avias.opsworks.models.UnassignVolumeRequest): F[scala.Unit]
  def deleteUserProfile(input: avias.opsworks.models.DeleteUserProfileRequest): F[scala.Unit]
  def setPermission(input: avias.opsworks.models.SetPermissionRequest): F[scala.Unit]
  def updateElasticIp(input: avias.opsworks.models.UpdateElasticIpRequest): F[scala.Unit]
  def describeApps(input: avias.opsworks.models.DescribeAppsRequest): F[avias.opsworks.models.DescribeAppsResult]
  def deregisterInstance(input: avias.opsworks.models.DeregisterInstanceRequest): F[scala.Unit]
  def disassociateElasticIp(input: avias.opsworks.models.DisassociateElasticIpRequest): F[scala.Unit]
  def deregisterVolume(input: avias.opsworks.models.DeregisterVolumeRequest): F[scala.Unit]
  def updateStack(input: avias.opsworks.models.UpdateStackRequest): F[scala.Unit]
  def deleteInstance(input: avias.opsworks.models.DeleteInstanceRequest): F[scala.Unit]
  def deregisterRdsDbInstance(input: avias.opsworks.models.DeregisterRdsDbInstanceRequest): F[scala.Unit]
  def describeMyUserProfile: F[avias.opsworks.models.DescribeMyUserProfileResult]
  def describeAgentVersions(input: avias.opsworks.models.DescribeAgentVersionsRequest): F[avias.opsworks.models.DescribeAgentVersionsResult]
  def deregisterElasticIp(input: avias.opsworks.models.DeregisterElasticIpRequest): F[scala.Unit]
  def describePermissions(input: avias.opsworks.models.DescribePermissionsRequest): F[avias.opsworks.models.DescribePermissionsResult]
  def describeUserProfiles(input: avias.opsworks.models.DescribeUserProfilesRequest): F[avias.opsworks.models.DescribeUserProfilesResult]
  def rebootInstance(input: avias.opsworks.models.RebootInstanceRequest): F[scala.Unit]
  def updateUserProfile(input: avias.opsworks.models.UpdateUserProfileRequest): F[scala.Unit]
  def startInstance(input: avias.opsworks.models.StartInstanceRequest): F[scala.Unit]
  def tagResource(input: avias.opsworks.models.TagResourceRequest): F[scala.Unit]
  def stopInstance(input: avias.opsworks.models.StopInstanceRequest): F[scala.Unit]
  def describeServiceErrors(input: avias.opsworks.models.DescribeServiceErrorsRequest): F[avias.opsworks.models.DescribeServiceErrorsResult]
  def describeVolumes(input: avias.opsworks.models.DescribeVolumesRequest): F[avias.opsworks.models.DescribeVolumesResult]
  def assignInstance(input: avias.opsworks.models.AssignInstanceRequest): F[scala.Unit]
  def attachElasticLoadBalancer(input: avias.opsworks.models.AttachElasticLoadBalancerRequest): F[scala.Unit]
  def createUserProfile(input: avias.opsworks.models.CreateUserProfileRequest): F[avias.opsworks.models.CreateUserProfileResult]
  def describeElasticLoadBalancers(input: avias.opsworks.models.DescribeElasticLoadBalancersRequest): F[avias.opsworks.models.DescribeElasticLoadBalancersResult]
  def describeCommands(input: avias.opsworks.models.DescribeCommandsRequest): F[avias.opsworks.models.DescribeCommandsResult]
  def deleteStack(input: avias.opsworks.models.DeleteStackRequest): F[scala.Unit]
  def registerInstance(input: avias.opsworks.models.RegisterInstanceRequest): F[avias.opsworks.models.RegisterInstanceResult]
  def registerEcsCluster(input: avias.opsworks.models.RegisterEcsClusterRequest): F[avias.opsworks.models.RegisterEcsClusterResult]
  def associateElasticIp(input: avias.opsworks.models.AssociateElasticIpRequest): F[scala.Unit]
  def updateRdsDbInstance(input: avias.opsworks.models.UpdateRdsDbInstanceRequest): F[scala.Unit]
  def detachElasticLoadBalancer(input: avias.opsworks.models.DetachElasticLoadBalancerRequest): F[scala.Unit]
  def deleteApp(input: avias.opsworks.models.DeleteAppRequest): F[scala.Unit]
  def deregisterEcsCluster(input: avias.opsworks.models.DeregisterEcsClusterRequest): F[scala.Unit]
  def createDeployment(input: avias.opsworks.models.CreateDeploymentRequest): F[avias.opsworks.models.CreateDeploymentResult]
  def describeStackSummary(input: avias.opsworks.models.DescribeStackSummaryRequest): F[avias.opsworks.models.DescribeStackSummaryResult]
  def listTags(input: avias.opsworks.models.ListTagsRequest): F[avias.opsworks.models.ListTagsResult]
  def deleteLayer(input: avias.opsworks.models.DeleteLayerRequest): F[scala.Unit]
  def getHostnameSuggestion(input: avias.opsworks.models.GetHostnameSuggestionRequest): F[avias.opsworks.models.GetHostnameSuggestionResult]
  def createInstance(input: avias.opsworks.models.CreateInstanceRequest): F[avias.opsworks.models.CreateInstanceResult]
  def registerVolume(input: avias.opsworks.models.RegisterVolumeRequest): F[avias.opsworks.models.RegisterVolumeResult]
  def stopStack(input: avias.opsworks.models.StopStackRequest): F[scala.Unit]
  def describeLayers(input: avias.opsworks.models.DescribeLayersRequest): F[avias.opsworks.models.DescribeLayersResult]
  def createApp(input: avias.opsworks.models.CreateAppRequest): F[avias.opsworks.models.CreateAppResult]
  def describeStackProvisioningParameters(input: avias.opsworks.models.DescribeStackProvisioningParametersRequest): F[avias.opsworks.models.DescribeStackProvisioningParametersResult]
  def unassignInstance(input: avias.opsworks.models.UnassignInstanceRequest): F[scala.Unit]
  def assignVolume(input: avias.opsworks.models.AssignVolumeRequest): F[scala.Unit]
  def grantAccess(input: avias.opsworks.models.GrantAccessRequest): F[avias.opsworks.models.GrantAccessResult]
  def cloneStack(input: avias.opsworks.models.CloneStackRequest): F[avias.opsworks.models.CloneStackResult]
  def describeTimeBasedAutoScaling(input: avias.opsworks.models.DescribeTimeBasedAutoScalingRequest): F[avias.opsworks.models.DescribeTimeBasedAutoScalingResult]
  def describeRdsDbInstances(input: avias.opsworks.models.DescribeRdsDbInstancesRequest): F[avias.opsworks.models.DescribeRdsDbInstancesResult]
  def updateApp(input: avias.opsworks.models.UpdateAppRequest): F[scala.Unit]
  def updateMyUserProfile(input: avias.opsworks.models.UpdateMyUserProfileRequest): F[scala.Unit]
  def describeEcsClusters(input: avias.opsworks.models.DescribeEcsClustersRequest): F[avias.opsworks.models.DescribeEcsClustersResult]
  def updateLayer(input: avias.opsworks.models.UpdateLayerRequest): F[scala.Unit]
  def registerRdsDbInstance(input: avias.opsworks.models.RegisterRdsDbInstanceRequest): F[scala.Unit]
  def updateInstance(input: avias.opsworks.models.UpdateInstanceRequest): F[scala.Unit]
  def describeStacks(input: avias.opsworks.models.DescribeStacksRequest): F[avias.opsworks.models.DescribeStacksResult]
  def setLoadBasedAutoScaling(input: avias.opsworks.models.SetLoadBasedAutoScalingRequest): F[scala.Unit]
  def startStack(input: avias.opsworks.models.StartStackRequest): F[scala.Unit]
  def describeLoadBasedAutoScaling(input: avias.opsworks.models.DescribeLoadBasedAutoScalingRequest): F[avias.opsworks.models.DescribeLoadBasedAutoScalingResult]
  def createLayer(input: avias.opsworks.models.CreateLayerRequest): F[avias.opsworks.models.CreateLayerResult]
  def updateVolume(input: avias.opsworks.models.UpdateVolumeRequest): F[scala.Unit]
  def createStack(input: avias.opsworks.models.CreateStackRequest): F[avias.opsworks.models.CreateStackResult]
  def describeDeployments(input: avias.opsworks.models.DescribeDeploymentsRequest): F[avias.opsworks.models.DescribeDeploymentsResult]
  def registerElasticIp(input: avias.opsworks.models.RegisterElasticIpRequest): F[avias.opsworks.models.RegisterElasticIpResult]
}