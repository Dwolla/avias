package avias.inspector
trait Amazoninspector[F[_]] {
  def createAssessmentTemplate(input: avias.inspector.models.CreateAssessmentTemplateRequest): F[avias.inspector.models.CreateAssessmentTemplateResponse]
  def removeAttributesFromFindings(input: avias.inspector.models.RemoveAttributesFromFindingsRequest): F[avias.inspector.models.RemoveAttributesFromFindingsResponse]
  def listEventSubscriptions(input: avias.inspector.models.ListEventSubscriptionsRequest): F[avias.inspector.models.ListEventSubscriptionsResponse]
  def setTagsForResource(input: avias.inspector.models.SetTagsForResourceRequest): F[scala.Unit]
  def listFindings(input: avias.inspector.models.ListFindingsRequest): F[avias.inspector.models.ListFindingsResponse]
  def listTagsForResource(input: avias.inspector.models.ListTagsForResourceRequest): F[avias.inspector.models.ListTagsForResourceResponse]
  def unsubscribeFromEvent(input: avias.inspector.models.UnsubscribeFromEventRequest): F[scala.Unit]
  def describeRulesPackages(input: avias.inspector.models.DescribeRulesPackagesRequest): F[avias.inspector.models.DescribeRulesPackagesResponse]
  def addAttributesToFindings(input: avias.inspector.models.AddAttributesToFindingsRequest): F[avias.inspector.models.AddAttributesToFindingsResponse]
  def updateAssessmentTarget(input: avias.inspector.models.UpdateAssessmentTargetRequest): F[scala.Unit]
  def listRulesPackages(input: avias.inspector.models.ListRulesPackagesRequest): F[avias.inspector.models.ListRulesPackagesResponse]
  def describeAssessmentTemplates(input: avias.inspector.models.DescribeAssessmentTemplatesRequest): F[avias.inspector.models.DescribeAssessmentTemplatesResponse]
  def listAssessmentRuns(input: avias.inspector.models.ListAssessmentRunsRequest): F[avias.inspector.models.ListAssessmentRunsResponse]
  def describeFindings(input: avias.inspector.models.DescribeFindingsRequest): F[avias.inspector.models.DescribeFindingsResponse]
  def listAssessmentTargets(input: avias.inspector.models.ListAssessmentTargetsRequest): F[avias.inspector.models.ListAssessmentTargetsResponse]
  def describeResourceGroups(input: avias.inspector.models.DescribeResourceGroupsRequest): F[avias.inspector.models.DescribeResourceGroupsResponse]
  def getTelemetryMetadata(input: avias.inspector.models.GetTelemetryMetadataRequest): F[avias.inspector.models.GetTelemetryMetadataResponse]
  def deleteAssessmentTarget(input: avias.inspector.models.DeleteAssessmentTargetRequest): F[scala.Unit]
  def describeAssessmentRuns(input: avias.inspector.models.DescribeAssessmentRunsRequest): F[avias.inspector.models.DescribeAssessmentRunsResponse]
  def previewAgents(input: avias.inspector.models.PreviewAgentsRequest): F[avias.inspector.models.PreviewAgentsResponse]
  def registerCrossAccountAccessRole(input: avias.inspector.models.RegisterCrossAccountAccessRoleRequest): F[scala.Unit]
  def describeAssessmentTargets(input: avias.inspector.models.DescribeAssessmentTargetsRequest): F[avias.inspector.models.DescribeAssessmentTargetsResponse]
  def deleteAssessmentRun(input: avias.inspector.models.DeleteAssessmentRunRequest): F[scala.Unit]
  def listAssessmentRunAgents(input: avias.inspector.models.ListAssessmentRunAgentsRequest): F[avias.inspector.models.ListAssessmentRunAgentsResponse]
  def getAssessmentReport(input: avias.inspector.models.GetAssessmentReportRequest): F[avias.inspector.models.GetAssessmentReportResponse]
  def describeCrossAccountAccessRole: F[avias.inspector.models.DescribeCrossAccountAccessRoleResponse]
  def startAssessmentRun(input: avias.inspector.models.StartAssessmentRunRequest): F[avias.inspector.models.StartAssessmentRunResponse]
  def deleteAssessmentTemplate(input: avias.inspector.models.DeleteAssessmentTemplateRequest): F[scala.Unit]
  def createResourceGroup(input: avias.inspector.models.CreateResourceGroupRequest): F[avias.inspector.models.CreateResourceGroupResponse]
  def subscribeToEvent(input: avias.inspector.models.SubscribeToEventRequest): F[scala.Unit]
  def createAssessmentTarget(input: avias.inspector.models.CreateAssessmentTargetRequest): F[avias.inspector.models.CreateAssessmentTargetResponse]
  def stopAssessmentRun(input: avias.inspector.models.StopAssessmentRunRequest): F[scala.Unit]
  def listAssessmentTemplates(input: avias.inspector.models.ListAssessmentTemplatesRequest): F[avias.inspector.models.ListAssessmentTemplatesResponse]
}