package org.lyranthe.araethura.inspector
trait Amazoninspector[F[_]] {
  def createAssessmentTemplate(input: models.CreateAssessmentTemplateRequest): F[models.CreateAssessmentTemplateResponse]
  def removeAttributesFromFindings(input: models.RemoveAttributesFromFindingsRequest): F[models.RemoveAttributesFromFindingsResponse]
  def listEventSubscriptions(input: models.ListEventSubscriptionsRequest): F[models.ListEventSubscriptionsResponse]
  def setTagsForResource(input: models.SetTagsForResourceRequest): F[Unit]
  def listFindings(input: models.ListFindingsRequest): F[models.ListFindingsResponse]
  def listTagsForResource(input: models.ListTagsForResourceRequest): F[models.ListTagsForResourceResponse]
  def unsubscribeFromEvent(input: models.UnsubscribeFromEventRequest): F[Unit]
  def describeRulesPackages(input: models.DescribeRulesPackagesRequest): F[models.DescribeRulesPackagesResponse]
  def addAttributesToFindings(input: models.AddAttributesToFindingsRequest): F[models.AddAttributesToFindingsResponse]
  def updateAssessmentTarget(input: models.UpdateAssessmentTargetRequest): F[Unit]
  def listRulesPackages(input: models.ListRulesPackagesRequest): F[models.ListRulesPackagesResponse]
  def describeAssessmentTemplates(input: models.DescribeAssessmentTemplatesRequest): F[models.DescribeAssessmentTemplatesResponse]
  def listAssessmentRuns(input: models.ListAssessmentRunsRequest): F[models.ListAssessmentRunsResponse]
  def describeFindings(input: models.DescribeFindingsRequest): F[models.DescribeFindingsResponse]
  def listAssessmentTargets(input: models.ListAssessmentTargetsRequest): F[models.ListAssessmentTargetsResponse]
  def describeResourceGroups(input: models.DescribeResourceGroupsRequest): F[models.DescribeResourceGroupsResponse]
  def getTelemetryMetadata(input: models.GetTelemetryMetadataRequest): F[models.GetTelemetryMetadataResponse]
  def deleteAssessmentTarget(input: models.DeleteAssessmentTargetRequest): F[Unit]
  def describeAssessmentRuns(input: models.DescribeAssessmentRunsRequest): F[models.DescribeAssessmentRunsResponse]
  def previewAgents(input: models.PreviewAgentsRequest): F[models.PreviewAgentsResponse]
  def registerCrossAccountAccessRole(input: models.RegisterCrossAccountAccessRoleRequest): F[Unit]
  def describeAssessmentTargets(input: models.DescribeAssessmentTargetsRequest): F[models.DescribeAssessmentTargetsResponse]
  def deleteAssessmentRun(input: models.DeleteAssessmentRunRequest): F[Unit]
  def listAssessmentRunAgents(input: models.ListAssessmentRunAgentsRequest): F[models.ListAssessmentRunAgentsResponse]
  def getAssessmentReport(input: models.GetAssessmentReportRequest): F[models.GetAssessmentReportResponse]
  def describeCrossAccountAccessRole: F[models.DescribeCrossAccountAccessRoleResponse]
  def startAssessmentRun(input: models.StartAssessmentRunRequest): F[models.StartAssessmentRunResponse]
  def deleteAssessmentTemplate(input: models.DeleteAssessmentTemplateRequest): F[Unit]
  def createResourceGroup(input: models.CreateResourceGroupRequest): F[models.CreateResourceGroupResponse]
  def subscribeToEvent(input: models.SubscribeToEventRequest): F[Unit]
  def createAssessmentTarget(input: models.CreateAssessmentTargetRequest): F[models.CreateAssessmentTargetResponse]
  def stopAssessmentRun(input: models.StopAssessmentRunRequest): F[Unit]
  def listAssessmentTemplates(input: models.ListAssessmentTemplatesRequest): F[models.ListAssessmentTemplatesResponse]
}