package org.lyranthe.araethura.gamelift.models
import org.lyranthe.araethura.gamelift.models
final case class ListFleetsInput(buildId: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class ResolveAliasOutput(fleetId: scala.Option[java.lang.String] = None)
final case class ResolveAliasInput(aliasId: java.lang.String)
final case class GameSessionConnectionInfo(gameSessionArn: scala.Option[java.lang.String] = None, ipAddress: scala.Option[java.lang.String] = None, port: scala.Option[scala.Int] = None, matchedPlayerSessions: scala.Option[scala.List[models.MatchedPlayerSession]] = None)
final case class UpdateFleetPortSettingsOutput(fleetId: scala.Option[java.lang.String] = None)
final case class StartMatchmakingInput(configurationName: java.lang.String, players: scala.List[models.Player], ticketId: scala.Option[java.lang.String] = None)
case object StopMatchmakingOutput
final case class Player(playerId: scala.Option[java.lang.String] = None, playerAttributes: scala.Option[scala.collection.immutable.Map[java.lang.String, models.AttributeValue]] = None, team: scala.Option[java.lang.String] = None, latencyInMs: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.Int]] = None)
final case class DescribeRuntimeConfigurationInput(fleetId: java.lang.String)
final case class Alias(creationTime: scala.Option[java.time.Instant] = None, lastUpdatedTime: scala.Option[java.time.Instant] = None, routingStrategy: scala.Option[models.RoutingStrategy] = None, description: scala.Option[java.lang.String] = None, aliasId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, aliasArn: scala.Option[java.lang.String] = None)
final case class DescribeGameSessionsOutput(gameSessions: scala.Option[scala.List[models.GameSession]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class CreateMatchmakingRuleSetInput(name: java.lang.String, ruleSetBody: java.lang.String)
final case class RoutingStrategy(`type`: scala.Option[java.lang.String] = None, fleetId: scala.Option[java.lang.String] = None, message: scala.Option[java.lang.String] = None)
final case class AcceptMatchInput(ticketId: java.lang.String, playerIds: scala.List[java.lang.String], acceptanceType: java.lang.String)
case object DeleteGameSessionQueueOutput
case object AcceptMatchOutput
final case class DescribeFleetAttributesOutput(fleetAttributes: scala.Option[scala.List[models.FleetAttributes]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DeleteBuildInput(buildId: java.lang.String)
final case class DeleteVpcPeeringAuthorizationInput(gameLiftAwsAccountId: java.lang.String, peerVpcId: java.lang.String)
final case class ListBuildsInput(status: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UpdateAliasOutput(alias: scala.Option[models.Alias] = None)
final case class DesiredPlayerSession(playerId: scala.Option[java.lang.String] = None, playerData: scala.Option[java.lang.String] = None)
final case class UpdateGameSessionInput(gameSessionId: java.lang.String, protectionPolicy: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, maximumPlayerSessionCount: scala.Option[scala.Int] = None, playerSessionCreationPolicy: scala.Option[java.lang.String] = None)
final case class DescribeInstancesOutput(instances: scala.Option[scala.List[models.Instance]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeGameSessionPlacementInput(placementId: java.lang.String)
final case class RequestUploadCredentialsInput(buildId: java.lang.String)
final case class ListFleetsOutput(fleetIds: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UpdateFleetAttributesInput(fleetId: java.lang.String, newGameSessionProtectionPolicy: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, resourceCreationLimitPolicy: scala.Option[models.ResourceCreationLimitPolicy] = None, metricGroups: scala.Option[scala.List[java.lang.String]] = None)
final case class DeleteFleetInput(fleetId: java.lang.String)
final case class InvalidRequestException(message: scala.Option[java.lang.String] = None)
final case class DescribeGameSessionDetailsInput(statusFilter: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, aliasId: scala.Option[java.lang.String] = None, gameSessionId: scala.Option[java.lang.String] = None, fleetId: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
final case class IpPermission(fromPort: scala.Int, toPort: scala.Int, ipRange: java.lang.String, protocol: java.lang.String)
final case class CreateAliasOutput(alias: scala.Option[models.Alias] = None)
final case class ListAliasesOutput(aliases: scala.Option[scala.List[models.Alias]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeGameSessionQueuesInput(names: scala.Option[scala.List[java.lang.String]] = None, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class EC2InstanceCounts(terminating: scala.Option[scala.Int] = None, idle: scala.Option[scala.Int] = None, maximum: scala.Option[scala.Int] = None, active: scala.Option[scala.Int] = None, desired: scala.Option[scala.Int] = None, minimum: scala.Option[scala.Int] = None, pending: scala.Option[scala.Int] = None)
final case class MatchedPlayerSession(playerId: scala.Option[java.lang.String] = None, playerSessionId: scala.Option[java.lang.String] = None)
final case class AttributeValue(s: scala.Option[java.lang.String] = None, n: scala.Option[scala.Double] = None, sl: scala.Option[scala.List[java.lang.String]] = None, sdm: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.Double]] = None)
final case class ListBuildsOutput(builds: scala.Option[scala.List[models.Build]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UpdateGameSessionQueueInput(name: java.lang.String, timeoutInSeconds: scala.Option[scala.Int] = None, playerLatencyPolicies: scala.Option[scala.List[models.PlayerLatencyPolicy]] = None, destinations: scala.Option[scala.List[models.GameSessionQueueDestination]] = None)
final case class MatchmakingConfiguration(creationTime: scala.Option[java.time.Instant] = None, acceptanceTimeoutSeconds: scala.Option[scala.Int] = None, description: scala.Option[java.lang.String] = None, requestTimeoutSeconds: scala.Option[scala.Int] = None, customEventData: scala.Option[java.lang.String] = None, additionalPlayerCount: scala.Option[scala.Int] = None, gameProperties: scala.Option[scala.List[models.GameProperty]] = None, gameSessionData: scala.Option[java.lang.String] = None, acceptanceRequired: scala.Option[scala.Boolean] = None, gameSessionQueueArns: scala.Option[scala.List[java.lang.String]] = None, notificationTarget: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, ruleSetName: scala.Option[java.lang.String] = None)
final case class CreateMatchmakingConfigurationInput(requestTimeoutSeconds: scala.Int, acceptanceRequired: scala.Boolean, gameSessionQueueArns: scala.List[java.lang.String], name: java.lang.String, ruleSetName: java.lang.String, acceptanceTimeoutSeconds: scala.Option[scala.Int] = None, description: scala.Option[java.lang.String] = None, customEventData: scala.Option[java.lang.String] = None, additionalPlayerCount: scala.Option[scala.Int] = None, gameProperties: scala.Option[scala.List[models.GameProperty]] = None, gameSessionData: scala.Option[java.lang.String] = None, notificationTarget: scala.Option[java.lang.String] = None)
final case class PlacedPlayerSession(playerId: scala.Option[java.lang.String] = None, playerSessionId: scala.Option[java.lang.String] = None)
final case class VpcPeeringConnection(fleetId: scala.Option[java.lang.String] = None, ipV4CidrBlock: scala.Option[java.lang.String] = None, vpcPeeringConnectionId: scala.Option[java.lang.String] = None, peerVpcId: scala.Option[java.lang.String] = None, gameLiftVpcId: scala.Option[java.lang.String] = None, status: scala.Option[models.VpcPeeringConnectionStatus] = None)
final case class DeleteGameSessionQueueInput(name: java.lang.String)
final case class VpcPeeringConnectionStatus(code: scala.Option[java.lang.String] = None, message: scala.Option[java.lang.String] = None)
final case class DescribePlayerSessionsOutput(playerSessions: scala.Option[scala.List[models.PlayerSession]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class ValidateMatchmakingRuleSetOutput(valid: scala.Option[scala.Boolean] = None)
final case class UpdateFleetCapacityOutput(fleetId: scala.Option[java.lang.String] = None)
final case class DescribeFleetEventsOutput(events: scala.Option[scala.List[models.Event]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeFleetEventsInput(fleetId: java.lang.String, startTime: scala.Option[java.time.Instant] = None, endTime: scala.Option[java.time.Instant] = None, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class EC2InstanceLimit(ec2InstanceType: scala.Option[java.lang.String] = None, currentInstances: scala.Option[scala.Int] = None, instanceLimit: scala.Option[scala.Int] = None)
final case class CreateBuildInput(name: scala.Option[java.lang.String] = None, version: scala.Option[java.lang.String] = None, storageLocation: scala.Option[models.S3Location] = None, operatingSystem: scala.Option[java.lang.String] = None)
final case class DescribeFleetPortSettingsInput(fleetId: java.lang.String)
final case class GameProperty(key: java.lang.String, value: java.lang.String)
final case class GameSessionFullException(message: scala.Option[java.lang.String] = None)
final case class DescribeMatchmakingConfigurationsInput(names: scala.Option[scala.List[java.lang.String]] = None, ruleSetName: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InstanceAccess(instanceId: scala.Option[java.lang.String] = None, operatingSystem: scala.Option[java.lang.String] = None, credentials: scala.Option[models.InstanceCredentials] = None, fleetId: scala.Option[java.lang.String] = None, ipAddress: scala.Option[java.lang.String] = None)
final case class ResourceCreationLimitPolicy(newGameSessionsPerCreator: scala.Option[scala.Int] = None, policyPeriodInMinutes: scala.Option[scala.Int] = None)
final case class InternalServiceException(message: scala.Option[java.lang.String] = None)
final case class DescribeMatchmakingConfigurationsOutput(configurations: scala.Option[scala.List[models.MatchmakingConfiguration]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DeleteScalingPolicyInput(name: java.lang.String, fleetId: java.lang.String)
final case class CreateAliasInput(name: java.lang.String, routingStrategy: models.RoutingStrategy, description: scala.Option[java.lang.String] = None)
final case class RuntimeConfiguration(serverProcesses: scala.Option[scala.List[models.ServerProcess]] = None, maxConcurrentGameSessionActivations: scala.Option[scala.Int] = None, gameSessionActivationTimeoutSeconds: scala.Option[scala.Int] = None)
final case class CreateVpcPeeringAuthorizationInput(gameLiftAwsAccountId: java.lang.String, peerVpcId: java.lang.String)
final case class UnauthorizedException(message: scala.Option[java.lang.String] = None)
final case class PlayerLatency(playerId: scala.Option[java.lang.String] = None, regionIdentifier: scala.Option[java.lang.String] = None, latencyInMilliseconds: scala.Option[scala.Float] = None)
final case class DescribeMatchmakingRuleSetsInput(names: scala.Option[scala.List[java.lang.String]] = None, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class CreateFleetInput(name: java.lang.String, ec2InstanceType: java.lang.String, buildId: java.lang.String, ec2InboundPermissions: scala.Option[scala.List[models.IpPermission]] = None, newGameSessionProtectionPolicy: scala.Option[java.lang.String] = None, peerVpcAwsAccountId: scala.Option[java.lang.String] = None, peerVpcId: scala.Option[java.lang.String] = None, serverLaunchPath: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, serverLaunchParameters: scala.Option[java.lang.String] = None, resourceCreationLimitPolicy: scala.Option[models.ResourceCreationLimitPolicy] = None, runtimeConfiguration: scala.Option[models.RuntimeConfiguration] = None, metricGroups: scala.Option[scala.List[java.lang.String]] = None, logPaths: scala.Option[scala.List[java.lang.String]] = None)
final case class UpdateFleetPortSettingsInput(fleetId: java.lang.String, inboundPermissionAuthorizations: scala.Option[scala.List[models.IpPermission]] = None, inboundPermissionRevocations: scala.Option[scala.List[models.IpPermission]] = None)
final case class DescribeScalingPoliciesOutput(scalingPolicies: scala.Option[scala.List[models.ScalingPolicy]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeFleetUtilizationInput(fleetIds: scala.Option[scala.List[java.lang.String]] = None, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeEC2InstanceLimitsOutput(ec2InstanceLimits: scala.Option[scala.List[models.EC2InstanceLimit]] = None)
final case class StartGameSessionPlacementOutput(gameSessionPlacement: scala.Option[models.GameSessionPlacement] = None)
final case class DescribeBuildOutput(build: scala.Option[models.Build] = None)
final case class FleetAttributes(newGameSessionProtectionPolicy: scala.Option[java.lang.String] = None, creationTime: scala.Option[java.time.Instant] = None, terminationTime: scala.Option[java.time.Instant] = None, status: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, serverLaunchPath: scala.Option[java.lang.String] = None, serverLaunchParameters: scala.Option[java.lang.String] = None, operatingSystem: scala.Option[java.lang.String] = None, fleetArn: scala.Option[java.lang.String] = None, resourceCreationLimitPolicy: scala.Option[models.ResourceCreationLimitPolicy] = None, metricGroups: scala.Option[scala.List[java.lang.String]] = None, logPaths: scala.Option[scala.List[java.lang.String]] = None, fleetId: scala.Option[java.lang.String] = None, buildId: scala.Option[java.lang.String] = None)
final case class LimitExceededException(message: scala.Option[java.lang.String] = None)
final case class DescribeEC2InstanceLimitsInput(ec2InstanceType: scala.Option[java.lang.String] = None)
final case class FleetCapacity(fleetId: scala.Option[java.lang.String] = None, instanceType: scala.Option[java.lang.String] = None, instanceCounts: scala.Option[models.EC2InstanceCounts] = None)
final case class GameSession(creationTime: scala.Option[java.time.Instant] = None, terminationTime: scala.Option[java.time.Instant] = None, status: scala.Option[java.lang.String] = None, gameSessionId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, creatorId: scala.Option[java.lang.String] = None, port: scala.Option[scala.Int] = None, currentPlayerSessionCount: scala.Option[scala.Int] = None, maximumPlayerSessionCount: scala.Option[scala.Int] = None, playerSessionCreationPolicy: scala.Option[java.lang.String] = None, gameProperties: scala.Option[scala.List[models.GameProperty]] = None, gameSessionData: scala.Option[java.lang.String] = None, fleetId: scala.Option[java.lang.String] = None, ipAddress: scala.Option[java.lang.String] = None)
final case class InstanceCredentials(userName: scala.Option[java.lang.String] = None, secret: scala.Option[java.lang.String] = None)
final case class CreateMatchmakingRuleSetOutput(ruleSet: models.MatchmakingRuleSet)
final case class GameSessionQueue(name: scala.Option[java.lang.String] = None, gameSessionQueueArn: scala.Option[java.lang.String] = None, playerLatencyPolicies: scala.Option[scala.List[models.PlayerLatencyPolicy]] = None, timeoutInSeconds: scala.Option[scala.Int] = None, destinations: scala.Option[scala.List[models.GameSessionQueueDestination]] = None)
final case class GetInstanceAccessOutput(instanceAccess: scala.Option[models.InstanceAccess] = None)
final case class NotFoundException(message: scala.Option[java.lang.String] = None)
final case class UpdateFleetCapacityInput(fleetId: java.lang.String, desiredInstances: scala.Option[scala.Int] = None, minSize: scala.Option[scala.Int] = None, maxSize: scala.Option[scala.Int] = None)
final case class DescribeGameSessionDetailsOutput(gameSessionDetails: scala.Option[scala.List[models.GameSessionDetail]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class Build(creationTime: scala.Option[java.time.Instant] = None, name: scala.Option[java.lang.String] = None, version: scala.Option[java.lang.String] = None, operatingSystem: scala.Option[java.lang.String] = None, buildId: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, sizeOnDisk: scala.Option[scala.Long] = None)
final case class GetGameSessionLogUrlOutput(preSignedUrl: scala.Option[java.lang.String] = None)
final case class DescribeMatchmakingOutput(ticketList: scala.Option[scala.List[models.MatchmakingTicket]] = None)
final case class CreateVpcPeeringConnectionInput(fleetId: java.lang.String, peerVpcAwsAccountId: java.lang.String, peerVpcId: java.lang.String)
final case class S3Location(bucket: scala.Option[java.lang.String] = None, key: scala.Option[java.lang.String] = None, roleArn: scala.Option[java.lang.String] = None)
final case class DescribeAliasInput(aliasId: java.lang.String)
final case class DescribeMatchmakingRuleSetsOutput(ruleSets: scala.List[models.MatchmakingRuleSet], nextToken: scala.Option[java.lang.String] = None)
final case class UnsupportedRegionException(message: scala.Option[java.lang.String] = None)
final case class DescribeVpcPeeringConnectionsOutput(vpcPeeringConnections: scala.Option[scala.List[models.VpcPeeringConnection]] = None)
final case class UpdateBuildOutput(build: scala.Option[models.Build] = None)
final case class StartGameSessionPlacementInput(placementId: java.lang.String, gameSessionQueueName: java.lang.String, maximumPlayerSessionCount: scala.Int, gameSessionName: scala.Option[java.lang.String] = None, playerLatencies: scala.Option[scala.List[models.PlayerLatency]] = None, desiredPlayerSessions: scala.Option[scala.List[models.DesiredPlayerSession]] = None, gameProperties: scala.Option[scala.List[models.GameProperty]] = None, gameSessionData: scala.Option[java.lang.String] = None)
final case class GetInstanceAccessInput(fleetId: java.lang.String, instanceId: java.lang.String)
final case class CreateVpcPeeringAuthorizationOutput(vpcPeeringAuthorization: scala.Option[models.VpcPeeringAuthorization] = None)
final case class FleetCapacityExceededException(message: scala.Option[java.lang.String] = None)
final case class DescribeFleetUtilizationOutput(fleetUtilization: scala.Option[scala.List[models.FleetUtilization]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InvalidFleetStatusException(message: scala.Option[java.lang.String] = None)
final case class GetGameSessionLogUrlInput(gameSessionId: java.lang.String)
final case class ConflictException(message: scala.Option[java.lang.String] = None)
final case class DescribeFleetCapacityOutput(fleetCapacity: scala.Option[scala.List[models.FleetCapacity]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class GameSessionDetail(gameSession: scala.Option[models.GameSession] = None, protectionPolicy: scala.Option[java.lang.String] = None)
final case class DescribeBuildInput(buildId: java.lang.String)
final case class InvalidGameSessionStatusException(message: scala.Option[java.lang.String] = None)
final case class ListAliasesInput(routingStrategyType: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
final case class PutScalingPolicyOutput(name: scala.Option[java.lang.String] = None)
final case class StartMatchmakingOutput(matchmakingTicket: scala.Option[models.MatchmakingTicket] = None)
final case class UpdateRuntimeConfigurationInput(fleetId: java.lang.String, runtimeConfiguration: models.RuntimeConfiguration)
final case class DescribeGameSessionQueuesOutput(gameSessionQueues: scala.Option[scala.List[models.GameSessionQueue]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UpdateMatchmakingConfigurationOutput(configuration: scala.Option[models.MatchmakingConfiguration] = None)
final case class ValidateMatchmakingRuleSetInput(ruleSetBody: java.lang.String)
final case class CreatePlayerSessionOutput(playerSession: scala.Option[models.PlayerSession] = None)
final case class UpdateBuildInput(buildId: java.lang.String, name: scala.Option[java.lang.String] = None, version: scala.Option[java.lang.String] = None)
final case class GameSessionQueueDestination(destinationArn: scala.Option[java.lang.String] = None)
final case class Instance(instanceId: scala.Option[java.lang.String] = None, creationTime: scala.Option[java.time.Instant] = None, operatingSystem: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, `type`: scala.Option[java.lang.String] = None, fleetId: scala.Option[java.lang.String] = None, ipAddress: scala.Option[java.lang.String] = None)
final case class DescribeVpcPeeringConnectionsInput(fleetId: scala.Option[java.lang.String] = None)
final case class DeleteAliasInput(aliasId: java.lang.String)
final case class DescribeFleetAttributesInput(fleetIds: scala.Option[scala.List[java.lang.String]] = None, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UpdateRuntimeConfigurationOutput(runtimeConfiguration: scala.Option[models.RuntimeConfiguration] = None)
final case class Event(eventId: scala.Option[java.lang.String] = None, resourceId: scala.Option[java.lang.String] = None, preSignedLogUrl: scala.Option[java.lang.String] = None, eventCode: scala.Option[java.lang.String] = None, message: scala.Option[java.lang.String] = None, eventTime: scala.Option[java.time.Instant] = None)
final case class MatchmakingRuleSet(ruleSetBody: java.lang.String, ruleSetName: scala.Option[java.lang.String] = None, creationTime: scala.Option[java.time.Instant] = None)
final case class SearchGameSessionsInput(fleetId: scala.Option[java.lang.String] = None, aliasId: scala.Option[java.lang.String] = None, filterExpression: scala.Option[java.lang.String] = None, sortExpression: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
final case class PutScalingPolicyInput(comparisonOperator: java.lang.String, name: java.lang.String, metricName: java.lang.String, fleetId: java.lang.String, evaluationPeriods: scala.Int, scalingAdjustment: scala.Int, threshold: scala.Double, scalingAdjustmentType: java.lang.String)
final case class MatchmakingTicket(gameSessionConnectionInfo: scala.Option[models.GameSessionConnectionInfo] = None, statusReason: scala.Option[java.lang.String] = None, statusMessage: scala.Option[java.lang.String] = None, startTime: scala.Option[java.time.Instant] = None, endTime: scala.Option[java.time.Instant] = None, status: scala.Option[java.lang.String] = None, players: scala.Option[scala.List[models.Player]] = None, estimatedWaitTime: scala.Option[scala.Int] = None, ticketId: scala.Option[java.lang.String] = None, configurationName: scala.Option[java.lang.String] = None)
final case class DescribeGameSessionsInput(statusFilter: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, aliasId: scala.Option[java.lang.String] = None, gameSessionId: scala.Option[java.lang.String] = None, fleetId: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
final case class GameSessionPlacement(startTime: scala.Option[java.time.Instant] = None, endTime: scala.Option[java.time.Instant] = None, gameSessionName: scala.Option[java.lang.String] = None, gameSessionId: scala.Option[java.lang.String] = None, gameSessionArn: scala.Option[java.lang.String] = None, gameSessionRegion: scala.Option[java.lang.String] = None, playerLatencies: scala.Option[scala.List[models.PlayerLatency]] = None, placementId: scala.Option[java.lang.String] = None, gameSessionQueueName: scala.Option[java.lang.String] = None, port: scala.Option[scala.Int] = None, placedPlayerSessions: scala.Option[scala.List[models.PlacedPlayerSession]] = None, maximumPlayerSessionCount: scala.Option[scala.Int] = None, gameProperties: scala.Option[scala.List[models.GameProperty]] = None, gameSessionData: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, ipAddress: scala.Option[java.lang.String] = None)
final case class UpdateAliasInput(aliasId: java.lang.String, name: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, routingStrategy: scala.Option[models.RoutingStrategy] = None)
final case class DeleteMatchmakingConfigurationInput(name: java.lang.String)
final case class RequestUploadCredentialsOutput(uploadCredentials: scala.Option[models.AwsCredentials] = None, storageLocation: scala.Option[models.S3Location] = None)
final case class CreatePlayerSessionsInput(gameSessionId: java.lang.String, playerIds: scala.List[java.lang.String], playerDataMap: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class CreateGameSessionQueueInput(name: java.lang.String, timeoutInSeconds: scala.Option[scala.Int] = None, playerLatencyPolicies: scala.Option[scala.List[models.PlayerLatencyPolicy]] = None, destinations: scala.Option[scala.List[models.GameSessionQueueDestination]] = None)
final case class TerminalRoutingStrategyException(message: scala.Option[java.lang.String] = None)
case object DeleteVpcPeeringConnectionOutput
final case class UpdateGameSessionOutput(gameSession: scala.Option[models.GameSession] = None)
final case class ScalingPolicy(comparisonOperator: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, metricName: scala.Option[java.lang.String] = None, fleetId: scala.Option[java.lang.String] = None, evaluationPeriods: scala.Option[scala.Int] = None, status: scala.Option[java.lang.String] = None, scalingAdjustment: scala.Option[scala.Int] = None, threshold: scala.Option[scala.Double] = None, scalingAdjustmentType: scala.Option[java.lang.String] = None)
final case class DescribeRuntimeConfigurationOutput(runtimeConfiguration: scala.Option[models.RuntimeConfiguration] = None)
final case class DescribeAliasOutput(alias: scala.Option[models.Alias] = None)
final case class UpdateGameSessionQueueOutput(gameSessionQueue: scala.Option[models.GameSessionQueue] = None)
final case class FleetUtilization(fleetId: scala.Option[java.lang.String] = None, activeServerProcessCount: scala.Option[scala.Int] = None, activeGameSessionCount: scala.Option[scala.Int] = None, currentPlayerSessionCount: scala.Option[scala.Int] = None, maximumPlayerSessionCount: scala.Option[scala.Int] = None)
case object DescribeVpcPeeringAuthorizationsInput
final case class DescribeVpcPeeringAuthorizationsOutput(vpcPeeringAuthorizations: scala.Option[scala.List[models.VpcPeeringAuthorization]] = None)
final case class DescribeInstancesInput(fleetId: java.lang.String, instanceId: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class CreateMatchmakingConfigurationOutput(configuration: scala.Option[models.MatchmakingConfiguration] = None)
final case class CreateGameSessionQueueOutput(gameSessionQueue: scala.Option[models.GameSessionQueue] = None)
final case class PlayerSession(creationTime: scala.Option[java.time.Instant] = None, terminationTime: scala.Option[java.time.Instant] = None, playerSessionId: scala.Option[java.lang.String] = None, playerId: scala.Option[java.lang.String] = None, gameSessionId: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, port: scala.Option[scala.Int] = None, playerData: scala.Option[java.lang.String] = None, fleetId: scala.Option[java.lang.String] = None, ipAddress: scala.Option[java.lang.String] = None)
final case class UpdateMatchmakingConfigurationInput(name: java.lang.String, acceptanceTimeoutSeconds: scala.Option[scala.Int] = None, description: scala.Option[java.lang.String] = None, requestTimeoutSeconds: scala.Option[scala.Int] = None, customEventData: scala.Option[java.lang.String] = None, additionalPlayerCount: scala.Option[scala.Int] = None, gameProperties: scala.Option[scala.List[models.GameProperty]] = None, gameSessionData: scala.Option[java.lang.String] = None, acceptanceRequired: scala.Option[scala.Boolean] = None, gameSessionQueueArns: scala.Option[scala.List[java.lang.String]] = None, notificationTarget: scala.Option[java.lang.String] = None, ruleSetName: scala.Option[java.lang.String] = None)
final case class VpcPeeringAuthorization(gameLiftAwsAccountId: scala.Option[java.lang.String] = None, peerVpcAwsAccountId: scala.Option[java.lang.String] = None, peerVpcId: scala.Option[java.lang.String] = None, creationTime: scala.Option[java.time.Instant] = None, expirationTime: scala.Option[java.time.Instant] = None)
final case class DescribeScalingPoliciesInput(fleetId: java.lang.String, statusFilter: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class CreateGameSessionInput(maximumPlayerSessionCount: scala.Int, name: scala.Option[java.lang.String] = None, creatorId: scala.Option[java.lang.String] = None, aliasId: scala.Option[java.lang.String] = None, gameSessionId: scala.Option[java.lang.String] = None, idempotencyToken: scala.Option[java.lang.String] = None, gameProperties: scala.Option[scala.List[models.GameProperty]] = None, gameSessionData: scala.Option[java.lang.String] = None, fleetId: scala.Option[java.lang.String] = None)
final case class StopMatchmakingInput(ticketId: java.lang.String)
final case class DescribePlayerSessionsInput(gameSessionId: scala.Option[java.lang.String] = None, playerId: scala.Option[java.lang.String] = None, playerSessionStatusFilter: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, playerSessionId: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
final case class CreatePlayerSessionInput(gameSessionId: java.lang.String, playerId: java.lang.String, playerData: scala.Option[java.lang.String] = None)
final case class AwsCredentials(accessKeyId: scala.Option[java.lang.String] = None, secretAccessKey: scala.Option[java.lang.String] = None, sessionToken: scala.Option[java.lang.String] = None)
final case class DescribeFleetPortSettingsOutput(inboundPermissions: scala.Option[scala.List[models.IpPermission]] = None)
final case class IdempotentParameterMismatchException(message: scala.Option[java.lang.String] = None)
final case class CreateGameSessionOutput(gameSession: scala.Option[models.GameSession] = None)
case object CreateVpcPeeringConnectionOutput
final case class StopGameSessionPlacementInput(placementId: java.lang.String)
case object DeleteMatchmakingConfigurationOutput
final case class CreateFleetOutput(fleetAttributes: scala.Option[models.FleetAttributes] = None)
final case class PlayerLatencyPolicy(maximumIndividualPlayerLatencyMilliseconds: scala.Option[scala.Int] = None, policyDurationSeconds: scala.Option[scala.Int] = None)
final case class SearchGameSessionsOutput(gameSessions: scala.Option[scala.List[models.GameSession]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DeleteVpcPeeringConnectionInput(fleetId: java.lang.String, vpcPeeringConnectionId: java.lang.String)
final case class DescribeFleetCapacityInput(fleetIds: scala.Option[scala.List[java.lang.String]] = None, limit: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
case object DeleteVpcPeeringAuthorizationOutput
final case class UpdateFleetAttributesOutput(fleetId: scala.Option[java.lang.String] = None)
final case class DescribeGameSessionPlacementOutput(gameSessionPlacement: scala.Option[models.GameSessionPlacement] = None)
final case class ServerProcess(launchPath: java.lang.String, concurrentExecutions: scala.Int, parameters: scala.Option[java.lang.String] = None)
final case class DescribeMatchmakingInput(ticketIds: scala.List[java.lang.String])
final case class StopGameSessionPlacementOutput(gameSessionPlacement: scala.Option[models.GameSessionPlacement] = None)
final case class CreateBuildOutput(build: scala.Option[models.Build] = None, uploadCredentials: scala.Option[models.AwsCredentials] = None, storageLocation: scala.Option[models.S3Location] = None)
final case class CreatePlayerSessionsOutput(playerSessions: scala.Option[scala.List[models.PlayerSession]] = None)