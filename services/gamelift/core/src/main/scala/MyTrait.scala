package org.lyranthe.araethura.gamelift
trait Amazongamelift[F[_]] {
  def describeVpcPeeringAuthorizations: F[models.DescribeVpcPeeringAuthorizationsOutput]
  def createPlayerSession(input: models.CreatePlayerSessionInput): F[models.CreatePlayerSessionOutput]
  def updateGameSession(input: models.UpdateGameSessionInput): F[models.UpdateGameSessionOutput]
  def describeGameSessionDetails(input: models.DescribeGameSessionDetailsInput): F[models.DescribeGameSessionDetailsOutput]
  def stopGameSessionPlacement(input: models.StopGameSessionPlacementInput): F[models.StopGameSessionPlacementOutput]
  def validateMatchmakingRuleSet(input: models.ValidateMatchmakingRuleSetInput): F[models.ValidateMatchmakingRuleSetOutput]
  def listAliases(input: models.ListAliasesInput): F[models.ListAliasesOutput]
  def getGameSessionLogUrl(input: models.GetGameSessionLogUrlInput): F[models.GetGameSessionLogUrlOutput]
  def describeMatchmaking(input: models.DescribeMatchmakingInput): F[models.DescribeMatchmakingOutput]
  def searchGameSessions(input: models.SearchGameSessionsInput): F[models.SearchGameSessionsOutput]
  def describeRuntimeConfiguration(input: models.DescribeRuntimeConfigurationInput): F[models.DescribeRuntimeConfigurationOutput]
  def stopMatchmaking(input: models.StopMatchmakingInput): F[scala.Unit]
  def updateFleetCapacity(input: models.UpdateFleetCapacityInput): F[models.UpdateFleetCapacityOutput]
  def describeMatchmakingRuleSets(input: models.DescribeMatchmakingRuleSetsInput): F[models.DescribeMatchmakingRuleSetsOutput]
  def describeScalingPolicies(input: models.DescribeScalingPoliciesInput): F[models.DescribeScalingPoliciesOutput]
  def createAlias(input: models.CreateAliasInput): F[models.CreateAliasOutput]
  def createBuild(input: models.CreateBuildInput): F[models.CreateBuildOutput]
  def createVpcPeeringConnection(input: models.CreateVpcPeeringConnectionInput): F[scala.Unit]
  def describeBuild(input: models.DescribeBuildInput): F[models.DescribeBuildOutput]
  def createGameSession(input: models.CreateGameSessionInput): F[models.CreateGameSessionOutput]
  def createVpcPeeringAuthorization(input: models.CreateVpcPeeringAuthorizationInput): F[models.CreateVpcPeeringAuthorizationOutput]
  def describeFleetPortSettings(input: models.DescribeFleetPortSettingsInput): F[models.DescribeFleetPortSettingsOutput]
  def deleteMatchmakingConfiguration(input: models.DeleteMatchmakingConfigurationInput): F[scala.Unit]
  def createMatchmakingRuleSet(input: models.CreateMatchmakingRuleSetInput): F[models.CreateMatchmakingRuleSetOutput]
  def describeAlias(input: models.DescribeAliasInput): F[models.DescribeAliasOutput]
  def deleteVpcPeeringAuthorization(input: models.DeleteVpcPeeringAuthorizationInput): F[scala.Unit]
  def updateBuild(input: models.UpdateBuildInput): F[models.UpdateBuildOutput]
  def describeMatchmakingConfigurations(input: models.DescribeMatchmakingConfigurationsInput): F[models.DescribeMatchmakingConfigurationsOutput]
  def describeFleetAttributes(input: models.DescribeFleetAttributesInput): F[models.DescribeFleetAttributesOutput]
  def deleteAlias(input: models.DeleteAliasInput): F[Unit]
  def createPlayerSessions(input: models.CreatePlayerSessionsInput): F[models.CreatePlayerSessionsOutput]
  def updateFleetPortSettings(input: models.UpdateFleetPortSettingsInput): F[models.UpdateFleetPortSettingsOutput]
  def describeGameSessionQueues(input: models.DescribeGameSessionQueuesInput): F[models.DescribeGameSessionQueuesOutput]
  def updateMatchmakingConfiguration(input: models.UpdateMatchmakingConfigurationInput): F[models.UpdateMatchmakingConfigurationOutput]
  def describeEC2InstanceLimits(input: models.DescribeEC2InstanceLimitsInput): F[models.DescribeEC2InstanceLimitsOutput]
  def updateGameSessionQueue(input: models.UpdateGameSessionQueueInput): F[models.UpdateGameSessionQueueOutput]
  def describeInstances(input: models.DescribeInstancesInput): F[models.DescribeInstancesOutput]
  def resolveAlias(input: models.ResolveAliasInput): F[models.ResolveAliasOutput]
  def updateFleetAttributes(input: models.UpdateFleetAttributesInput): F[models.UpdateFleetAttributesOutput]
  def getInstanceAccess(input: models.GetInstanceAccessInput): F[models.GetInstanceAccessOutput]
  def updateAlias(input: models.UpdateAliasInput): F[models.UpdateAliasOutput]
  def listBuilds(input: models.ListBuildsInput): F[models.ListBuildsOutput]
  def describeGameSessionPlacement(input: models.DescribeGameSessionPlacementInput): F[models.DescribeGameSessionPlacementOutput]
  def updateRuntimeConfiguration(input: models.UpdateRuntimeConfigurationInput): F[models.UpdateRuntimeConfigurationOutput]
  def deleteScalingPolicy(input: models.DeleteScalingPolicyInput): F[Unit]
  def describePlayerSessions(input: models.DescribePlayerSessionsInput): F[models.DescribePlayerSessionsOutput]
  def deleteVpcPeeringConnection(input: models.DeleteVpcPeeringConnectionInput): F[scala.Unit]
  def deleteGameSessionQueue(input: models.DeleteGameSessionQueueInput): F[scala.Unit]
  def describeVpcPeeringConnections(input: models.DescribeVpcPeeringConnectionsInput): F[models.DescribeVpcPeeringConnectionsOutput]
  def createMatchmakingConfiguration(input: models.CreateMatchmakingConfigurationInput): F[models.CreateMatchmakingConfigurationOutput]
  def acceptMatch(input: models.AcceptMatchInput): F[scala.Unit]
  def putScalingPolicy(input: models.PutScalingPolicyInput): F[models.PutScalingPolicyOutput]
  def describeFleetEvents(input: models.DescribeFleetEventsInput): F[models.DescribeFleetEventsOutput]
  def listFleets(input: models.ListFleetsInput): F[models.ListFleetsOutput]
  def describeFleetCapacity(input: models.DescribeFleetCapacityInput): F[models.DescribeFleetCapacityOutput]
  def describeFleetUtilization(input: models.DescribeFleetUtilizationInput): F[models.DescribeFleetUtilizationOutput]
  def deleteBuild(input: models.DeleteBuildInput): F[Unit]
  def deleteFleet(input: models.DeleteFleetInput): F[Unit]
  def createGameSessionQueue(input: models.CreateGameSessionQueueInput): F[models.CreateGameSessionQueueOutput]
  def requestUploadCredentials(input: models.RequestUploadCredentialsInput): F[models.RequestUploadCredentialsOutput]
  def describeGameSessions(input: models.DescribeGameSessionsInput): F[models.DescribeGameSessionsOutput]
  def startMatchmaking(input: models.StartMatchmakingInput): F[models.StartMatchmakingOutput]
  def startGameSessionPlacement(input: models.StartGameSessionPlacementInput): F[models.StartGameSessionPlacementOutput]
  def createFleet(input: models.CreateFleetInput): F[models.CreateFleetOutput]
}