package org.lyranthe.araethura.dynamodbstreams.models
import org.lyranthe.araethura.dynamodbstreams.models
final case class KeySchemaElement(attributeName: java.lang.String, keyType: java.lang.String)
final case class ListStreamsInput(tableName: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None, exclusiveStartStreamArn: scala.Option[java.lang.String] = None)
final case class GetRecordsInput(shardIterator: java.lang.String, limit: scala.Option[scala.Int] = None)
final case class LimitExceededException(message: scala.Option[java.lang.String] = None)
final case class AttributeValue(bs: scala.Option[scala.List[scala.Array[scala.Byte]]] = None, ss: scala.Option[scala.List[java.lang.String]] = None, m: scala.Option[scala.collection.immutable.Map[java.lang.String, models.AttributeValue]] = None, `null`: scala.Option[scala.Boolean] = None, b: scala.Option[scala.Array[scala.Byte]] = None, s: scala.Option[java.lang.String] = None, n: scala.Option[java.lang.String] = None, ns: scala.Option[scala.List[java.lang.String]] = None, bool: scala.Option[scala.Boolean] = None, l: scala.Option[scala.List[models.AttributeValue]] = None)
final case class SequenceNumberRange(startingSequenceNumber: scala.Option[java.lang.String] = None, endingSequenceNumber: scala.Option[java.lang.String] = None)
final case class Stream(streamArn: scala.Option[java.lang.String] = None, tableName: scala.Option[java.lang.String] = None, streamLabel: scala.Option[java.lang.String] = None)
final case class Record(eventID: scala.Option[java.lang.String] = None, eventVersion: scala.Option[java.lang.String] = None, eventSource: scala.Option[java.lang.String] = None, awsRegion: scala.Option[java.lang.String] = None, eventName: scala.Option[java.lang.String] = None, dynamodb: scala.Option[models.StreamRecord] = None, userIdentity: scala.Option[models.Identity] = None)
final case class GetShardIteratorOutput(shardIterator: scala.Option[java.lang.String] = None)
final case class StreamRecord(keys: scala.Option[scala.collection.immutable.Map[java.lang.String, models.AttributeValue]] = None, newImage: scala.Option[scala.collection.immutable.Map[java.lang.String, models.AttributeValue]] = None, oldImage: scala.Option[scala.collection.immutable.Map[java.lang.String, models.AttributeValue]] = None, sequenceNumber: scala.Option[java.lang.String] = None, streamViewType: scala.Option[java.lang.String] = None, sizeBytes: scala.Option[scala.Long] = None, approximateCreationDateTime: scala.Option[java.time.Instant] = None)
final case class Identity(principalId: scala.Option[java.lang.String] = None, `type`: scala.Option[java.lang.String] = None)
final case class DescribeStreamInput(streamArn: java.lang.String, limit: scala.Option[scala.Int] = None, exclusiveStartShardId: scala.Option[java.lang.String] = None)
final case class Shard(shardId: scala.Option[java.lang.String] = None, parentShardId: scala.Option[java.lang.String] = None, sequenceNumberRange: scala.Option[models.SequenceNumberRange] = None)
final case class StreamDescription(streamStatus: scala.Option[java.lang.String] = None, tableName: scala.Option[java.lang.String] = None, streamLabel: scala.Option[java.lang.String] = None, streamArn: scala.Option[java.lang.String] = None, streamViewType: scala.Option[java.lang.String] = None, lastEvaluatedShardId: scala.Option[java.lang.String] = None, keySchema: scala.Option[scala.List[models.KeySchemaElement]] = None, shards: scala.Option[scala.List[models.Shard]] = None, creationRequestDateTime: scala.Option[java.time.Instant] = None)
final case class TrimmedDataAccessException(message: scala.Option[java.lang.String] = None)
final case class GetRecordsOutput(records: scala.Option[scala.List[models.Record]] = None, nextShardIterator: scala.Option[java.lang.String] = None)
final case class ResourceNotFoundException(message: scala.Option[java.lang.String] = None)
final case class DescribeStreamOutput(streamDescription: scala.Option[models.StreamDescription] = None)
final case class GetShardIteratorInput(streamArn: java.lang.String, shardId: java.lang.String, shardIteratorType: java.lang.String, sequenceNumber: scala.Option[java.lang.String] = None)
final case class ListStreamsOutput(streams: scala.Option[scala.List[models.Stream]] = None, lastEvaluatedStreamArn: scala.Option[java.lang.String] = None)
final case class InternalServerError(message: scala.Option[java.lang.String] = None)
final case class ExpiredIteratorException(message: scala.Option[java.lang.String] = None)