package org.lyranthe.araethura.directconnect
trait Amazondirectconnect[F[_]] {
  def describeVirtualGateways: F[models.VirtualGateways]
  def deleteBGPPeer(input: models.DeleteBGPPeerRequest): F[models.DeleteBGPPeerResponse]
  def describeDirectConnectGateways(input: models.DescribeDirectConnectGatewaysRequest): F[models.DescribeDirectConnectGatewaysResult]
  def allocatePrivateVirtualInterface(input: models.AllocatePrivateVirtualInterfaceRequest): F[models.VirtualInterface]
  def deleteConnection(input: models.DeleteConnectionRequest): F[models.Connection]
  def deleteDirectConnectGateway(input: models.DeleteDirectConnectGatewayRequest): F[models.DeleteDirectConnectGatewayResult]
  def confirmConnection(input: models.ConfirmConnectionRequest): F[models.ConfirmConnectionResponse]
  def describeDirectConnectGatewayAssociations(input: models.DescribeDirectConnectGatewayAssociationsRequest): F[models.DescribeDirectConnectGatewayAssociationsResult]
  def associateVirtualInterface(input: models.AssociateVirtualInterfaceRequest): F[models.VirtualInterface]
  def disassociateConnectionFromLag(input: models.DisassociateConnectionFromLagRequest): F[models.Connection]
  def confirmPublicVirtualInterface(input: models.ConfirmPublicVirtualInterfaceRequest): F[models.ConfirmPublicVirtualInterfaceResponse]
  def createDirectConnectGateway(input: models.CreateDirectConnectGatewayRequest): F[models.CreateDirectConnectGatewayResult]
  def untagResource(input: models.UntagResourceRequest): F[scala.Unit]
  def createInterconnect(input: models.CreateInterconnectRequest): F[models.Interconnect]
  def createPrivateVirtualInterface(input: models.CreatePrivateVirtualInterfaceRequest): F[models.VirtualInterface]
  def describeConnections(input: models.DescribeConnectionsRequest): F[models.Connections]
  def describeLags(input: models.DescribeLagsRequest): F[models.Lags]
  def describeConnectionsOnInterconnect(input: models.DescribeConnectionsOnInterconnectRequest): F[models.Connections]
  def describeInterconnects(input: models.DescribeInterconnectsRequest): F[models.Interconnects]
  def describeLocations: F[models.Locations]
  def describeConnectionLoa(input: models.DescribeConnectionLoaRequest): F[models.DescribeConnectionLoaResponse]
  def deleteVirtualInterface(input: models.DeleteVirtualInterfaceRequest): F[models.DeleteVirtualInterfaceResponse]
  def allocatePublicVirtualInterface(input: models.AllocatePublicVirtualInterfaceRequest): F[models.VirtualInterface]
  def confirmPrivateVirtualInterface(input: models.ConfirmPrivateVirtualInterfaceRequest): F[models.ConfirmPrivateVirtualInterfaceResponse]
  def deleteDirectConnectGatewayAssociation(input: models.DeleteDirectConnectGatewayAssociationRequest): F[models.DeleteDirectConnectGatewayAssociationResult]
  def describeDirectConnectGatewayAttachments(input: models.DescribeDirectConnectGatewayAttachmentsRequest): F[models.DescribeDirectConnectGatewayAttachmentsResult]
  def createConnection(input: models.CreateConnectionRequest): F[models.Connection]
  def describeHostedConnections(input: models.DescribeHostedConnectionsRequest): F[models.Connections]
  def allocateHostedConnection(input: models.AllocateHostedConnectionRequest): F[models.Connection]
  def createPublicVirtualInterface(input: models.CreatePublicVirtualInterfaceRequest): F[models.VirtualInterface]
  def deleteInterconnect(input: models.DeleteInterconnectRequest): F[models.DeleteInterconnectResponse]
  def createBGPPeer(input: models.CreateBGPPeerRequest): F[models.CreateBGPPeerResponse]
  def describeVirtualInterfaces(input: models.DescribeVirtualInterfacesRequest): F[models.VirtualInterfaces]
  def createDirectConnectGatewayAssociation(input: models.CreateDirectConnectGatewayAssociationRequest): F[models.CreateDirectConnectGatewayAssociationResult]
  def deleteLag(input: models.DeleteLagRequest): F[models.Lag]
  def describeInterconnectLoa(input: models.DescribeInterconnectLoaRequest): F[models.DescribeInterconnectLoaResponse]
  def associateHostedConnection(input: models.AssociateHostedConnectionRequest): F[models.Connection]
  def createLag(input: models.CreateLagRequest): F[models.Lag]
  def allocateConnectionOnInterconnect(input: models.AllocateConnectionOnInterconnectRequest): F[models.Connection]
  def describeTags(input: models.DescribeTagsRequest): F[models.DescribeTagsResponse]
  def updateLag(input: models.UpdateLagRequest): F[models.Lag]
  def tagResource(input: models.TagResourceRequest): F[scala.Unit]
  def describeLoa(input: models.DescribeLoaRequest): F[models.Loa]
  def associateConnectionWithLag(input: models.AssociateConnectionWithLagRequest): F[models.Connection]
}