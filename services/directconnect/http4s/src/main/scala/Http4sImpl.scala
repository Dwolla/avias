package org.lyranthe.araethura.directconnect.http4s
import org.http4s.Method._
import org.lyranthe.araethura.directconnect.circe._
import org.lyranthe.araethura.directconnect.models
class AmazondirectconnectClient[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: org.lyranthe.araethura.common.AwsData[F]) extends org.lyranthe.araethura.directconnect.Amazondirectconnect[F] {
  private[this] final val ServiceType: String = "directconnect"
  private[this] final val ServiceAndPrefix: Option[String] = Some("OvertureService")
  override def describeVirtualGateways: F[models.VirtualGateways] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequestWithoutBody[F, models.VirtualGateways](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVirtualGateways", POST, "/")
  override def deleteBGPPeer(input: models.DeleteBGPPeerRequest): F[models.DeleteBGPPeerResponse] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DeleteBGPPeerResponse, models.DeleteBGPPeerRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteBGPPeer", POST, "/", input)
  override def describeDirectConnectGateways(input: models.DescribeDirectConnectGatewaysRequest): F[models.DescribeDirectConnectGatewaysResult] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DescribeDirectConnectGatewaysResult, models.DescribeDirectConnectGatewaysRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeDirectConnectGateways", POST, "/", input)
  override def allocatePrivateVirtualInterface(input: models.AllocatePrivateVirtualInterfaceRequest): F[models.VirtualInterface] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.VirtualInterface, models.AllocatePrivateVirtualInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "AllocatePrivateVirtualInterface", POST, "/", input)
  override def deleteConnection(input: models.DeleteConnectionRequest): F[models.Connection] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Connection, models.DeleteConnectionRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteConnection", POST, "/", input)
  override def deleteDirectConnectGateway(input: models.DeleteDirectConnectGatewayRequest): F[models.DeleteDirectConnectGatewayResult] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DeleteDirectConnectGatewayResult, models.DeleteDirectConnectGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteDirectConnectGateway", POST, "/", input)
  override def confirmConnection(input: models.ConfirmConnectionRequest): F[models.ConfirmConnectionResponse] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.ConfirmConnectionResponse, models.ConfirmConnectionRequest](client, awsData, ServiceType, ServiceAndPrefix, "ConfirmConnection", POST, "/", input)
  override def describeDirectConnectGatewayAssociations(input: models.DescribeDirectConnectGatewayAssociationsRequest): F[models.DescribeDirectConnectGatewayAssociationsResult] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DescribeDirectConnectGatewayAssociationsResult, models.DescribeDirectConnectGatewayAssociationsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeDirectConnectGatewayAssociations", POST, "/", input)
  override def associateVirtualInterface(input: models.AssociateVirtualInterfaceRequest): F[models.VirtualInterface] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.VirtualInterface, models.AssociateVirtualInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateVirtualInterface", POST, "/", input)
  override def disassociateConnectionFromLag(input: models.DisassociateConnectionFromLagRequest): F[models.Connection] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Connection, models.DisassociateConnectionFromLagRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisassociateConnectionFromLag", POST, "/", input)
  override def confirmPublicVirtualInterface(input: models.ConfirmPublicVirtualInterfaceRequest): F[models.ConfirmPublicVirtualInterfaceResponse] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.ConfirmPublicVirtualInterfaceResponse, models.ConfirmPublicVirtualInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "ConfirmPublicVirtualInterface", POST, "/", input)
  override def createDirectConnectGateway(input: models.CreateDirectConnectGatewayRequest): F[models.CreateDirectConnectGatewayResult] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.CreateDirectConnectGatewayResult, models.CreateDirectConnectGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDirectConnectGateway", POST, "/", input)
  override def untagResource(input: models.UntagResourceRequest): F[scala.Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, scala.Unit, models.UntagResourceRequest](client, awsData, ServiceType, ServiceAndPrefix, "UntagResource", POST, "/", input)
  override def createInterconnect(input: models.CreateInterconnectRequest): F[models.Interconnect] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Interconnect, models.CreateInterconnectRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateInterconnect", POST, "/", input)
  override def createPrivateVirtualInterface(input: models.CreatePrivateVirtualInterfaceRequest): F[models.VirtualInterface] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.VirtualInterface, models.CreatePrivateVirtualInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreatePrivateVirtualInterface", POST, "/", input)
  override def describeConnections(input: models.DescribeConnectionsRequest): F[models.Connections] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Connections, models.DescribeConnectionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeConnections", POST, "/", input)
  override def describeLags(input: models.DescribeLagsRequest): F[models.Lags] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Lags, models.DescribeLagsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeLags", POST, "/", input)
  override def describeConnectionsOnInterconnect(input: models.DescribeConnectionsOnInterconnectRequest): F[models.Connections] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Connections, models.DescribeConnectionsOnInterconnectRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeConnectionsOnInterconnect", POST, "/", input)
  override def describeInterconnects(input: models.DescribeInterconnectsRequest): F[models.Interconnects] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Interconnects, models.DescribeInterconnectsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeInterconnects", POST, "/", input)
  override def describeLocations: F[models.Locations] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequestWithoutBody[F, models.Locations](client, awsData, ServiceType, ServiceAndPrefix, "DescribeLocations", POST, "/")
  override def describeConnectionLoa(input: models.DescribeConnectionLoaRequest): F[models.DescribeConnectionLoaResponse] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DescribeConnectionLoaResponse, models.DescribeConnectionLoaRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeConnectionLoa", POST, "/", input)
  override def deleteVirtualInterface(input: models.DeleteVirtualInterfaceRequest): F[models.DeleteVirtualInterfaceResponse] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DeleteVirtualInterfaceResponse, models.DeleteVirtualInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteVirtualInterface", POST, "/", input)
  override def allocatePublicVirtualInterface(input: models.AllocatePublicVirtualInterfaceRequest): F[models.VirtualInterface] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.VirtualInterface, models.AllocatePublicVirtualInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "AllocatePublicVirtualInterface", POST, "/", input)
  override def confirmPrivateVirtualInterface(input: models.ConfirmPrivateVirtualInterfaceRequest): F[models.ConfirmPrivateVirtualInterfaceResponse] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.ConfirmPrivateVirtualInterfaceResponse, models.ConfirmPrivateVirtualInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "ConfirmPrivateVirtualInterface", POST, "/", input)
  override def deleteDirectConnectGatewayAssociation(input: models.DeleteDirectConnectGatewayAssociationRequest): F[models.DeleteDirectConnectGatewayAssociationResult] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DeleteDirectConnectGatewayAssociationResult, models.DeleteDirectConnectGatewayAssociationRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteDirectConnectGatewayAssociation", POST, "/", input)
  override def describeDirectConnectGatewayAttachments(input: models.DescribeDirectConnectGatewayAttachmentsRequest): F[models.DescribeDirectConnectGatewayAttachmentsResult] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DescribeDirectConnectGatewayAttachmentsResult, models.DescribeDirectConnectGatewayAttachmentsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeDirectConnectGatewayAttachments", POST, "/", input)
  override def createConnection(input: models.CreateConnectionRequest): F[models.Connection] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Connection, models.CreateConnectionRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateConnection", POST, "/", input)
  override def describeHostedConnections(input: models.DescribeHostedConnectionsRequest): F[models.Connections] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Connections, models.DescribeHostedConnectionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeHostedConnections", POST, "/", input)
  override def allocateHostedConnection(input: models.AllocateHostedConnectionRequest): F[models.Connection] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Connection, models.AllocateHostedConnectionRequest](client, awsData, ServiceType, ServiceAndPrefix, "AllocateHostedConnection", POST, "/", input)
  override def createPublicVirtualInterface(input: models.CreatePublicVirtualInterfaceRequest): F[models.VirtualInterface] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.VirtualInterface, models.CreatePublicVirtualInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreatePublicVirtualInterface", POST, "/", input)
  override def deleteInterconnect(input: models.DeleteInterconnectRequest): F[models.DeleteInterconnectResponse] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DeleteInterconnectResponse, models.DeleteInterconnectRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteInterconnect", POST, "/", input)
  override def createBGPPeer(input: models.CreateBGPPeerRequest): F[models.CreateBGPPeerResponse] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.CreateBGPPeerResponse, models.CreateBGPPeerRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateBGPPeer", POST, "/", input)
  override def describeVirtualInterfaces(input: models.DescribeVirtualInterfacesRequest): F[models.VirtualInterfaces] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.VirtualInterfaces, models.DescribeVirtualInterfacesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVirtualInterfaces", POST, "/", input)
  override def createDirectConnectGatewayAssociation(input: models.CreateDirectConnectGatewayAssociationRequest): F[models.CreateDirectConnectGatewayAssociationResult] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.CreateDirectConnectGatewayAssociationResult, models.CreateDirectConnectGatewayAssociationRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDirectConnectGatewayAssociation", POST, "/", input)
  override def deleteLag(input: models.DeleteLagRequest): F[models.Lag] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Lag, models.DeleteLagRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteLag", POST, "/", input)
  override def describeInterconnectLoa(input: models.DescribeInterconnectLoaRequest): F[models.DescribeInterconnectLoaResponse] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DescribeInterconnectLoaResponse, models.DescribeInterconnectLoaRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeInterconnectLoa", POST, "/", input)
  override def associateHostedConnection(input: models.AssociateHostedConnectionRequest): F[models.Connection] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Connection, models.AssociateHostedConnectionRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateHostedConnection", POST, "/", input)
  override def createLag(input: models.CreateLagRequest): F[models.Lag] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Lag, models.CreateLagRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateLag", POST, "/", input)
  override def allocateConnectionOnInterconnect(input: models.AllocateConnectionOnInterconnectRequest): F[models.Connection] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Connection, models.AllocateConnectionOnInterconnectRequest](client, awsData, ServiceType, ServiceAndPrefix, "AllocateConnectionOnInterconnect", POST, "/", input)
  override def describeTags(input: models.DescribeTagsRequest): F[models.DescribeTagsResponse] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DescribeTagsResponse, models.DescribeTagsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeTags", POST, "/", input)
  override def updateLag(input: models.UpdateLagRequest): F[models.Lag] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Lag, models.UpdateLagRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateLag", POST, "/", input)
  override def tagResource(input: models.TagResourceRequest): F[scala.Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, scala.Unit, models.TagResourceRequest](client, awsData, ServiceType, ServiceAndPrefix, "TagResource", POST, "/", input)
  override def describeLoa(input: models.DescribeLoaRequest): F[models.Loa] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Loa, models.DescribeLoaRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeLoa", POST, "/", input)
  override def associateConnectionWithLag(input: models.AssociateConnectionWithLagRequest): F[models.Connection] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Connection, models.AssociateConnectionWithLagRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateConnectionWithLag", POST, "/", input)
}