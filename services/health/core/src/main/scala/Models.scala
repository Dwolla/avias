package org.lyranthe.araethura.health.models
import org.lyranthe.araethura.health.models
final case class EventAggregate(aggregateValue: scala.Option[java.lang.String] = None, count: scala.Option[scala.Int] = None)
final case class DescribeAffectedEntitiesRequest(filter: models.EntityFilter, locale: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class EventDescription(latestDescription: scala.Option[java.lang.String] = None)
final case class DateTimeRange(from: scala.Option[java.time.Instant] = None, to: scala.Option[java.time.Instant] = None)
final case class DescribeEventDetailsResponse(successfulSet: scala.Option[scala.List[models.EventDetails]] = None, failedSet: scala.Option[scala.List[models.EventDetailsErrorItem]] = None)
final case class EventTypeFilter(eventTypeCodes: scala.Option[scala.List[java.lang.String]] = None, services: scala.Option[scala.List[java.lang.String]] = None, eventTypeCategories: scala.Option[scala.List[java.lang.String]] = None)
final case class DescribeEventAggregatesRequest(aggregateField: java.lang.String, filter: scala.Option[models.EventFilter] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class EntityAggregate(eventArn: scala.Option[java.lang.String] = None, count: scala.Option[scala.Int] = None)
final case class DescribeEventTypesRequest(filter: scala.Option[models.EventTypeFilter] = None, locale: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class EventType(service: scala.Option[java.lang.String] = None, code: scala.Option[java.lang.String] = None, category: scala.Option[java.lang.String] = None)
final case class DescribeEventAggregatesResponse(eventAggregates: scala.Option[scala.List[models.EventAggregate]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class EntityFilter(eventArns: scala.List[java.lang.String], entityArns: scala.Option[scala.List[java.lang.String]] = None, entityValues: scala.Option[scala.List[java.lang.String]] = None, lastUpdatedTimes: scala.Option[scala.List[models.DateTimeRange]] = None, tags: scala.Option[scala.List[scala.collection.immutable.Map[java.lang.String, java.lang.String]]] = None, statusCodes: scala.Option[scala.List[java.lang.String]] = None)
final case class DescribeEntityAggregatesRequest(eventArns: scala.Option[scala.List[java.lang.String]] = None)
final case class DescribeEventsResponse(events: scala.Option[scala.List[models.Event]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeEventsRequest(filter: scala.Option[models.EventFilter] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None, locale: scala.Option[java.lang.String] = None)
final case class DescribeEventDetailsRequest(eventArns: scala.List[java.lang.String], locale: scala.Option[java.lang.String] = None)
final case class DescribeEntityAggregatesResponse(entityAggregates: scala.Option[scala.List[models.EntityAggregate]] = None)
final case class EventFilter(entityArns: scala.Option[scala.List[java.lang.String]] = None, availabilityZones: scala.Option[scala.List[java.lang.String]] = None, entityValues: scala.Option[scala.List[java.lang.String]] = None, regions: scala.Option[scala.List[java.lang.String]] = None, startTimes: scala.Option[scala.List[models.DateTimeRange]] = None, endTimes: scala.Option[scala.List[models.DateTimeRange]] = None, lastUpdatedTimes: scala.Option[scala.List[models.DateTimeRange]] = None, eventStatusCodes: scala.Option[scala.List[java.lang.String]] = None, eventTypeCodes: scala.Option[scala.List[java.lang.String]] = None, tags: scala.Option[scala.List[scala.collection.immutable.Map[java.lang.String, java.lang.String]]] = None, eventArns: scala.Option[scala.List[java.lang.String]] = None, eventTypeCategories: scala.Option[scala.List[java.lang.String]] = None, services: scala.Option[scala.List[java.lang.String]] = None)
final case class EventDetailsErrorItem(eventArn: scala.Option[java.lang.String] = None, errorName: scala.Option[java.lang.String] = None, errorMessage: scala.Option[java.lang.String] = None)
final case class EventDetails(event: scala.Option[models.Event] = None, eventDescription: scala.Option[models.EventDescription] = None, eventMetadata: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class DescribeEventTypesResponse(eventTypes: scala.Option[scala.List[models.EventType]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InvalidPaginationToken(message: scala.Option[java.lang.String] = None)
final case class DescribeAffectedEntitiesResponse(entities: scala.Option[scala.List[models.AffectedEntity]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class AffectedEntity(entityValue: scala.Option[java.lang.String] = None, entityArn: scala.Option[java.lang.String] = None, tags: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, awsAccountId: scala.Option[java.lang.String] = None, statusCode: scala.Option[java.lang.String] = None, lastUpdatedTime: scala.Option[java.time.Instant] = None, eventArn: scala.Option[java.lang.String] = None)
final case class Event(statusCode: scala.Option[java.lang.String] = None, availabilityZone: scala.Option[java.lang.String] = None, region: scala.Option[java.lang.String] = None, eventTypeCode: scala.Option[java.lang.String] = None, service: scala.Option[java.lang.String] = None, eventTypeCategory: scala.Option[java.lang.String] = None, startTime: scala.Option[java.time.Instant] = None, endTime: scala.Option[java.time.Instant] = None, lastUpdatedTime: scala.Option[java.time.Instant] = None, arn: scala.Option[java.lang.String] = None)
final case class UnsupportedLocale(message: scala.Option[java.lang.String] = None)