package org.lyranthe.araethura.opsworkscm.models
import org.lyranthe.araethura.opsworkscm.models
final case class StartMaintenanceResponse(server: scala.Option[models.Server] = None)
final case class UpdateServerEngineAttributesResponse(server: scala.Option[models.Server] = None)
final case class DisassociateNodeResponse(nodeAssociationStatusToken: scala.Option[java.lang.String] = None)
final case class DescribeNodeAssociationStatusRequest(nodeAssociationStatusToken: java.lang.String, serverName: java.lang.String)
final case class AssociateNodeResponse(nodeAssociationStatusToken: scala.Option[java.lang.String] = None)
final case class RestoreServerRequest(backupId: java.lang.String, serverName: java.lang.String, instanceType: scala.Option[java.lang.String] = None, keyPair: scala.Option[java.lang.String] = None)
final case class Backup(createdAt: scala.Option[java.time.Instant] = None, preferredBackupWindow: scala.Option[java.lang.String] = None, preferredMaintenanceWindow: scala.Option[java.lang.String] = None, s3LogUrl: scala.Option[java.lang.String] = None, statusDescription: scala.Option[java.lang.String] = None, instanceType: scala.Option[java.lang.String] = None, instanceProfileArn: scala.Option[java.lang.String] = None, serviceRoleArn: scala.Option[java.lang.String] = None, engine: scala.Option[java.lang.String] = None, backupArn: scala.Option[java.lang.String] = None, engineModel: scala.Option[java.lang.String] = None, toolsVersion: scala.Option[java.lang.String] = None, userArn: scala.Option[java.lang.String] = None, s3DataUrl: scala.Option[java.lang.String] = None, engineVersion: scala.Option[java.lang.String] = None, keyPair: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, serverName: scala.Option[java.lang.String] = None, backupType: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, s3DataSize: scala.Option[scala.Int] = None, backupId: scala.Option[java.lang.String] = None, securityGroupIds: scala.Option[scala.List[java.lang.String]] = None, subnetIds: scala.Option[scala.List[java.lang.String]] = None)
final case class ServerEvent(createdAt: scala.Option[java.time.Instant] = None, serverName: scala.Option[java.lang.String] = None, message: scala.Option[java.lang.String] = None, logUrl: scala.Option[java.lang.String] = None)
final case class DeleteServerRequest(serverName: java.lang.String)
final case class DescribeServersRequest(serverName: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class DisassociateNodeRequest(serverName: java.lang.String, nodeName: java.lang.String, engineAttributes: scala.Option[scala.List[models.EngineAttribute]] = None)
final case class CreateServerRequest(instanceType: java.lang.String, serverName: java.lang.String, serviceRoleArn: java.lang.String, instanceProfileArn: java.lang.String, backupRetentionCount: scala.Option[scala.Int] = None, preferredMaintenanceWindow: scala.Option[java.lang.String] = None, preferredBackupWindow: scala.Option[java.lang.String] = None, engine: scala.Option[java.lang.String] = None, engineModel: scala.Option[java.lang.String] = None, engineVersion: scala.Option[java.lang.String] = None, engineAttributes: scala.Option[scala.List[models.EngineAttribute]] = None, keyPair: scala.Option[java.lang.String] = None, associatePublicIpAddress: scala.Option[scala.Boolean] = None, disableAutomatedBackup: scala.Option[scala.Boolean] = None, backupId: scala.Option[java.lang.String] = None, securityGroupIds: scala.Option[scala.List[java.lang.String]] = None, subnetIds: scala.Option[scala.List[java.lang.String]] = None)
final case class ValidationException(message: scala.Option[java.lang.String] = None)
final case class LimitExceededException(message: scala.Option[java.lang.String] = None)
final case class AccountAttribute(name: scala.Option[java.lang.String] = None, maximum: scala.Option[scala.Int] = None, used: scala.Option[scala.Int] = None)
case object RestoreServerResponse
final case class DescribeNodeAssociationStatusResponse(nodeAssociationStatus: scala.Option[java.lang.String] = None, engineAttributes: scala.Option[scala.List[models.EngineAttribute]] = None)
final case class EngineAttribute(name: scala.Option[java.lang.String] = None, value: scala.Option[java.lang.String] = None)
final case class InvalidNextTokenException(message: scala.Option[java.lang.String] = None)
final case class UpdateServerEngineAttributesRequest(serverName: java.lang.String, attributeName: java.lang.String, attributeValue: scala.Option[java.lang.String] = None)
final case class DescribeServersResponse(servers: scala.Option[scala.List[models.Server]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UpdateServerResponse(server: scala.Option[models.Server] = None)
final case class DeleteBackupRequest(backupId: java.lang.String)
final case class DescribeEventsResponse(serverEvents: scala.Option[scala.List[models.ServerEvent]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UpdateServerRequest(serverName: java.lang.String, disableAutomatedBackup: scala.Option[scala.Boolean] = None, backupRetentionCount: scala.Option[scala.Int] = None, preferredMaintenanceWindow: scala.Option[java.lang.String] = None, preferredBackupWindow: scala.Option[java.lang.String] = None)
final case class DescribeBackupsRequest(backupId: scala.Option[java.lang.String] = None, serverName: scala.Option[java.lang.String] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class AssociateNodeRequest(serverName: java.lang.String, nodeName: java.lang.String, engineAttributes: scala.List[models.EngineAttribute])
final case class DescribeEventsRequest(serverName: java.lang.String, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
case object DeleteServerResponse
final case class Server(createdAt: scala.Option[java.time.Instant] = None, preferredMaintenanceWindow: scala.Option[java.lang.String] = None, preferredBackupWindow: scala.Option[java.lang.String] = None, serverArn: scala.Option[java.lang.String] = None, statusReason: scala.Option[java.lang.String] = None, instanceType: scala.Option[java.lang.String] = None, instanceProfileArn: scala.Option[java.lang.String] = None, serviceRoleArn: scala.Option[java.lang.String] = None, engine: scala.Option[java.lang.String] = None, cloudFormationStackArn: scala.Option[java.lang.String] = None, engineModel: scala.Option[java.lang.String] = None, serverName: scala.Option[java.lang.String] = None, engineVersion: scala.Option[java.lang.String] = None, endpoint: scala.Option[java.lang.String] = None, keyPair: scala.Option[java.lang.String] = None, engineAttributes: scala.Option[scala.List[models.EngineAttribute]] = None, maintenanceStatus: scala.Option[java.lang.String] = None, backupRetentionCount: scala.Option[scala.Int] = None, associatePublicIpAddress: scala.Option[scala.Boolean] = None, disableAutomatedBackup: scala.Option[scala.Boolean] = None, status: scala.Option[java.lang.String] = None, securityGroupIds: scala.Option[scala.List[java.lang.String]] = None, subnetIds: scala.Option[scala.List[java.lang.String]] = None)
final case class InvalidStateException(message: scala.Option[java.lang.String] = None)
final case class CreateBackupRequest(serverName: java.lang.String, description: scala.Option[java.lang.String] = None)
final case class DescribeAccountAttributesResponse(attributes: scala.Option[scala.List[models.AccountAttribute]] = None)
final case class DescribeBackupsResponse(backups: scala.Option[scala.List[models.Backup]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class ResourceAlreadyExistsException(message: scala.Option[java.lang.String] = None)
case object DeleteBackupResponse
final case class CreateServerResponse(server: scala.Option[models.Server] = None)
case object DescribeAccountAttributesRequest
final case class ResourceNotFoundException(message: scala.Option[java.lang.String] = None)
final case class CreateBackupResponse(backup: scala.Option[models.Backup] = None)
final case class StartMaintenanceRequest(serverName: java.lang.String, engineAttributes: scala.Option[scala.List[models.EngineAttribute]] = None)