package org.lyranthe.araethura.datapipeline.http4s
import org.http4s.Method._
import org.lyranthe.araethura.datapipeline.circe._
import org.lyranthe.araethura.datapipeline.models
class AmazondatapipelineClient[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: org.lyranthe.araethura.common.AwsData[F]) extends org.lyranthe.araethura.datapipeline.Amazondatapipeline[F] {
  private[this] final val ServiceType: String = "datapipeline"
  private[this] final val ServiceAndPrefix: Option[String] = Some("DataPipeline")
  override def deactivatePipeline(input: models.DeactivatePipelineInput): F[scala.Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, scala.Unit, models.DeactivatePipelineInput](client, awsData, ServiceType, ServiceAndPrefix, "DeactivatePipeline", POST, "/", input)
  override def queryObjects(input: models.QueryObjectsInput): F[models.QueryObjectsOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.QueryObjectsOutput, models.QueryObjectsInput](client, awsData, ServiceType, ServiceAndPrefix, "QueryObjects", POST, "/", input)
  override def putPipelineDefinition(input: models.PutPipelineDefinitionInput): F[models.PutPipelineDefinitionOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.PutPipelineDefinitionOutput, models.PutPipelineDefinitionInput](client, awsData, ServiceType, ServiceAndPrefix, "PutPipelineDefinition", POST, "/", input)
  override def evaluateExpression(input: models.EvaluateExpressionInput): F[models.EvaluateExpressionOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.EvaluateExpressionOutput, models.EvaluateExpressionInput](client, awsData, ServiceType, ServiceAndPrefix, "EvaluateExpression", POST, "/", input)
  override def reportTaskRunnerHeartbeat(input: models.ReportTaskRunnerHeartbeatInput): F[models.ReportTaskRunnerHeartbeatOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.ReportTaskRunnerHeartbeatOutput, models.ReportTaskRunnerHeartbeatInput](client, awsData, ServiceType, ServiceAndPrefix, "ReportTaskRunnerHeartbeat", POST, "/", input)
  override def getPipelineDefinition(input: models.GetPipelineDefinitionInput): F[models.GetPipelineDefinitionOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.GetPipelineDefinitionOutput, models.GetPipelineDefinitionInput](client, awsData, ServiceType, ServiceAndPrefix, "GetPipelineDefinition", POST, "/", input)
  override def reportTaskProgress(input: models.ReportTaskProgressInput): F[models.ReportTaskProgressOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.ReportTaskProgressOutput, models.ReportTaskProgressInput](client, awsData, ServiceType, ServiceAndPrefix, "ReportTaskProgress", POST, "/", input)
  override def validatePipelineDefinition(input: models.ValidatePipelineDefinitionInput): F[models.ValidatePipelineDefinitionOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.ValidatePipelineDefinitionOutput, models.ValidatePipelineDefinitionInput](client, awsData, ServiceType, ServiceAndPrefix, "ValidatePipelineDefinition", POST, "/", input)
  override def deletePipeline(input: models.DeletePipelineInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.DeletePipelineInput](client, awsData, ServiceType, ServiceAndPrefix, "DeletePipeline", POST, "/", input)
  override def pollForTask(input: models.PollForTaskInput): F[models.PollForTaskOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.PollForTaskOutput, models.PollForTaskInput](client, awsData, ServiceType, ServiceAndPrefix, "PollForTask", POST, "/", input)
  override def activatePipeline(input: models.ActivatePipelineInput): F[scala.Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, scala.Unit, models.ActivatePipelineInput](client, awsData, ServiceType, ServiceAndPrefix, "ActivatePipeline", POST, "/", input)
  override def setStatus(input: models.SetStatusInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.SetStatusInput](client, awsData, ServiceType, ServiceAndPrefix, "SetStatus", POST, "/", input)
  override def setTaskStatus(input: models.SetTaskStatusInput): F[scala.Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, scala.Unit, models.SetTaskStatusInput](client, awsData, ServiceType, ServiceAndPrefix, "SetTaskStatus", POST, "/", input)
  override def describeObjects(input: models.DescribeObjectsInput): F[models.DescribeObjectsOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DescribeObjectsOutput, models.DescribeObjectsInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeObjects", POST, "/", input)
  override def removeTags(input: models.RemoveTagsInput): F[scala.Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, scala.Unit, models.RemoveTagsInput](client, awsData, ServiceType, ServiceAndPrefix, "RemoveTags", POST, "/", input)
  override def addTags(input: models.AddTagsInput): F[scala.Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, scala.Unit, models.AddTagsInput](client, awsData, ServiceType, ServiceAndPrefix, "AddTags", POST, "/", input)
  override def describePipelines(input: models.DescribePipelinesInput): F[models.DescribePipelinesOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DescribePipelinesOutput, models.DescribePipelinesInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribePipelines", POST, "/", input)
  override def listPipelines(input: models.ListPipelinesInput): F[models.ListPipelinesOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.ListPipelinesOutput, models.ListPipelinesInput](client, awsData, ServiceType, ServiceAndPrefix, "ListPipelines", POST, "/", input)
  override def createPipeline(input: models.CreatePipelineInput): F[models.CreatePipelineOutput] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.CreatePipelineOutput, models.CreatePipelineInput](client, awsData, ServiceType, ServiceAndPrefix, "CreatePipeline", POST, "/", input)
}