package org.lyranthe.araethura.organizations
trait Amazonorganizations[F[_]] {
  def enablePolicyType(input: models.EnablePolicyTypeRequest): F[models.EnablePolicyTypeResponse]
  def deleteOrganizationalUnit(input: models.DeleteOrganizationalUnitRequest): F[Unit]
  def listAWSServiceAccessForOrganization(input: models.ListAWSServiceAccessForOrganizationRequest): F[models.ListAWSServiceAccessForOrganizationResponse]
  def listHandshakesForAccount(input: models.ListHandshakesForAccountRequest): F[models.ListHandshakesForAccountResponse]
  def listRoots(input: models.ListRootsRequest): F[models.ListRootsResponse]
  def detachPolicy(input: models.DetachPolicyRequest): F[Unit]
  def createPolicy(input: models.CreatePolicyRequest): F[models.CreatePolicyResponse]
  def listAccounts(input: models.ListAccountsRequest): F[models.ListAccountsResponse]
  def inviteAccountToOrganization(input: models.InviteAccountToOrganizationRequest): F[models.InviteAccountToOrganizationResponse]
  def listPolicies(input: models.ListPoliciesRequest): F[models.ListPoliciesResponse]
  def cancelHandshake(input: models.CancelHandshakeRequest): F[models.CancelHandshakeResponse]
  def enableAWSServiceAccess(input: models.EnableAWSServiceAccessRequest): F[Unit]
  def removeAccountFromOrganization(input: models.RemoveAccountFromOrganizationRequest): F[Unit]
  def attachPolicy(input: models.AttachPolicyRequest): F[Unit]
  def listOrganizationalUnitsForParent(input: models.ListOrganizationalUnitsForParentRequest): F[models.ListOrganizationalUnitsForParentResponse]
  def moveAccount(input: models.MoveAccountRequest): F[Unit]
  def deletePolicy(input: models.DeletePolicyRequest): F[Unit]
  def describeOrganizationalUnit(input: models.DescribeOrganizationalUnitRequest): F[models.DescribeOrganizationalUnitResponse]
  def updatePolicy(input: models.UpdatePolicyRequest): F[models.UpdatePolicyResponse]
  def listChildren(input: models.ListChildrenRequest): F[models.ListChildrenResponse]
  def listAccountsForParent(input: models.ListAccountsForParentRequest): F[models.ListAccountsForParentResponse]
  def disablePolicyType(input: models.DisablePolicyTypeRequest): F[models.DisablePolicyTypeResponse]
  def createOrganization(input: models.CreateOrganizationRequest): F[models.CreateOrganizationResponse]
  def deleteOrganization: F[Unit]
  def describeAccount(input: models.DescribeAccountRequest): F[models.DescribeAccountResponse]
  def createOrganizationalUnit(input: models.CreateOrganizationalUnitRequest): F[models.CreateOrganizationalUnitResponse]
  def createAccount(input: models.CreateAccountRequest): F[models.CreateAccountResponse]
  def leaveOrganization: F[Unit]
  def describeHandshake(input: models.DescribeHandshakeRequest): F[models.DescribeHandshakeResponse]
  def enableAllFeatures: F[models.EnableAllFeaturesResponse]
  def listParents(input: models.ListParentsRequest): F[models.ListParentsResponse]
  def listPoliciesForTarget(input: models.ListPoliciesForTargetRequest): F[models.ListPoliciesForTargetResponse]
  def describeCreateAccountStatus(input: models.DescribeCreateAccountStatusRequest): F[models.DescribeCreateAccountStatusResponse]
  def listTargetsForPolicy(input: models.ListTargetsForPolicyRequest): F[models.ListTargetsForPolicyResponse]
  def acceptHandshake(input: models.AcceptHandshakeRequest): F[models.AcceptHandshakeResponse]
  def declineHandshake(input: models.DeclineHandshakeRequest): F[models.DeclineHandshakeResponse]
  def disableAWSServiceAccess(input: models.DisableAWSServiceAccessRequest): F[Unit]
  def updateOrganizationalUnit(input: models.UpdateOrganizationalUnitRequest): F[models.UpdateOrganizationalUnitResponse]
  def listHandshakesForOrganization(input: models.ListHandshakesForOrganizationRequest): F[models.ListHandshakesForOrganizationResponse]
  def describePolicy(input: models.DescribePolicyRequest): F[models.DescribePolicyResponse]
  def describeOrganization: F[models.DescribeOrganizationResponse]
  def listCreateAccountStatus(input: models.ListCreateAccountStatusRequest): F[models.ListCreateAccountStatusResponse]
}