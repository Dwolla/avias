package org.lyranthe.araethura.simpleworkflow
trait Amazonsimpleworkflow[F[_]] {
  def countClosedWorkflowExecutions(input: models.CountClosedWorkflowExecutionsInput): F[models.WorkflowExecutionCount]
  def listClosedWorkflowExecutions(input: models.ListClosedWorkflowExecutionsInput): F[models.WorkflowExecutionInfos]
  def deprecateActivityType(input: models.DeprecateActivityTypeInput): F[Unit]
  def registerWorkflowType(input: models.RegisterWorkflowTypeInput): F[Unit]
  def listDomains(input: models.ListDomainsInput): F[models.DomainInfos]
  def respondActivityTaskFailed(input: models.RespondActivityTaskFailedInput): F[Unit]
  def listWorkflowTypes(input: models.ListWorkflowTypesInput): F[models.WorkflowTypeInfos]
  def describeWorkflowType(input: models.DescribeWorkflowTypeInput): F[models.WorkflowTypeDetail]
  def listActivityTypes(input: models.ListActivityTypesInput): F[models.ActivityTypeInfos]
  def countPendingActivityTasks(input: models.CountPendingActivityTasksInput): F[models.PendingTaskCount]
  def startWorkflowExecution(input: models.StartWorkflowExecutionInput): F[models.Run]
  def registerDomain(input: models.RegisterDomainInput): F[Unit]
  def recordActivityTaskHeartbeat(input: models.RecordActivityTaskHeartbeatInput): F[models.ActivityTaskStatus]
  def describeActivityType(input: models.DescribeActivityTypeInput): F[models.ActivityTypeDetail]
  def getWorkflowExecutionHistory(input: models.GetWorkflowExecutionHistoryInput): F[models.History]
  def pollForDecisionTask(input: models.PollForDecisionTaskInput): F[models.DecisionTask]
  def countOpenWorkflowExecutions(input: models.CountOpenWorkflowExecutionsInput): F[models.WorkflowExecutionCount]
  def listOpenWorkflowExecutions(input: models.ListOpenWorkflowExecutionsInput): F[models.WorkflowExecutionInfos]
  def pollForActivityTask(input: models.PollForActivityTaskInput): F[models.ActivityTask]
  def terminateWorkflowExecution(input: models.TerminateWorkflowExecutionInput): F[Unit]
  def describeDomain(input: models.DescribeDomainInput): F[models.DomainDetail]
  def respondDecisionTaskCompleted(input: models.RespondDecisionTaskCompletedInput): F[Unit]
  def deprecateWorkflowType(input: models.DeprecateWorkflowTypeInput): F[Unit]
  def signalWorkflowExecution(input: models.SignalWorkflowExecutionInput): F[Unit]
  def describeWorkflowExecution(input: models.DescribeWorkflowExecutionInput): F[models.WorkflowExecutionDetail]
  def respondActivityTaskCompleted(input: models.RespondActivityTaskCompletedInput): F[Unit]
  def countPendingDecisionTasks(input: models.CountPendingDecisionTasksInput): F[models.PendingTaskCount]
  def registerActivityType(input: models.RegisterActivityTypeInput): F[Unit]
  def respondActivityTaskCanceled(input: models.RespondActivityTaskCanceledInput): F[Unit]
  def deprecateDomain(input: models.DeprecateDomainInput): F[Unit]
  def requestCancelWorkflowExecution(input: models.RequestCancelWorkflowExecutionInput): F[Unit]
}