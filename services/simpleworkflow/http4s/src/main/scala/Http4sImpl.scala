package org.lyranthe.araethura.simpleworkflow.http4s
import org.http4s.Method._
import org.lyranthe.araethura.simpleworkflow.circe._
import org.lyranthe.araethura.simpleworkflow.models
class AmazonsimpleworkflowClient[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: org.lyranthe.araethura.common.AwsData[F]) extends org.lyranthe.araethura.simpleworkflow.Amazonsimpleworkflow[F] {
  private[this] final val ServiceType: String = "swf"
  private[this] final val ServiceAndPrefix: Option[String] = Some("SimpleWorkflowService")
  override def countClosedWorkflowExecutions(input: models.CountClosedWorkflowExecutionsInput): F[models.WorkflowExecutionCount] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.WorkflowExecutionCount, models.CountClosedWorkflowExecutionsInput](client, awsData, ServiceType, ServiceAndPrefix, "CountClosedWorkflowExecutions", POST, "/", input)
  override def listClosedWorkflowExecutions(input: models.ListClosedWorkflowExecutionsInput): F[models.WorkflowExecutionInfos] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.WorkflowExecutionInfos, models.ListClosedWorkflowExecutionsInput](client, awsData, ServiceType, ServiceAndPrefix, "ListClosedWorkflowExecutions", POST, "/", input)
  override def deprecateActivityType(input: models.DeprecateActivityTypeInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.DeprecateActivityTypeInput](client, awsData, ServiceType, ServiceAndPrefix, "DeprecateActivityType", POST, "/", input)
  override def registerWorkflowType(input: models.RegisterWorkflowTypeInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.RegisterWorkflowTypeInput](client, awsData, ServiceType, ServiceAndPrefix, "RegisterWorkflowType", POST, "/", input)
  override def listDomains(input: models.ListDomainsInput): F[models.DomainInfos] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DomainInfos, models.ListDomainsInput](client, awsData, ServiceType, ServiceAndPrefix, "ListDomains", POST, "/", input)
  override def respondActivityTaskFailed(input: models.RespondActivityTaskFailedInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.RespondActivityTaskFailedInput](client, awsData, ServiceType, ServiceAndPrefix, "RespondActivityTaskFailed", POST, "/", input)
  override def listWorkflowTypes(input: models.ListWorkflowTypesInput): F[models.WorkflowTypeInfos] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.WorkflowTypeInfos, models.ListWorkflowTypesInput](client, awsData, ServiceType, ServiceAndPrefix, "ListWorkflowTypes", POST, "/", input)
  override def describeWorkflowType(input: models.DescribeWorkflowTypeInput): F[models.WorkflowTypeDetail] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.WorkflowTypeDetail, models.DescribeWorkflowTypeInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeWorkflowType", POST, "/", input)
  override def listActivityTypes(input: models.ListActivityTypesInput): F[models.ActivityTypeInfos] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.ActivityTypeInfos, models.ListActivityTypesInput](client, awsData, ServiceType, ServiceAndPrefix, "ListActivityTypes", POST, "/", input)
  override def countPendingActivityTasks(input: models.CountPendingActivityTasksInput): F[models.PendingTaskCount] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.PendingTaskCount, models.CountPendingActivityTasksInput](client, awsData, ServiceType, ServiceAndPrefix, "CountPendingActivityTasks", POST, "/", input)
  override def startWorkflowExecution(input: models.StartWorkflowExecutionInput): F[models.Run] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.Run, models.StartWorkflowExecutionInput](client, awsData, ServiceType, ServiceAndPrefix, "StartWorkflowExecution", POST, "/", input)
  override def registerDomain(input: models.RegisterDomainInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.RegisterDomainInput](client, awsData, ServiceType, ServiceAndPrefix, "RegisterDomain", POST, "/", input)
  override def recordActivityTaskHeartbeat(input: models.RecordActivityTaskHeartbeatInput): F[models.ActivityTaskStatus] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.ActivityTaskStatus, models.RecordActivityTaskHeartbeatInput](client, awsData, ServiceType, ServiceAndPrefix, "RecordActivityTaskHeartbeat", POST, "/", input)
  override def describeActivityType(input: models.DescribeActivityTypeInput): F[models.ActivityTypeDetail] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.ActivityTypeDetail, models.DescribeActivityTypeInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeActivityType", POST, "/", input)
  override def getWorkflowExecutionHistory(input: models.GetWorkflowExecutionHistoryInput): F[models.History] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.History, models.GetWorkflowExecutionHistoryInput](client, awsData, ServiceType, ServiceAndPrefix, "GetWorkflowExecutionHistory", POST, "/", input)
  override def pollForDecisionTask(input: models.PollForDecisionTaskInput): F[models.DecisionTask] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DecisionTask, models.PollForDecisionTaskInput](client, awsData, ServiceType, ServiceAndPrefix, "PollForDecisionTask", POST, "/", input)
  override def countOpenWorkflowExecutions(input: models.CountOpenWorkflowExecutionsInput): F[models.WorkflowExecutionCount] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.WorkflowExecutionCount, models.CountOpenWorkflowExecutionsInput](client, awsData, ServiceType, ServiceAndPrefix, "CountOpenWorkflowExecutions", POST, "/", input)
  override def listOpenWorkflowExecutions(input: models.ListOpenWorkflowExecutionsInput): F[models.WorkflowExecutionInfos] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.WorkflowExecutionInfos, models.ListOpenWorkflowExecutionsInput](client, awsData, ServiceType, ServiceAndPrefix, "ListOpenWorkflowExecutions", POST, "/", input)
  override def pollForActivityTask(input: models.PollForActivityTaskInput): F[models.ActivityTask] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.ActivityTask, models.PollForActivityTaskInput](client, awsData, ServiceType, ServiceAndPrefix, "PollForActivityTask", POST, "/", input)
  override def terminateWorkflowExecution(input: models.TerminateWorkflowExecutionInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.TerminateWorkflowExecutionInput](client, awsData, ServiceType, ServiceAndPrefix, "TerminateWorkflowExecution", POST, "/", input)
  override def describeDomain(input: models.DescribeDomainInput): F[models.DomainDetail] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.DomainDetail, models.DescribeDomainInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeDomain", POST, "/", input)
  override def respondDecisionTaskCompleted(input: models.RespondDecisionTaskCompletedInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.RespondDecisionTaskCompletedInput](client, awsData, ServiceType, ServiceAndPrefix, "RespondDecisionTaskCompleted", POST, "/", input)
  override def deprecateWorkflowType(input: models.DeprecateWorkflowTypeInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.DeprecateWorkflowTypeInput](client, awsData, ServiceType, ServiceAndPrefix, "DeprecateWorkflowType", POST, "/", input)
  override def signalWorkflowExecution(input: models.SignalWorkflowExecutionInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.SignalWorkflowExecutionInput](client, awsData, ServiceType, ServiceAndPrefix, "SignalWorkflowExecution", POST, "/", input)
  override def describeWorkflowExecution(input: models.DescribeWorkflowExecutionInput): F[models.WorkflowExecutionDetail] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.WorkflowExecutionDetail, models.DescribeWorkflowExecutionInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeWorkflowExecution", POST, "/", input)
  override def respondActivityTaskCompleted(input: models.RespondActivityTaskCompletedInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.RespondActivityTaskCompletedInput](client, awsData, ServiceType, ServiceAndPrefix, "RespondActivityTaskCompleted", POST, "/", input)
  override def countPendingDecisionTasks(input: models.CountPendingDecisionTasksInput): F[models.PendingTaskCount] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, models.PendingTaskCount, models.CountPendingDecisionTasksInput](client, awsData, ServiceType, ServiceAndPrefix, "CountPendingDecisionTasks", POST, "/", input)
  override def registerActivityType(input: models.RegisterActivityTypeInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.RegisterActivityTypeInput](client, awsData, ServiceType, ServiceAndPrefix, "RegisterActivityType", POST, "/", input)
  override def respondActivityTaskCanceled(input: models.RespondActivityTaskCanceledInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.RespondActivityTaskCanceledInput](client, awsData, ServiceType, ServiceAndPrefix, "RespondActivityTaskCanceled", POST, "/", input)
  override def deprecateDomain(input: models.DeprecateDomainInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.DeprecateDomainInput](client, awsData, ServiceType, ServiceAndPrefix, "DeprecateDomain", POST, "/", input)
  override def requestCancelWorkflowExecution(input: models.RequestCancelWorkflowExecutionInput): F[Unit] = org.lyranthe.araethura.common.http4s.ClientUtils.doRequest[F, Unit, models.RequestCancelWorkflowExecutionInput](client, awsData, ServiceType, ServiceAndPrefix, "RequestCancelWorkflowExecution", POST, "/", input)
}