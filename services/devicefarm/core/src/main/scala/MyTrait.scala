package avias.devicefarm
trait Amazondevicefarm[F[_]] {
  def listProjects(input: avias.devicefarm.models.ListProjectsRequest): F[avias.devicefarm.models.ListProjectsResult]
  def deleteRemoteAccessSession(input: avias.devicefarm.models.DeleteRemoteAccessSessionRequest): F[scala.Unit]
  def listOfferingTransactions(input: avias.devicefarm.models.ListOfferingTransactionsRequest): F[avias.devicefarm.models.ListOfferingTransactionsResult]
  def getOfferingStatus(input: avias.devicefarm.models.GetOfferingStatusRequest): F[avias.devicefarm.models.GetOfferingStatusResult]
  def getUpload(input: avias.devicefarm.models.GetUploadRequest): F[avias.devicefarm.models.GetUploadResult]
  def listNetworkProfiles(input: avias.devicefarm.models.ListNetworkProfilesRequest): F[avias.devicefarm.models.ListNetworkProfilesResult]
  def listSuites(input: avias.devicefarm.models.ListSuitesRequest): F[avias.devicefarm.models.ListSuitesResult]
  def installToRemoteAccessSession(input: avias.devicefarm.models.InstallToRemoteAccessSessionRequest): F[avias.devicefarm.models.InstallToRemoteAccessSessionResult]
  def createRemoteAccessSession(input: avias.devicefarm.models.CreateRemoteAccessSessionRequest): F[avias.devicefarm.models.CreateRemoteAccessSessionResult]
  def deleteDevicePool(input: avias.devicefarm.models.DeleteDevicePoolRequest): F[scala.Unit]
  def updateNetworkProfile(input: avias.devicefarm.models.UpdateNetworkProfileRequest): F[avias.devicefarm.models.UpdateNetworkProfileResult]
  def getAccountSettings: F[avias.devicefarm.models.GetAccountSettingsResult]
  def deleteProject(input: avias.devicefarm.models.DeleteProjectRequest): F[scala.Unit]
  def listOfferings(input: avias.devicefarm.models.ListOfferingsRequest): F[avias.devicefarm.models.ListOfferingsResult]
  def listDevicePools(input: avias.devicefarm.models.ListDevicePoolsRequest): F[avias.devicefarm.models.ListDevicePoolsResult]
  def deleteUpload(input: avias.devicefarm.models.DeleteUploadRequest): F[scala.Unit]
  def listUniqueProblems(input: avias.devicefarm.models.ListUniqueProblemsRequest): F[avias.devicefarm.models.ListUniqueProblemsResult]
  def createDevicePool(input: avias.devicefarm.models.CreateDevicePoolRequest): F[avias.devicefarm.models.CreateDevicePoolResult]
  def getNetworkProfile(input: avias.devicefarm.models.GetNetworkProfileRequest): F[avias.devicefarm.models.GetNetworkProfileResult]
  def scheduleRun(input: avias.devicefarm.models.ScheduleRunRequest): F[avias.devicefarm.models.ScheduleRunResult]
  def stopRemoteAccessSession(input: avias.devicefarm.models.StopRemoteAccessSessionRequest): F[avias.devicefarm.models.StopRemoteAccessSessionResult]
  def createNetworkProfile(input: avias.devicefarm.models.CreateNetworkProfileRequest): F[avias.devicefarm.models.CreateNetworkProfileResult]
  def createUpload(input: avias.devicefarm.models.CreateUploadRequest): F[avias.devicefarm.models.CreateUploadResult]
  def renewOffering(input: avias.devicefarm.models.RenewOfferingRequest): F[avias.devicefarm.models.RenewOfferingResult]
  def listDevices(input: avias.devicefarm.models.ListDevicesRequest): F[avias.devicefarm.models.ListDevicesResult]
  def stopRun(input: avias.devicefarm.models.StopRunRequest): F[avias.devicefarm.models.StopRunResult]
  def getTest(input: avias.devicefarm.models.GetTestRequest): F[avias.devicefarm.models.GetTestResult]
  def listRemoteAccessSessions(input: avias.devicefarm.models.ListRemoteAccessSessionsRequest): F[avias.devicefarm.models.ListRemoteAccessSessionsResult]
  def deleteNetworkProfile(input: avias.devicefarm.models.DeleteNetworkProfileRequest): F[scala.Unit]
  def getRemoteAccessSession(input: avias.devicefarm.models.GetRemoteAccessSessionRequest): F[avias.devicefarm.models.GetRemoteAccessSessionResult]
  def listArtifacts(input: avias.devicefarm.models.ListArtifactsRequest): F[avias.devicefarm.models.ListArtifactsResult]
  def listRuns(input: avias.devicefarm.models.ListRunsRequest): F[avias.devicefarm.models.ListRunsResult]
  def updateDevicePool(input: avias.devicefarm.models.UpdateDevicePoolRequest): F[avias.devicefarm.models.UpdateDevicePoolResult]
  def getJob(input: avias.devicefarm.models.GetJobRequest): F[avias.devicefarm.models.GetJobResult]
  def getSuite(input: avias.devicefarm.models.GetSuiteRequest): F[avias.devicefarm.models.GetSuiteResult]
  def listSamples(input: avias.devicefarm.models.ListSamplesRequest): F[avias.devicefarm.models.ListSamplesResult]
  def createProject(input: avias.devicefarm.models.CreateProjectRequest): F[avias.devicefarm.models.CreateProjectResult]
  def getDevicePool(input: avias.devicefarm.models.GetDevicePoolRequest): F[avias.devicefarm.models.GetDevicePoolResult]
  def listUploads(input: avias.devicefarm.models.ListUploadsRequest): F[avias.devicefarm.models.ListUploadsResult]
  def listJobs(input: avias.devicefarm.models.ListJobsRequest): F[avias.devicefarm.models.ListJobsResult]
  def listOfferingPromotions(input: avias.devicefarm.models.ListOfferingPromotionsRequest): F[avias.devicefarm.models.ListOfferingPromotionsResult]
  def listTests(input: avias.devicefarm.models.ListTestsRequest): F[avias.devicefarm.models.ListTestsResult]
  def getDevicePoolCompatibility(input: avias.devicefarm.models.GetDevicePoolCompatibilityRequest): F[avias.devicefarm.models.GetDevicePoolCompatibilityResult]
  def purchaseOffering(input: avias.devicefarm.models.PurchaseOfferingRequest): F[avias.devicefarm.models.PurchaseOfferingResult]
  def getRun(input: avias.devicefarm.models.GetRunRequest): F[avias.devicefarm.models.GetRunResult]
  def updateProject(input: avias.devicefarm.models.UpdateProjectRequest): F[avias.devicefarm.models.UpdateProjectResult]
  def getDevice(input: avias.devicefarm.models.GetDeviceRequest): F[avias.devicefarm.models.GetDeviceResult]
  def getProject(input: avias.devicefarm.models.GetProjectRequest): F[avias.devicefarm.models.GetProjectResult]
  def deleteRun(input: avias.devicefarm.models.DeleteRunRequest): F[scala.Unit]
}