package org.lyranthe.araethura.devicefarm
trait Amazondevicefarm[F[_]] {
  def listProjects(input: models.ListProjectsRequest): F[models.ListProjectsResult]
  def deleteRemoteAccessSession(input: models.DeleteRemoteAccessSessionRequest): F[scala.Unit]
  def listOfferingTransactions(input: models.ListOfferingTransactionsRequest): F[models.ListOfferingTransactionsResult]
  def getOfferingStatus(input: models.GetOfferingStatusRequest): F[models.GetOfferingStatusResult]
  def getUpload(input: models.GetUploadRequest): F[models.GetUploadResult]
  def listNetworkProfiles(input: models.ListNetworkProfilesRequest): F[models.ListNetworkProfilesResult]
  def listSuites(input: models.ListSuitesRequest): F[models.ListSuitesResult]
  def installToRemoteAccessSession(input: models.InstallToRemoteAccessSessionRequest): F[models.InstallToRemoteAccessSessionResult]
  def createRemoteAccessSession(input: models.CreateRemoteAccessSessionRequest): F[models.CreateRemoteAccessSessionResult]
  def deleteDevicePool(input: models.DeleteDevicePoolRequest): F[scala.Unit]
  def updateNetworkProfile(input: models.UpdateNetworkProfileRequest): F[models.UpdateNetworkProfileResult]
  def getAccountSettings: F[models.GetAccountSettingsResult]
  def deleteProject(input: models.DeleteProjectRequest): F[scala.Unit]
  def listOfferings(input: models.ListOfferingsRequest): F[models.ListOfferingsResult]
  def listDevicePools(input: models.ListDevicePoolsRequest): F[models.ListDevicePoolsResult]
  def deleteUpload(input: models.DeleteUploadRequest): F[scala.Unit]
  def listUniqueProblems(input: models.ListUniqueProblemsRequest): F[models.ListUniqueProblemsResult]
  def createDevicePool(input: models.CreateDevicePoolRequest): F[models.CreateDevicePoolResult]
  def getNetworkProfile(input: models.GetNetworkProfileRequest): F[models.GetNetworkProfileResult]
  def scheduleRun(input: models.ScheduleRunRequest): F[models.ScheduleRunResult]
  def stopRemoteAccessSession(input: models.StopRemoteAccessSessionRequest): F[models.StopRemoteAccessSessionResult]
  def createNetworkProfile(input: models.CreateNetworkProfileRequest): F[models.CreateNetworkProfileResult]
  def createUpload(input: models.CreateUploadRequest): F[models.CreateUploadResult]
  def renewOffering(input: models.RenewOfferingRequest): F[models.RenewOfferingResult]
  def listDevices(input: models.ListDevicesRequest): F[models.ListDevicesResult]
  def stopRun(input: models.StopRunRequest): F[models.StopRunResult]
  def getTest(input: models.GetTestRequest): F[models.GetTestResult]
  def listRemoteAccessSessions(input: models.ListRemoteAccessSessionsRequest): F[models.ListRemoteAccessSessionsResult]
  def deleteNetworkProfile(input: models.DeleteNetworkProfileRequest): F[scala.Unit]
  def getRemoteAccessSession(input: models.GetRemoteAccessSessionRequest): F[models.GetRemoteAccessSessionResult]
  def listArtifacts(input: models.ListArtifactsRequest): F[models.ListArtifactsResult]
  def listRuns(input: models.ListRunsRequest): F[models.ListRunsResult]
  def updateDevicePool(input: models.UpdateDevicePoolRequest): F[models.UpdateDevicePoolResult]
  def getJob(input: models.GetJobRequest): F[models.GetJobResult]
  def getSuite(input: models.GetSuiteRequest): F[models.GetSuiteResult]
  def listSamples(input: models.ListSamplesRequest): F[models.ListSamplesResult]
  def createProject(input: models.CreateProjectRequest): F[models.CreateProjectResult]
  def getDevicePool(input: models.GetDevicePoolRequest): F[models.GetDevicePoolResult]
  def listUploads(input: models.ListUploadsRequest): F[models.ListUploadsResult]
  def listJobs(input: models.ListJobsRequest): F[models.ListJobsResult]
  def listOfferingPromotions(input: models.ListOfferingPromotionsRequest): F[models.ListOfferingPromotionsResult]
  def listTests(input: models.ListTestsRequest): F[models.ListTestsResult]
  def getDevicePoolCompatibility(input: models.GetDevicePoolCompatibilityRequest): F[models.GetDevicePoolCompatibilityResult]
  def purchaseOffering(input: models.PurchaseOfferingRequest): F[models.PurchaseOfferingResult]
  def getRun(input: models.GetRunRequest): F[models.GetRunResult]
  def updateProject(input: models.UpdateProjectRequest): F[models.UpdateProjectResult]
  def getDevice(input: models.GetDeviceRequest): F[models.GetDeviceResult]
  def getProject(input: models.GetProjectRequest): F[models.GetProjectResult]
  def deleteRun(input: models.DeleteRunRequest): F[scala.Unit]
}