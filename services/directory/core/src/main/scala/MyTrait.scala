package org.lyranthe.araethura.directory
trait Amazondirectory[F[_]] {
  def connectDirectory(input: org.lyranthe.araethura.directory.models.ConnectDirectoryRequest): F[org.lyranthe.araethura.directory.models.ConnectDirectoryResult]
  def removeIpRoutes(input: org.lyranthe.araethura.directory.models.RemoveIpRoutesRequest): F[scala.Unit]
  def deregisterEventTopic(input: org.lyranthe.araethura.directory.models.DeregisterEventTopicRequest): F[scala.Unit]
  def createAlias(input: org.lyranthe.araethura.directory.models.CreateAliasRequest): F[org.lyranthe.araethura.directory.models.CreateAliasResult]
  def restoreFromSnapshot(input: org.lyranthe.araethura.directory.models.RestoreFromSnapshotRequest): F[scala.Unit]
  def disableSso(input: org.lyranthe.araethura.directory.models.DisableSsoRequest): F[scala.Unit]
  def createTrust(input: org.lyranthe.araethura.directory.models.CreateTrustRequest): F[org.lyranthe.araethura.directory.models.CreateTrustResult]
  def disableRadius(input: org.lyranthe.araethura.directory.models.DisableRadiusRequest): F[scala.Unit]
  def updateConditionalForwarder(input: org.lyranthe.araethura.directory.models.UpdateConditionalForwarderRequest): F[scala.Unit]
  def deleteDirectory(input: org.lyranthe.araethura.directory.models.DeleteDirectoryRequest): F[org.lyranthe.araethura.directory.models.DeleteDirectoryResult]
  def describeTrusts(input: org.lyranthe.araethura.directory.models.DescribeTrustsRequest): F[org.lyranthe.araethura.directory.models.DescribeTrustsResult]
  def cancelSchemaExtension(input: org.lyranthe.araethura.directory.models.CancelSchemaExtensionRequest): F[scala.Unit]
  def listIpRoutes(input: org.lyranthe.araethura.directory.models.ListIpRoutesRequest): F[org.lyranthe.araethura.directory.models.ListIpRoutesResult]
  def getSnapshotLimits(input: org.lyranthe.araethura.directory.models.GetSnapshotLimitsRequest): F[org.lyranthe.araethura.directory.models.GetSnapshotLimitsResult]
  def createDirectory(input: org.lyranthe.araethura.directory.models.CreateDirectoryRequest): F[org.lyranthe.araethura.directory.models.CreateDirectoryResult]
  def describeEventTopics(input: org.lyranthe.araethura.directory.models.DescribeEventTopicsRequest): F[org.lyranthe.araethura.directory.models.DescribeEventTopicsResult]
  def describeSnapshots(input: org.lyranthe.araethura.directory.models.DescribeSnapshotsRequest): F[org.lyranthe.araethura.directory.models.DescribeSnapshotsResult]
  def deleteSnapshot(input: org.lyranthe.araethura.directory.models.DeleteSnapshotRequest): F[org.lyranthe.araethura.directory.models.DeleteSnapshotResult]
  def enableSso(input: org.lyranthe.araethura.directory.models.EnableSsoRequest): F[scala.Unit]
  def createConditionalForwarder(input: org.lyranthe.araethura.directory.models.CreateConditionalForwarderRequest): F[scala.Unit]
  def addTagsToResource(input: org.lyranthe.araethura.directory.models.AddTagsToResourceRequest): F[scala.Unit]
  def getDirectoryLimits: F[org.lyranthe.araethura.directory.models.GetDirectoryLimitsResult]
  def listTagsForResource(input: org.lyranthe.araethura.directory.models.ListTagsForResourceRequest): F[org.lyranthe.araethura.directory.models.ListTagsForResourceResult]
  def describeDirectories(input: org.lyranthe.araethura.directory.models.DescribeDirectoriesRequest): F[org.lyranthe.araethura.directory.models.DescribeDirectoriesResult]
  def removeTagsFromResource(input: org.lyranthe.araethura.directory.models.RemoveTagsFromResourceRequest): F[scala.Unit]
  def createComputer(input: org.lyranthe.araethura.directory.models.CreateComputerRequest): F[org.lyranthe.araethura.directory.models.CreateComputerResult]
  def registerEventTopic(input: org.lyranthe.araethura.directory.models.RegisterEventTopicRequest): F[scala.Unit]
  def deleteTrust(input: org.lyranthe.araethura.directory.models.DeleteTrustRequest): F[org.lyranthe.araethura.directory.models.DeleteTrustResult]
  def createMicrosoftAD(input: org.lyranthe.araethura.directory.models.CreateMicrosoftADRequest): F[org.lyranthe.araethura.directory.models.CreateMicrosoftADResult]
  def verifyTrust(input: org.lyranthe.araethura.directory.models.VerifyTrustRequest): F[org.lyranthe.araethura.directory.models.VerifyTrustResult]
  def deleteConditionalForwarder(input: org.lyranthe.araethura.directory.models.DeleteConditionalForwarderRequest): F[scala.Unit]
  def startSchemaExtension(input: org.lyranthe.araethura.directory.models.StartSchemaExtensionRequest): F[org.lyranthe.araethura.directory.models.StartSchemaExtensionResult]
  def createSnapshot(input: org.lyranthe.araethura.directory.models.CreateSnapshotRequest): F[org.lyranthe.araethura.directory.models.CreateSnapshotResult]
  def describeConditionalForwarders(input: org.lyranthe.araethura.directory.models.DescribeConditionalForwardersRequest): F[org.lyranthe.araethura.directory.models.DescribeConditionalForwardersResult]
  def describeDomainControllers(input: org.lyranthe.araethura.directory.models.DescribeDomainControllersRequest): F[org.lyranthe.araethura.directory.models.DescribeDomainControllersResult]
  def listSchemaExtensions(input: org.lyranthe.araethura.directory.models.ListSchemaExtensionsRequest): F[org.lyranthe.araethura.directory.models.ListSchemaExtensionsResult]
  def updateRadius(input: org.lyranthe.araethura.directory.models.UpdateRadiusRequest): F[scala.Unit]
  def enableRadius(input: org.lyranthe.araethura.directory.models.EnableRadiusRequest): F[scala.Unit]
  def updateNumberOfDomainControllers(input: org.lyranthe.araethura.directory.models.UpdateNumberOfDomainControllersRequest): F[scala.Unit]
  def addIpRoutes(input: org.lyranthe.araethura.directory.models.AddIpRoutesRequest): F[scala.Unit]
}