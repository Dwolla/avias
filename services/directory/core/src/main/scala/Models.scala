package org.lyranthe.araethura.directory.models
import org.lyranthe.araethura.directory.models
final case class DirectoryLimitExceededException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
final case class SchemaExtensionInfo(endDateTime: scala.Option[java.time.Instant] = None, schemaExtensionStatusReason: scala.Option[java.lang.String] = None, startDateTime: scala.Option[java.time.Instant] = None, schemaExtensionStatus: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, schemaExtensionId: scala.Option[java.lang.String] = None, directoryId: scala.Option[java.lang.String] = None)
case object RegisterEventTopicResult
final case class DescribeDirectoriesResult(directoryDescriptions: scala.Option[scala.List[models.DirectoryDescription]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class CreateSnapshotResult(snapshotId: scala.Option[java.lang.String] = None)
case object RemoveIpRoutesResult
final case class CreateTrustRequest(trustDirection: java.lang.String, remoteDomainName: java.lang.String, trustPassword: java.lang.String, directoryId: java.lang.String, trustType: scala.Option[java.lang.String] = None, conditionalForwarderIpAddrs: scala.Option[scala.List[java.lang.String]] = None)
final case class DescribeConditionalForwardersRequest(directoryId: java.lang.String, remoteDomainNames: scala.Option[scala.List[java.lang.String]] = None)
final case class EnableRadiusRequest(directoryId: java.lang.String, radiusSettings: models.RadiusSettings)
final case class CreateDirectoryRequest(name: java.lang.String, password: java.lang.String, size: java.lang.String, shortName: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, vpcSettings: scala.Option[models.DirectoryVpcSettings] = None)
final case class ClientException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
final case class CreateAliasRequest(directoryId: java.lang.String, alias: java.lang.String)
case object AddIpRoutesResult
final case class StartSchemaExtensionRequest(directoryId: java.lang.String, createSnapshotBeforeSchemaExtension: scala.Boolean, ldifContent: java.lang.String, description: java.lang.String)
final case class EventTopic(createdDateTime: scala.Option[java.time.Instant] = None, topicArn: scala.Option[java.lang.String] = None, topicName: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, directoryId: scala.Option[java.lang.String] = None)
final case class RegisterEventTopicRequest(directoryId: java.lang.String, topicName: java.lang.String)
case object EnableSsoResult
final case class AuthenticationFailedException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
case object DeregisterEventTopicResult
final case class InvalidNextTokenException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
final case class DescribeDomainControllersRequest(directoryId: java.lang.String, domainControllerIds: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
final case class DescribeConditionalForwardersResult(conditionalForwarders: scala.Option[scala.List[models.ConditionalForwarder]] = None)
final case class DescribeTrustsResult(trusts: scala.Option[scala.List[models.Trust]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class ConditionalForwarder(remoteDomainName: scala.Option[java.lang.String] = None, dnsIpAddrs: scala.Option[scala.List[java.lang.String]] = None, replicationScope: scala.Option[java.lang.String] = None)
case object UpdateRadiusResult
final case class UnsupportedOperationException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
final case class ConnectDirectoryResult(directoryId: scala.Option[java.lang.String] = None)
case object CancelSchemaExtensionResult
final case class DeleteDirectoryResult(directoryId: scala.Option[java.lang.String] = None)
final case class CreateConditionalForwarderRequest(directoryId: java.lang.String, remoteDomainName: java.lang.String, dnsIpAddrs: scala.List[java.lang.String])
final case class DeleteTrustRequest(trustId: java.lang.String, deleteAssociatedConditionalForwarder: scala.Option[scala.Boolean] = None)
final case class DirectoryLimits(cloudOnlyDirectoriesLimit: scala.Option[scala.Int] = None, cloudOnlyMicrosoftADCurrentCount: scala.Option[scala.Int] = None, connectedDirectoriesCurrentCount: scala.Option[scala.Int] = None, cloudOnlyDirectoriesCurrentCount: scala.Option[scala.Int] = None, cloudOnlyMicrosoftADLimit: scala.Option[scala.Int] = None, connectedDirectoriesLimit: scala.Option[scala.Int] = None, cloudOnlyDirectoriesLimitReached: scala.Option[scala.Boolean] = None, cloudOnlyMicrosoftADLimitReached: scala.Option[scala.Boolean] = None, connectedDirectoriesLimitReached: scala.Option[scala.Boolean] = None)
final case class DeleteSnapshotResult(snapshotId: scala.Option[java.lang.String] = None)
final case class DescribeDomainControllersResult(domainControllers: scala.Option[scala.List[models.DomainController]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DisableRadiusRequest(directoryId: java.lang.String)
final case class Attribute(name: scala.Option[java.lang.String] = None, value: scala.Option[java.lang.String] = None)
final case class InsufficientPermissionsException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
final case class RadiusSettings(authenticationProtocol: scala.Option[java.lang.String] = None, useSameUsername: scala.Option[scala.Boolean] = None, radiusTimeout: scala.Option[scala.Int] = None, displayLabel: scala.Option[java.lang.String] = None, sharedSecret: scala.Option[java.lang.String] = None, radiusServers: scala.Option[scala.List[java.lang.String]] = None, radiusPort: scala.Option[scala.Int] = None, radiusRetries: scala.Option[scala.Int] = None)
final case class SnapshotLimitExceededException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
final case class DomainController(vpcId: scala.Option[java.lang.String] = None, launchTime: scala.Option[java.time.Instant] = None, statusLastUpdatedDateTime: scala.Option[java.time.Instant] = None, subnetId: scala.Option[java.lang.String] = None, domainControllerId: scala.Option[java.lang.String] = None, availabilityZone: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, dnsIpAddr: scala.Option[java.lang.String] = None, statusReason: scala.Option[java.lang.String] = None, directoryId: scala.Option[java.lang.String] = None)
final case class CreateComputerRequest(password: java.lang.String, computerName: java.lang.String, directoryId: java.lang.String, computerAttributes: scala.Option[scala.List[models.Attribute]] = None, organizationalUnitDistinguishedName: scala.Option[java.lang.String] = None)
final case class CreateTrustResult(trustId: scala.Option[java.lang.String] = None)
final case class DomainControllerLimitExceededException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
case object UpdateConditionalForwarderResult
final case class DirectoryVpcSettingsDescription(vpcId: scala.Option[java.lang.String] = None, subnetIds: scala.Option[scala.List[java.lang.String]] = None, securityGroupId: scala.Option[java.lang.String] = None, availabilityZones: scala.Option[scala.List[java.lang.String]] = None)
final case class VerifyTrustRequest(trustId: java.lang.String)
final case class DeleteTrustResult(trustId: scala.Option[java.lang.String] = None)
case object AddTagsToResourceResult
final case class DescribeEventTopicsResult(eventTopics: scala.Option[scala.List[models.EventTopic]] = None)
case object RemoveTagsFromResourceResult
final case class DescribeDirectoriesRequest(directoryIds: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
case object DisableSsoResult
final case class RemoveIpRoutesRequest(directoryId: java.lang.String, cidrIps: scala.List[java.lang.String])
final case class GetSnapshotLimitsRequest(directoryId: java.lang.String)
final case class DescribeSnapshotsResult(snapshots: scala.Option[scala.List[models.Snapshot]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class GetSnapshotLimitsResult(snapshotLimits: scala.Option[models.SnapshotLimits] = None)
final case class DeleteSnapshotRequest(snapshotId: java.lang.String)
final case class CreateAliasResult(directoryId: scala.Option[java.lang.String] = None, alias: scala.Option[java.lang.String] = None)
final case class Snapshot(snapshotId: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, `type`: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, startTime: scala.Option[java.time.Instant] = None, directoryId: scala.Option[java.lang.String] = None)
final case class AddTagsToResourceRequest(resourceId: java.lang.String, tags: scala.List[models.Tag])
final case class GetDirectoryLimitsResult(directoryLimits: scala.Option[models.DirectoryLimits] = None)
final case class EntityDoesNotExistException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
final case class ListIpRoutesRequest(directoryId: java.lang.String, nextToken: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
final case class ListSchemaExtensionsResult(schemaExtensionsInfo: scala.Option[scala.List[models.SchemaExtensionInfo]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class CreateDirectoryResult(directoryId: scala.Option[java.lang.String] = None)
case object GetDirectoryLimitsRequest
final case class EntityAlreadyExistsException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
final case class ListSchemaExtensionsRequest(directoryId: java.lang.String, nextToken: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
final case class CreateSnapshotRequest(directoryId: java.lang.String, name: scala.Option[java.lang.String] = None)
final case class ConnectDirectoryRequest(name: java.lang.String, password: java.lang.String, size: java.lang.String, connectSettings: models.DirectoryConnectSettings, shortName: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None)
final case class DeleteConditionalForwarderRequest(directoryId: java.lang.String, remoteDomainName: java.lang.String)
final case class Trust(trustDirection: scala.Option[java.lang.String] = None, createdDateTime: scala.Option[java.time.Instant] = None, trustStateReason: scala.Option[java.lang.String] = None, remoteDomainName: scala.Option[java.lang.String] = None, lastUpdatedDateTime: scala.Option[java.time.Instant] = None, trustId: scala.Option[java.lang.String] = None, trustState: scala.Option[java.lang.String] = None, stateLastUpdatedDateTime: scala.Option[java.time.Instant] = None, trustType: scala.Option[java.lang.String] = None, directoryId: scala.Option[java.lang.String] = None)
final case class CreateMicrosoftADRequest(name: java.lang.String, password: java.lang.String, vpcSettings: models.DirectoryVpcSettings, shortName: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None)
final case class DescribeSnapshotsRequest(directoryId: scala.Option[java.lang.String] = None, snapshotIds: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
final case class VerifyTrustResult(trustId: scala.Option[java.lang.String] = None)
case object CreateConditionalForwarderResult
final case class SnapshotLimits(manualSnapshotsLimit: scala.Option[scala.Int] = None, manualSnapshotsCurrentCount: scala.Option[scala.Int] = None, manualSnapshotsLimitReached: scala.Option[scala.Boolean] = None)
case object DisableRadiusResult
final case class CreateComputerResult(computer: scala.Option[models.Computer] = None)
final case class ListTagsForResourceRequest(resourceId: java.lang.String, nextToken: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
final case class DescribeTrustsRequest(directoryId: scala.Option[java.lang.String] = None, trustIds: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None, limit: scala.Option[scala.Int] = None)
final case class DescribeEventTopicsRequest(directoryId: scala.Option[java.lang.String] = None, topicNames: scala.Option[scala.List[java.lang.String]] = None)
case object DeleteConditionalForwarderResult
final case class DirectoryConnectSettings(vpcId: java.lang.String, subnetIds: scala.List[java.lang.String], customerDnsIps: scala.List[java.lang.String], customerUserName: java.lang.String)
final case class UpdateNumberOfDomainControllersRequest(directoryId: java.lang.String, desiredNumber: scala.Int)
final case class DirectoryConnectSettingsDescription(vpcId: scala.Option[java.lang.String] = None, subnetIds: scala.Option[scala.List[java.lang.String]] = None, customerUserName: scala.Option[java.lang.String] = None, connectIps: scala.Option[scala.List[java.lang.String]] = None, securityGroupId: scala.Option[java.lang.String] = None, availabilityZones: scala.Option[scala.List[java.lang.String]] = None)
final case class ListTagsForResourceResult(tags: scala.Option[scala.List[models.Tag]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DirectoryUnavailableException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
case object UpdateNumberOfDomainControllersResult
final case class DeregisterEventTopicRequest(directoryId: java.lang.String, topicName: java.lang.String)
case object RestoreFromSnapshotResult
final case class Computer(computerId: scala.Option[java.lang.String] = None, computerName: scala.Option[java.lang.String] = None, computerAttributes: scala.Option[scala.List[models.Attribute]] = None)
final case class DirectoryDescription(alias: scala.Option[java.lang.String] = None, stageReason: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, ssoEnabled: scala.Option[scala.Boolean] = None, launchTime: scala.Option[java.time.Instant] = None, stageLastUpdatedDateTime: scala.Option[java.time.Instant] = None, radiusSettings: scala.Option[models.RadiusSettings] = None, stage: scala.Option[java.lang.String] = None, vpcSettings: scala.Option[models.DirectoryVpcSettingsDescription] = None, radiusStatus: scala.Option[java.lang.String] = None, `type`: scala.Option[java.lang.String] = None, size: scala.Option[java.lang.String] = None, connectSettings: scala.Option[models.DirectoryConnectSettingsDescription] = None, shortName: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, desiredNumberOfDomainControllers: scala.Option[scala.Int] = None, dnsIpAddrs: scala.Option[scala.List[java.lang.String]] = None, accessUrl: scala.Option[java.lang.String] = None, directoryId: scala.Option[java.lang.String] = None)
final case class ServiceException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
final case class UpdateConditionalForwarderRequest(directoryId: java.lang.String, remoteDomainName: java.lang.String, dnsIpAddrs: scala.List[java.lang.String])
final case class DirectoryVpcSettings(vpcId: java.lang.String, subnetIds: scala.List[java.lang.String])
final case class UpdateRadiusRequest(directoryId: java.lang.String, radiusSettings: models.RadiusSettings)
final case class ListIpRoutesResult(ipRoutesInfo: scala.Option[scala.List[models.IpRouteInfo]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class AddIpRoutesRequest(directoryId: java.lang.String, ipRoutes: scala.List[models.IpRoute], updateSecurityGroupForDirectoryControllers: scala.Option[scala.Boolean] = None)
final case class CreateMicrosoftADResult(directoryId: scala.Option[java.lang.String] = None)
final case class IpRouteInfo(ipRouteStatusMsg: scala.Option[java.lang.String] = None, addedDateTime: scala.Option[java.time.Instant] = None, description: scala.Option[java.lang.String] = None, ipRouteStatusReason: scala.Option[java.lang.String] = None, cidrIp: scala.Option[java.lang.String] = None, directoryId: scala.Option[java.lang.String] = None)
final case class StartSchemaExtensionResult(schemaExtensionId: scala.Option[java.lang.String] = None)
final case class TagLimitExceededException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
final case class IpRoute(cidrIp: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None)
final case class Tag(key: java.lang.String, value: java.lang.String)
final case class CancelSchemaExtensionRequest(directoryId: java.lang.String, schemaExtensionId: java.lang.String)
final case class DisableSsoRequest(directoryId: java.lang.String, userName: scala.Option[java.lang.String] = None, password: scala.Option[java.lang.String] = None)
final case class IpRouteLimitExceededException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
final case class RestoreFromSnapshotRequest(snapshotId: java.lang.String)
final case class DeleteDirectoryRequest(directoryId: java.lang.String)
final case class InvalidParameterException(message: scala.Option[java.lang.String] = None, requestId: scala.Option[java.lang.String] = None)
case object EnableRadiusResult
final case class EnableSsoRequest(directoryId: java.lang.String, userName: scala.Option[java.lang.String] = None, password: scala.Option[java.lang.String] = None)
final case class RemoveTagsFromResourceRequest(resourceId: java.lang.String, tagKeys: scala.List[java.lang.String])