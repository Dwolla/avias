package avias.kinesis.models
final case class AddTagsToStreamInput(streamName: java.lang.String, tags: scala.collection.immutable.Map[java.lang.String, java.lang.String])
final case class KMSDisabledException(message: scala.Option[java.lang.String] = scala.None)
final case class DescribeStreamSummaryInput(streamName: java.lang.String)
final case class UpdateShardCountOutput(streamName: scala.Option[java.lang.String] = scala.None, currentShardCount: scala.Option[scala.Int] = scala.None, targetShardCount: scala.Option[scala.Int] = scala.None)
final case class EnhancedMonitoringOutput(streamName: scala.Option[java.lang.String] = scala.None, currentShardLevelMetrics: scala.Option[scala.List[java.lang.String]] = scala.None, desiredShardLevelMetrics: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class LimitExceededException(message: scala.Option[java.lang.String] = scala.None)
final case class EnhancedMetrics(shardLevelMetrics: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class ListStreamsOutput(streamNames: scala.List[java.lang.String], hasMoreStreams: scala.Boolean)
case object DescribeLimitsInput
final case class SequenceNumberRange(startingSequenceNumber: java.lang.String, endingSequenceNumber: scala.Option[java.lang.String] = scala.None)
final case class ListStreamsInput(limit: scala.Option[scala.Int] = scala.None, exclusiveStartStreamName: scala.Option[java.lang.String] = scala.None)
final case class CreateStreamInput(streamName: java.lang.String, shardCount: scala.Int)
final case class DescribeStreamSummaryOutput(streamDescriptionSummary: avias.kinesis.models.StreamDescriptionSummary)
final case class EnableEnhancedMonitoringInput(streamName: java.lang.String, shardLevelMetrics: scala.List[java.lang.String])
final case class ListTagsForStreamInput(streamName: java.lang.String, exclusiveStartTagKey: scala.Option[java.lang.String] = scala.None, limit: scala.Option[scala.Int] = scala.None)
final case class Tag(key: java.lang.String, value: scala.Option[java.lang.String] = scala.None)
final case class MergeShardsInput(streamName: java.lang.String, shardToMerge: java.lang.String, adjacentShardToMerge: java.lang.String)
final case class DescribeStreamOutput(streamDescription: avias.kinesis.models.StreamDescription)
final case class InvalidArgumentException(message: scala.Option[java.lang.String] = scala.None)
final case class KMSThrottlingException(message: scala.Option[java.lang.String] = scala.None)
final case class PutRecordsRequestEntry(data: scala.Array[scala.Byte], partitionKey: java.lang.String, explicitHashKey: scala.Option[java.lang.String] = scala.None)
final case class PutRecordInput(partitionKey: java.lang.String, data: scala.Array[scala.Byte], streamName: java.lang.String, explicitHashKey: scala.Option[java.lang.String] = scala.None, sequenceNumberForOrdering: scala.Option[java.lang.String] = scala.None)
final case class IncreaseStreamRetentionPeriodInput(streamName: java.lang.String, retentionPeriodHours: scala.Int)
final case class PutRecordsInput(records: scala.List[avias.kinesis.models.PutRecordsRequestEntry], streamName: java.lang.String)
final case class ListTagsForStreamOutput(tags: scala.List[avias.kinesis.models.Tag], hasMoreTags: scala.Boolean)
final case class HashKeyRange(startingHashKey: java.lang.String, endingHashKey: java.lang.String)
final case class GetShardIteratorOutput(shardIterator: scala.Option[java.lang.String] = scala.None)
final case class KMSAccessDeniedException(message: scala.Option[java.lang.String] = scala.None)
final case class StreamDescription(streamCreationTimestamp: java.time.Instant, streamStatus: java.lang.String, hasMoreShards: scala.Boolean, retentionPeriodHours: scala.Int, streamARN: java.lang.String, shards: scala.List[avias.kinesis.models.Shard], streamName: java.lang.String, enhancedMonitoring: scala.List[avias.kinesis.models.EnhancedMetrics], encryptionType: scala.Option[java.lang.String] = scala.None, keyId: scala.Option[java.lang.String] = scala.None)
final case class DescribeStreamInput(streamName: java.lang.String, limit: scala.Option[scala.Int] = scala.None, exclusiveStartShardId: scala.Option[java.lang.String] = scala.None)
final case class UpdateShardCountInput(streamName: java.lang.String, targetShardCount: scala.Int, scalingType: java.lang.String)
final case class DisableEnhancedMonitoringInput(streamName: java.lang.String, shardLevelMetrics: scala.List[java.lang.String])
final case class PutRecordsResultEntry(sequenceNumber: scala.Option[java.lang.String] = scala.None, shardId: scala.Option[java.lang.String] = scala.None, errorCode: scala.Option[java.lang.String] = scala.None, errorMessage: scala.Option[java.lang.String] = scala.None)
final case class StartStreamEncryptionInput(streamName: java.lang.String, encryptionType: java.lang.String, keyId: java.lang.String)
final case class ResourceNotFoundException(message: scala.Option[java.lang.String] = scala.None)
final case class StreamDescriptionSummary(streamCreationTimestamp: java.time.Instant, streamStatus: java.lang.String, openShardCount: scala.Int, retentionPeriodHours: scala.Int, streamARN: java.lang.String, streamName: java.lang.String, enhancedMonitoring: scala.List[avias.kinesis.models.EnhancedMetrics], encryptionType: scala.Option[java.lang.String] = scala.None, keyId: scala.Option[java.lang.String] = scala.None)
final case class GetRecordsOutput(records: scala.List[avias.kinesis.models.Record], nextShardIterator: scala.Option[java.lang.String] = scala.None, millisBehindLatest: scala.Option[scala.Long] = scala.None)
final case class SplitShardInput(streamName: java.lang.String, shardToSplit: java.lang.String, newStartingHashKey: java.lang.String)
final case class StopStreamEncryptionInput(streamName: java.lang.String, encryptionType: java.lang.String, keyId: java.lang.String)
final case class Shard(shardId: java.lang.String, hashKeyRange: avias.kinesis.models.HashKeyRange, sequenceNumberRange: avias.kinesis.models.SequenceNumberRange, parentShardId: scala.Option[java.lang.String] = scala.None, adjacentParentShardId: scala.Option[java.lang.String] = scala.None)
final case class PutRecordOutput(shardId: java.lang.String, sequenceNumber: java.lang.String, encryptionType: scala.Option[java.lang.String] = scala.None)
final case class PutRecordsOutput(records: scala.List[avias.kinesis.models.PutRecordsResultEntry], failedRecordCount: scala.Option[scala.Int] = scala.None, encryptionType: scala.Option[java.lang.String] = scala.None)
final case class KMSOptInRequired(message: scala.Option[java.lang.String] = scala.None)
final case class GetRecordsInput(shardIterator: java.lang.String, limit: scala.Option[scala.Int] = scala.None)
final case class DecreaseStreamRetentionPeriodInput(streamName: java.lang.String, retentionPeriodHours: scala.Int)
final case class ExpiredIteratorException(message: scala.Option[java.lang.String] = scala.None)
final case class RemoveTagsFromStreamInput(streamName: java.lang.String, tagKeys: scala.List[java.lang.String])
final case class GetShardIteratorInput(shardId: java.lang.String, shardIteratorType: java.lang.String, streamName: java.lang.String, timestamp: scala.Option[java.time.Instant] = scala.None, startingSequenceNumber: scala.Option[java.lang.String] = scala.None)
final case class KMSNotFoundException(message: scala.Option[java.lang.String] = scala.None)
final case class ResourceInUseException(message: scala.Option[java.lang.String] = scala.None)
final case class DeleteStreamInput(streamName: java.lang.String)
final case class ProvisionedThroughputExceededException(message: scala.Option[java.lang.String] = scala.None)
final case class Record(sequenceNumber: java.lang.String, partitionKey: java.lang.String, data: scala.Array[scala.Byte], approximateArrivalTimestamp: scala.Option[java.time.Instant] = scala.None, encryptionType: scala.Option[java.lang.String] = scala.None)
final case class DescribeLimitsOutput(shardLimit: scala.Int, openShardCount: scala.Int)
final case class KMSInvalidStateException(message: scala.Option[java.lang.String] = scala.None)