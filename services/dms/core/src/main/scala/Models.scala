package org.lyranthe.araethura.dms.models
final case class ListTagsForResourceMessage(resourceArn: java.lang.String)
final case class DescribeReplicationSubnetGroupsMessage(filters: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Filter]] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None, marker: scala.Option[java.lang.String] = scala.None)
final case class ResourceNotFoundFault(message: scala.Option[java.lang.String] = scala.None)
final case class DescribeSchemasMessage(endpointArn: java.lang.String, marker: scala.Option[java.lang.String] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None)
final case class DeleteReplicationInstanceMessage(replicationInstanceArn: java.lang.String)
final case class DescribeConnectionsResponse(marker: scala.Option[java.lang.String] = scala.None, connections: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Connection]] = scala.None)
final case class TestConnectionMessage(replicationInstanceArn: java.lang.String, endpointArn: java.lang.String)
final case class SubnetAlreadyInUse(message: scala.Option[java.lang.String] = scala.None)
final case class SNSInvalidTopicFault(message: scala.Option[java.lang.String] = scala.None)
final case class AddTagsToResourceMessage(resourceArn: java.lang.String, tags: scala.List[org.lyranthe.araethura.dms.models.Tag])
final case class CreateEventSubscriptionMessage(subscriptionName: java.lang.String, snsTopicArn: java.lang.String, enabled: scala.Option[scala.Boolean] = scala.None, sourceIds: scala.Option[scala.List[java.lang.String]] = scala.None, sourceType: scala.Option[java.lang.String] = scala.None, tags: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Tag]] = scala.None, eventCategories: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class ReplicationTask(replicationTaskSettings: scala.Option[java.lang.String] = scala.None, targetEndpointArn: scala.Option[java.lang.String] = scala.None, sourceEndpointArn: scala.Option[java.lang.String] = scala.None, replicationTaskArn: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, replicationTaskIdentifier: scala.Option[java.lang.String] = scala.None, replicationInstanceArn: scala.Option[java.lang.String] = scala.None, lastFailureMessage: scala.Option[java.lang.String] = scala.None, tableMappings: scala.Option[java.lang.String] = scala.None, stopReason: scala.Option[java.lang.String] = scala.None, migrationType: scala.Option[java.lang.String] = scala.None, replicationTaskCreationDate: scala.Option[java.time.Instant] = scala.None, replicationTaskStartDate: scala.Option[java.time.Instant] = scala.None, replicationTaskStats: scala.Option[org.lyranthe.araethura.dms.models.ReplicationTaskStats] = scala.None)
final case class CreateEndpointResponse(endpoint: scala.Option[org.lyranthe.araethura.dms.models.Endpoint] = scala.None)
final case class DescribeRefreshSchemasStatusResponse(refreshSchemasStatus: scala.Option[org.lyranthe.araethura.dms.models.RefreshSchemasStatus] = scala.None)
final case class EventCategoryGroup(sourceType: scala.Option[java.lang.String] = scala.None, eventCategories: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DescribeReplicationTaskAssessmentResultsResponse(marker: scala.Option[java.lang.String] = scala.None, bucketName: scala.Option[java.lang.String] = scala.None, replicationTaskAssessmentResults: scala.Option[scala.List[org.lyranthe.araethura.dms.models.ReplicationTaskAssessmentResult]] = scala.None)
final case class DescribeReplicationInstancesResponse(marker: scala.Option[java.lang.String] = scala.None, replicationInstances: scala.Option[scala.List[org.lyranthe.araethura.dms.models.ReplicationInstance]] = scala.None)
final case class InvalidResourceStateFault(message: scala.Option[java.lang.String] = scala.None)
final case class VpcSecurityGroupMembership(vpcSecurityGroupId: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None)
final case class TableToReload(schemaName: scala.Option[java.lang.String] = scala.None, tableName: scala.Option[java.lang.String] = scala.None)
final case class DescribeAccountAttributesResponse(accountQuotas: scala.Option[scala.List[org.lyranthe.araethura.dms.models.AccountQuota]] = scala.None)
final case class ReplicationSubnetGroupDoesNotCoverEnoughAZs(message: scala.Option[java.lang.String] = scala.None)
final case class StartReplicationTaskResponse(replicationTask: scala.Option[org.lyranthe.araethura.dms.models.ReplicationTask] = scala.None)
final case class DeleteEndpointResponse(endpoint: scala.Option[org.lyranthe.araethura.dms.models.Endpoint] = scala.None)
final case class ModifyReplicationTaskResponse(replicationTask: scala.Option[org.lyranthe.araethura.dms.models.ReplicationTask] = scala.None)
final case class ModifyReplicationInstanceMessage(replicationInstanceArn: java.lang.String, multiAZ: scala.Option[scala.Boolean] = scala.None, autoMinorVersionUpgrade: scala.Option[scala.Boolean] = scala.None, replicationInstanceIdentifier: scala.Option[java.lang.String] = scala.None, preferredMaintenanceWindow: scala.Option[java.lang.String] = scala.None, replicationInstanceClass: scala.Option[java.lang.String] = scala.None, engineVersion: scala.Option[java.lang.String] = scala.None, vpcSecurityGroupIds: scala.Option[scala.List[java.lang.String]] = scala.None, allocatedStorage: scala.Option[scala.Int] = scala.None, applyImmediately: scala.Option[scala.Boolean] = scala.None, allowMajorVersionUpgrade: scala.Option[scala.Boolean] = scala.None)
final case class DynamoDbSettings(serviceAccessRoleArn: java.lang.String)
final case class DescribeEndpointTypesResponse(marker: scala.Option[java.lang.String] = scala.None, supportedEndpointTypes: scala.Option[scala.List[org.lyranthe.araethura.dms.models.SupportedEndpointType]] = scala.None)
final case class DescribeReplicationSubnetGroupsResponse(marker: scala.Option[java.lang.String] = scala.None, replicationSubnetGroups: scala.Option[scala.List[org.lyranthe.araethura.dms.models.ReplicationSubnetGroup]] = scala.None)
final case class MongoDbSettings(nestingLevel: scala.Option[java.lang.String] = scala.None, databaseName: scala.Option[java.lang.String] = scala.None, username: scala.Option[java.lang.String] = scala.None, docsToInvestigate: scala.Option[java.lang.String] = scala.None, extractDocId: scala.Option[java.lang.String] = scala.None, serverName: scala.Option[java.lang.String] = scala.None, authSource: scala.Option[java.lang.String] = scala.None, port: scala.Option[scala.Int] = scala.None, authMechanism: scala.Option[java.lang.String] = scala.None, authType: scala.Option[java.lang.String] = scala.None, password: scala.Option[java.lang.String] = scala.None)
final case class InsufficientResourceCapacityFault(message: scala.Option[java.lang.String] = scala.None)
final case class DescribeReplicationTaskAssessmentResultsMessage(replicationTaskArn: scala.Option[java.lang.String] = scala.None, marker: scala.Option[java.lang.String] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None)
final case class CreateReplicationSubnetGroupResponse(replicationSubnetGroup: scala.Option[org.lyranthe.araethura.dms.models.ReplicationSubnetGroup] = scala.None)
final case class StartReplicationTaskMessage(replicationTaskArn: java.lang.String, startReplicationTaskType: java.lang.String, cdcStartTime: scala.Option[java.time.Instant] = scala.None)
final case class DeleteEventSubscriptionResponse(eventSubscription: scala.Option[org.lyranthe.araethura.dms.models.EventSubscription] = scala.None)
final case class AccessDeniedFault(message: scala.Option[java.lang.String] = scala.None)
final case class Certificate(certificateArn: scala.Option[java.lang.String] = scala.None, certificatePem: scala.Option[java.lang.String] = scala.None, certificateIdentifier: scala.Option[java.lang.String] = scala.None, certificateOwner: scala.Option[java.lang.String] = scala.None, signingAlgorithm: scala.Option[java.lang.String] = scala.None, certificateCreationDate: scala.Option[java.time.Instant] = scala.None, validFromDate: scala.Option[java.time.Instant] = scala.None, validToDate: scala.Option[java.time.Instant] = scala.None, certificateWallet: scala.Option[scala.Array[scala.Byte]] = scala.None, keyLength: scala.Option[scala.Int] = scala.None)
final case class DescribeEndpointTypesMessage(filters: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Filter]] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None, marker: scala.Option[java.lang.String] = scala.None)
final case class Subnet(subnetIdentifier: scala.Option[java.lang.String] = scala.None, subnetStatus: scala.Option[java.lang.String] = scala.None, subnetAvailabilityZone: scala.Option[org.lyranthe.araethura.dms.models.AvailabilityZone] = scala.None)
final case class CreateReplicationInstanceResponse(replicationInstance: scala.Option[org.lyranthe.araethura.dms.models.ReplicationInstance] = scala.None)
final case class ReloadTablesResponse(replicationTaskArn: scala.Option[java.lang.String] = scala.None)
final case class S3Settings(bucketName: scala.Option[java.lang.String] = scala.None, csvDelimiter: scala.Option[java.lang.String] = scala.None, bucketFolder: scala.Option[java.lang.String] = scala.None, csvRowDelimiter: scala.Option[java.lang.String] = scala.None, externalTableDefinition: scala.Option[java.lang.String] = scala.None, serviceAccessRoleArn: scala.Option[java.lang.String] = scala.None, compressionType: scala.Option[java.lang.String] = scala.None)
case object AddTagsToResourceResponse
final case class CreateReplicationInstanceMessage(replicationInstanceIdentifier: java.lang.String, replicationInstanceClass: java.lang.String, multiAZ: scala.Option[scala.Boolean] = scala.None, autoMinorVersionUpgrade: scala.Option[scala.Boolean] = scala.None, publiclyAccessible: scala.Option[scala.Boolean] = scala.None, replicationSubnetGroupIdentifier: scala.Option[java.lang.String] = scala.None, kmsKeyId: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, preferredMaintenanceWindow: scala.Option[java.lang.String] = scala.None, engineVersion: scala.Option[java.lang.String] = scala.None, vpcSecurityGroupIds: scala.Option[scala.List[java.lang.String]] = scala.None, allocatedStorage: scala.Option[scala.Int] = scala.None, tags: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Tag]] = scala.None)
final case class ModifyEndpointResponse(endpoint: scala.Option[org.lyranthe.araethura.dms.models.Endpoint] = scala.None)
final case class InvalidSubnet(message: scala.Option[java.lang.String] = scala.None)
final case class ReplicationTaskAssessmentResult(s3ObjectUrl: scala.Option[java.lang.String] = scala.None, replicationTaskArn: scala.Option[java.lang.String] = scala.None, replicationTaskIdentifier: scala.Option[java.lang.String] = scala.None, assessmentResultsFile: scala.Option[java.lang.String] = scala.None, assessmentResults: scala.Option[java.lang.String] = scala.None, assessmentStatus: scala.Option[java.lang.String] = scala.None, replicationTaskLastAssessmentDate: scala.Option[java.time.Instant] = scala.None)
final case class DeleteCertificateResponse(certificate: scala.Option[org.lyranthe.araethura.dms.models.Certificate] = scala.None)
final case class AvailabilityZone(name: scala.Option[java.lang.String] = scala.None)
final case class DescribeRefreshSchemasStatusMessage(endpointArn: java.lang.String)
final case class TestConnectionResponse(connection: scala.Option[org.lyranthe.araethura.dms.models.Connection] = scala.None)
final case class DescribeEndpointsResponse(marker: scala.Option[java.lang.String] = scala.None, endpoints: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Endpoint]] = scala.None)
final case class RemoveTagsFromResourceMessage(resourceArn: java.lang.String, tagKeys: scala.List[java.lang.String])
final case class SupportedEndpointType(engineName: scala.Option[java.lang.String] = scala.None, supportsCDC: scala.Option[scala.Boolean] = scala.None, endpointType: scala.Option[java.lang.String] = scala.None)
final case class DescribeReplicationInstancesMessage(filters: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Filter]] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None, marker: scala.Option[java.lang.String] = scala.None)
final case class DescribeEventsMessage(sourceType: scala.Option[java.lang.String] = scala.None, filters: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Filter]] = scala.None, sourceIdentifier: scala.Option[java.lang.String] = scala.None, marker: scala.Option[java.lang.String] = scala.None, duration: scala.Option[scala.Int] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None, eventCategories: scala.Option[scala.List[java.lang.String]] = scala.None, startTime: scala.Option[java.time.Instant] = scala.None, endTime: scala.Option[java.time.Instant] = scala.None)
final case class DescribeEventCategoriesResponse(eventCategoryGroupList: scala.Option[scala.List[org.lyranthe.araethura.dms.models.EventCategoryGroup]] = scala.None)
final case class DescribeEventSubscriptionsResponse(marker: scala.Option[java.lang.String] = scala.None, eventSubscriptionsList: scala.Option[scala.List[org.lyranthe.araethura.dms.models.EventSubscription]] = scala.None)
final case class DescribeReplicationTasksResponse(marker: scala.Option[java.lang.String] = scala.None, replicationTasks: scala.Option[scala.List[org.lyranthe.araethura.dms.models.ReplicationTask]] = scala.None)
final case class DeleteEventSubscriptionMessage(subscriptionName: java.lang.String)
final case class StopReplicationTaskMessage(replicationTaskArn: java.lang.String)
final case class EventSubscription(subscriptionCreationTime: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, sourceType: scala.Option[java.lang.String] = scala.None, custSubscriptionId: scala.Option[java.lang.String] = scala.None, snsTopicArn: scala.Option[java.lang.String] = scala.None, customerAwsId: scala.Option[java.lang.String] = scala.None, sourceIdsList: scala.Option[scala.List[java.lang.String]] = scala.None, eventCategoriesList: scala.Option[scala.List[java.lang.String]] = scala.None, enabled: scala.Option[scala.Boolean] = scala.None)
final case class DescribeTableStatisticsMessage(replicationTaskArn: java.lang.String, marker: scala.Option[java.lang.String] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None, filters: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Filter]] = scala.None)
final case class ModifyReplicationSubnetGroupMessage(replicationSubnetGroupIdentifier: java.lang.String, subnetIds: scala.List[java.lang.String], replicationSubnetGroupDescription: scala.Option[java.lang.String] = scala.None)
final case class DeleteEndpointMessage(endpointArn: java.lang.String)
final case class ImportCertificateMessage(certificateIdentifier: java.lang.String, certificatePem: scala.Option[java.lang.String] = scala.None, certificateWallet: scala.Option[scala.Array[scala.Byte]] = scala.None, tags: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Tag]] = scala.None)
final case class ModifyReplicationSubnetGroupResponse(replicationSubnetGroup: scala.Option[org.lyranthe.araethura.dms.models.ReplicationSubnetGroup] = scala.None)
final case class ReplicationSubnetGroup(replicationSubnetGroupIdentifier: scala.Option[java.lang.String] = scala.None, replicationSubnetGroupDescription: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, subnetGroupStatus: scala.Option[java.lang.String] = scala.None, subnets: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Subnet]] = scala.None)
final case class ModifyEventSubscriptionResponse(eventSubscription: scala.Option[org.lyranthe.araethura.dms.models.EventSubscription] = scala.None)
final case class Event(sourceIdentifier: scala.Option[java.lang.String] = scala.None, message: scala.Option[java.lang.String] = scala.None, sourceType: scala.Option[java.lang.String] = scala.None, eventCategories: scala.Option[scala.List[java.lang.String]] = scala.None, date: scala.Option[java.time.Instant] = scala.None)
final case class UpgradeDependencyFailureFault(message: scala.Option[java.lang.String] = scala.None)
final case class DeleteReplicationTaskResponse(replicationTask: scala.Option[org.lyranthe.araethura.dms.models.ReplicationTask] = scala.None)
final case class DeleteReplicationSubnetGroupMessage(replicationSubnetGroupIdentifier: java.lang.String)
final case class ModifyEndpointMessage(endpointArn: java.lang.String, databaseName: scala.Option[java.lang.String] = scala.None, endpointIdentifier: scala.Option[java.lang.String] = scala.None, certificateArn: scala.Option[java.lang.String] = scala.None, engineName: scala.Option[java.lang.String] = scala.None, username: scala.Option[java.lang.String] = scala.None, extraConnectionAttributes: scala.Option[java.lang.String] = scala.None, serverName: scala.Option[java.lang.String] = scala.None, port: scala.Option[scala.Int] = scala.None, dynamoDbSettings: scala.Option[org.lyranthe.araethura.dms.models.DynamoDbSettings] = scala.None, mongoDbSettings: scala.Option[org.lyranthe.araethura.dms.models.MongoDbSettings] = scala.None, s3Settings: scala.Option[org.lyranthe.araethura.dms.models.S3Settings] = scala.None, sslMode: scala.Option[java.lang.String] = scala.None, password: scala.Option[java.lang.String] = scala.None, endpointType: scala.Option[java.lang.String] = scala.None)
final case class Endpoint(databaseName: scala.Option[java.lang.String] = scala.None, endpointArn: scala.Option[java.lang.String] = scala.None, endpointIdentifier: scala.Option[java.lang.String] = scala.None, certificateArn: scala.Option[java.lang.String] = scala.None, engineName: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, username: scala.Option[java.lang.String] = scala.None, kmsKeyId: scala.Option[java.lang.String] = scala.None, externalId: scala.Option[java.lang.String] = scala.None, extraConnectionAttributes: scala.Option[java.lang.String] = scala.None, serverName: scala.Option[java.lang.String] = scala.None, port: scala.Option[scala.Int] = scala.None, dynamoDbSettings: scala.Option[org.lyranthe.araethura.dms.models.DynamoDbSettings] = scala.None, mongoDbSettings: scala.Option[org.lyranthe.araethura.dms.models.MongoDbSettings] = scala.None, s3Settings: scala.Option[org.lyranthe.araethura.dms.models.S3Settings] = scala.None, sslMode: scala.Option[java.lang.String] = scala.None, endpointType: scala.Option[java.lang.String] = scala.None)
final case class DescribeReplicationTasksMessage(filters: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Filter]] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None, marker: scala.Option[java.lang.String] = scala.None)
final case class InvalidCertificateFault(message: scala.Option[java.lang.String] = scala.None)
case object DescribeAccountAttributesMessage
final case class OrderableReplicationInstance(engineVersion: scala.Option[java.lang.String] = scala.None, replicationInstanceClass: scala.Option[java.lang.String] = scala.None, storageType: scala.Option[java.lang.String] = scala.None, minAllocatedStorage: scala.Option[scala.Int] = scala.None, maxAllocatedStorage: scala.Option[scala.Int] = scala.None, defaultAllocatedStorage: scala.Option[scala.Int] = scala.None, includedAllocatedStorage: scala.Option[scala.Int] = scala.None)
final case class DescribeSchemasResponse(marker: scala.Option[java.lang.String] = scala.None, schemas: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DescribeEventSubscriptionsMessage(subscriptionName: scala.Option[java.lang.String] = scala.None, marker: scala.Option[java.lang.String] = scala.None, filters: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Filter]] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None)
final case class RefreshSchemasResponse(refreshSchemasStatus: scala.Option[org.lyranthe.araethura.dms.models.RefreshSchemasStatus] = scala.None)
final case class DescribeOrderableReplicationInstancesResponse(orderableReplicationInstances: scala.Option[scala.List[org.lyranthe.araethura.dms.models.OrderableReplicationInstance]] = scala.None, marker: scala.Option[java.lang.String] = scala.None)
case object DeleteReplicationSubnetGroupResponse
final case class DescribeEventCategoriesMessage(sourceType: scala.Option[java.lang.String] = scala.None, filters: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Filter]] = scala.None)
final case class ListTagsForResourceResponse(tagList: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Tag]] = scala.None)
final case class DeleteReplicationInstanceResponse(replicationInstance: scala.Option[org.lyranthe.araethura.dms.models.ReplicationInstance] = scala.None)
final case class DescribeTableStatisticsResponse(replicationTaskArn: scala.Option[java.lang.String] = scala.None, marker: scala.Option[java.lang.String] = scala.None, tableStatistics: scala.Option[scala.List[org.lyranthe.araethura.dms.models.TableStatistics]] = scala.None)
final case class ModifyEventSubscriptionMessage(subscriptionName: java.lang.String, snsTopicArn: scala.Option[java.lang.String] = scala.None, sourceType: scala.Option[java.lang.String] = scala.None, eventCategories: scala.Option[scala.List[java.lang.String]] = scala.None, enabled: scala.Option[scala.Boolean] = scala.None)
final case class CreateReplicationTaskResponse(replicationTask: scala.Option[org.lyranthe.araethura.dms.models.ReplicationTask] = scala.None)
final case class DeleteReplicationTaskMessage(replicationTaskArn: java.lang.String)
final case class DescribeEventsResponse(marker: scala.Option[java.lang.String] = scala.None, events: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Event]] = scala.None)
final case class RefreshSchemasMessage(endpointArn: java.lang.String, replicationInstanceArn: java.lang.String)
case object RemoveTagsFromResourceResponse
final case class DescribeCertificatesResponse(marker: scala.Option[java.lang.String] = scala.None, certificates: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Certificate]] = scala.None)
final case class ModifyReplicationInstanceResponse(replicationInstance: scala.Option[org.lyranthe.araethura.dms.models.ReplicationInstance] = scala.None)
final case class ReloadTablesMessage(replicationTaskArn: java.lang.String, tablesToReload: scala.List[org.lyranthe.araethura.dms.models.TableToReload])
final case class CreateEndpointMessage(endpointIdentifier: java.lang.String, engineName: java.lang.String, endpointType: java.lang.String, databaseName: scala.Option[java.lang.String] = scala.None, certificateArn: scala.Option[java.lang.String] = scala.None, username: scala.Option[java.lang.String] = scala.None, kmsKeyId: scala.Option[java.lang.String] = scala.None, extraConnectionAttributes: scala.Option[java.lang.String] = scala.None, serverName: scala.Option[java.lang.String] = scala.None, port: scala.Option[scala.Int] = scala.None, dynamoDbSettings: scala.Option[org.lyranthe.araethura.dms.models.DynamoDbSettings] = scala.None, mongoDbSettings: scala.Option[org.lyranthe.araethura.dms.models.MongoDbSettings] = scala.None, s3Settings: scala.Option[org.lyranthe.araethura.dms.models.S3Settings] = scala.None, tags: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Tag]] = scala.None, sslMode: scala.Option[java.lang.String] = scala.None, password: scala.Option[java.lang.String] = scala.None)
final case class DescribeOrderableReplicationInstancesMessage(maxRecords: scala.Option[scala.Int] = scala.None, marker: scala.Option[java.lang.String] = scala.None)
final case class ReplicationPendingModifiedValues(replicationInstanceClass: scala.Option[java.lang.String] = scala.None, engineVersion: scala.Option[java.lang.String] = scala.None, allocatedStorage: scala.Option[scala.Int] = scala.None, multiAZ: scala.Option[scala.Boolean] = scala.None)
final case class AccountQuota(accountQuotaName: scala.Option[java.lang.String] = scala.None, used: scala.Option[scala.Long] = scala.None, max: scala.Option[scala.Long] = scala.None)
final case class DescribeCertificatesMessage(filters: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Filter]] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None, marker: scala.Option[java.lang.String] = scala.None)
final case class CreateEventSubscriptionResponse(eventSubscription: scala.Option[org.lyranthe.araethura.dms.models.EventSubscription] = scala.None)
final case class KMSKeyNotAccessibleFault(message: scala.Option[java.lang.String] = scala.None)
final case class ReplicationTaskStats(tablesErrored: scala.Option[scala.Int] = scala.None, tablesLoading: scala.Option[scala.Int] = scala.None, tablesLoaded: scala.Option[scala.Int] = scala.None, tablesQueued: scala.Option[scala.Int] = scala.None, fullLoadProgressPercent: scala.Option[scala.Int] = scala.None, elapsedTimeMillis: scala.Option[scala.Long] = scala.None)
final case class SNSNoAuthorizationFault(message: scala.Option[java.lang.String] = scala.None)
final case class Tag(key: scala.Option[java.lang.String] = scala.None, value: scala.Option[java.lang.String] = scala.None)
final case class RefreshSchemasStatus(endpointArn: scala.Option[java.lang.String] = scala.None, replicationInstanceArn: scala.Option[java.lang.String] = scala.None, lastFailureMessage: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, lastRefreshDate: scala.Option[java.time.Instant] = scala.None)
final case class DescribeConnectionsMessage(filters: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Filter]] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None, marker: scala.Option[java.lang.String] = scala.None)
final case class ModifyReplicationTaskMessage(replicationTaskArn: java.lang.String, replicationTaskIdentifier: scala.Option[java.lang.String] = scala.None, tableMappings: scala.Option[java.lang.String] = scala.None, replicationTaskSettings: scala.Option[java.lang.String] = scala.None, migrationType: scala.Option[java.lang.String] = scala.None, cdcStartTime: scala.Option[java.time.Instant] = scala.None)
final case class Connection(endpointArn: scala.Option[java.lang.String] = scala.None, endpointIdentifier: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, replicationInstanceIdentifier: scala.Option[java.lang.String] = scala.None, replicationInstanceArn: scala.Option[java.lang.String] = scala.None, lastFailureMessage: scala.Option[java.lang.String] = scala.None)
final case class StorageQuotaExceededFault(message: scala.Option[java.lang.String] = scala.None)
final case class DeleteCertificateMessage(certificateArn: java.lang.String)
final case class CreateReplicationSubnetGroupMessage(replicationSubnetGroupIdentifier: java.lang.String, replicationSubnetGroupDescription: java.lang.String, subnetIds: scala.List[java.lang.String], tags: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Tag]] = scala.None)
final case class ImportCertificateResponse(certificate: scala.Option[org.lyranthe.araethura.dms.models.Certificate] = scala.None)
final case class Filter(name: java.lang.String, values: scala.List[java.lang.String])
final case class StopReplicationTaskResponse(replicationTask: scala.Option[org.lyranthe.araethura.dms.models.ReplicationTask] = scala.None)
final case class CreateReplicationTaskMessage(sourceEndpointArn: java.lang.String, replicationTaskIdentifier: java.lang.String, targetEndpointArn: java.lang.String, replicationInstanceArn: java.lang.String, tableMappings: java.lang.String, migrationType: java.lang.String, replicationTaskSettings: scala.Option[java.lang.String] = scala.None, cdcStartTime: scala.Option[java.time.Instant] = scala.None, tags: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Tag]] = scala.None)
final case class ResourceQuotaExceededFault(message: scala.Option[java.lang.String] = scala.None)
final case class StartReplicationTaskAssessmentMessage(replicationTaskArn: java.lang.String)
final case class StartReplicationTaskAssessmentResponse(replicationTask: scala.Option[org.lyranthe.araethura.dms.models.ReplicationTask] = scala.None)
final case class ResourceAlreadyExistsFault(message: scala.Option[java.lang.String] = scala.None)
final case class DescribeEndpointsMessage(filters: scala.Option[scala.List[org.lyranthe.araethura.dms.models.Filter]] = scala.None, maxRecords: scala.Option[scala.Int] = scala.None, marker: scala.Option[java.lang.String] = scala.None)
final case class TableStatistics(schemaName: scala.Option[java.lang.String] = scala.None, tableName: scala.Option[java.lang.String] = scala.None, tableState: scala.Option[java.lang.String] = scala.None, validationState: scala.Option[java.lang.String] = scala.None, fullLoadCondtnlChkFailedRows: scala.Option[scala.Long] = scala.None, ddls: scala.Option[scala.Long] = scala.None, inserts: scala.Option[scala.Long] = scala.None, fullLoadRows: scala.Option[scala.Long] = scala.None, fullLoadErrorRows: scala.Option[scala.Long] = scala.None, deletes: scala.Option[scala.Long] = scala.None, validationSuspendedRecords: scala.Option[scala.Long] = scala.None, updates: scala.Option[scala.Long] = scala.None, validationFailedRecords: scala.Option[scala.Long] = scala.None, validationPendingRecords: scala.Option[scala.Long] = scala.None, lastUpdateTime: scala.Option[java.time.Instant] = scala.None)
final case class ReplicationInstance(replicationInstancePublicIpAddress: scala.Option[java.lang.String] = scala.None, replicationInstanceIdentifier: scala.Option[java.lang.String] = scala.None, kmsKeyId: scala.Option[java.lang.String] = scala.None, replicationInstancePrivateIpAddress: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, replicationInstanceArn: scala.Option[java.lang.String] = scala.None, preferredMaintenanceWindow: scala.Option[java.lang.String] = scala.None, replicationInstanceClass: scala.Option[java.lang.String] = scala.None, replicationInstanceStatus: scala.Option[java.lang.String] = scala.None, engineVersion: scala.Option[java.lang.String] = scala.None, secondaryAvailabilityZone: scala.Option[java.lang.String] = scala.None, vpcSecurityGroups: scala.Option[scala.List[org.lyranthe.araethura.dms.models.VpcSecurityGroupMembership]] = scala.None, replicationInstancePrivateIpAddresses: scala.Option[scala.List[java.lang.String]] = scala.None, replicationSubnetGroup: scala.Option[org.lyranthe.araethura.dms.models.ReplicationSubnetGroup] = scala.None, allocatedStorage: scala.Option[scala.Int] = scala.None, pendingModifiedValues: scala.Option[org.lyranthe.araethura.dms.models.ReplicationPendingModifiedValues] = scala.None, multiAZ: scala.Option[scala.Boolean] = scala.None, autoMinorVersionUpgrade: scala.Option[scala.Boolean] = scala.None, publiclyAccessible: scala.Option[scala.Boolean] = scala.None, replicationInstancePublicIpAddresses: scala.Option[scala.List[java.lang.String]] = scala.None, instanceCreateTime: scala.Option[java.time.Instant] = scala.None)