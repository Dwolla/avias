package org.lyranthe.araethura.ssm
trait Amazonssm[F[_]] {
  def getDeployablePatchSnapshotForInstance(input: models.GetDeployablePatchSnapshotForInstanceRequest): F[models.GetDeployablePatchSnapshotForInstanceResult]
  def deleteParameters(input: models.DeleteParametersRequest): F[models.DeleteParametersResult]
  def listDocuments(input: models.ListDocumentsRequest): F[models.ListDocumentsResult]
  def listResourceDataSync(input: models.ListResourceDataSyncRequest): F[models.ListResourceDataSyncResult]
  def describeInstancePatches(input: models.DescribeInstancePatchesRequest): F[models.DescribeInstancePatchesResult]
  def describePatchBaselines(input: models.DescribePatchBaselinesRequest): F[models.DescribePatchBaselinesResult]
  def describeEffectiveInstanceAssociations(input: models.DescribeEffectiveInstanceAssociationsRequest): F[models.DescribeEffectiveInstanceAssociationsResult]
  def describeInstancePatchStatesForPatchGroup(input: models.DescribeInstancePatchStatesForPatchGroupRequest): F[models.DescribeInstancePatchStatesForPatchGroupResult]
  def describeMaintenanceWindowExecutions(input: models.DescribeMaintenanceWindowExecutionsRequest): F[models.DescribeMaintenanceWindowExecutionsResult]
  def updateAssociation(input: models.UpdateAssociationRequest): F[models.UpdateAssociationResult]
  def describeInstanceAssociationsStatus(input: models.DescribeInstanceAssociationsStatusRequest): F[models.DescribeInstanceAssociationsStatusResult]
  def describeEffectivePatchesForPatchBaseline(input: models.DescribeEffectivePatchesForPatchBaselineRequest): F[models.DescribeEffectivePatchesForPatchBaselineResult]
  def createAssociation(input: models.CreateAssociationRequest): F[models.CreateAssociationResult]
  def createPatchBaseline(input: models.CreatePatchBaselineRequest): F[models.CreatePatchBaselineResult]
  def createDocument(input: models.CreateDocumentRequest): F[models.CreateDocumentResult]
  def registerPatchBaselineForPatchGroup(input: models.RegisterPatchBaselineForPatchGroupRequest): F[models.RegisterPatchBaselineForPatchGroupResult]
  def createAssociationBatch(input: models.CreateAssociationBatchRequest): F[models.CreateAssociationBatchResult]
  def deleteResourceDataSync(input: models.DeleteResourceDataSyncRequest): F[scala.Unit]
  def getCommandInvocation(input: models.GetCommandInvocationRequest): F[models.GetCommandInvocationResult]
  def modifyDocumentPermission(input: models.ModifyDocumentPermissionRequest): F[scala.Unit]
  def updateMaintenanceWindowTask(input: models.UpdateMaintenanceWindowTaskRequest): F[models.UpdateMaintenanceWindowTaskResult]
  def describeMaintenanceWindowExecutionTasks(input: models.DescribeMaintenanceWindowExecutionTasksRequest): F[models.DescribeMaintenanceWindowExecutionTasksResult]
  def describePatchGroupState(input: models.DescribePatchGroupStateRequest): F[models.DescribePatchGroupStateResult]
  def getMaintenanceWindowExecutionTask(input: models.GetMaintenanceWindowExecutionTaskRequest): F[models.GetMaintenanceWindowExecutionTaskResult]
  def getParametersByPath(input: models.GetParametersByPathRequest): F[models.GetParametersByPathResult]
  def registerTaskWithMaintenanceWindow(input: models.RegisterTaskWithMaintenanceWindowRequest): F[models.RegisterTaskWithMaintenanceWindowResult]
  def sendAutomationSignal(input: models.SendAutomationSignalRequest): F[scala.Unit]
  def listDocumentVersions(input: models.ListDocumentVersionsRequest): F[models.ListDocumentVersionsResult]
  def updateManagedInstanceRole(input: models.UpdateManagedInstanceRoleRequest): F[scala.Unit]
  def getInventorySchema(input: models.GetInventorySchemaRequest): F[models.GetInventorySchemaResult]
  def describeMaintenanceWindows(input: models.DescribeMaintenanceWindowsRequest): F[models.DescribeMaintenanceWindowsResult]
  def describeAvailablePatches(input: models.DescribeAvailablePatchesRequest): F[models.DescribeAvailablePatchesResult]
  def getInventory(input: models.GetInventoryRequest): F[models.GetInventoryResult]
  def updatePatchBaseline(input: models.UpdatePatchBaselineRequest): F[models.UpdatePatchBaselineResult]
  def listTagsForResource(input: models.ListTagsForResourceRequest): F[models.ListTagsForResourceResult]
  def describeMaintenanceWindowExecutionTaskInvocations(input: models.DescribeMaintenanceWindowExecutionTaskInvocationsRequest): F[models.DescribeMaintenanceWindowExecutionTaskInvocationsResult]
  def registerDefaultPatchBaseline(input: models.RegisterDefaultPatchBaselineRequest): F[models.RegisterDefaultPatchBaselineResult]
  def describeParameters(input: models.DescribeParametersRequest): F[models.DescribeParametersResult]
  def sendCommand(input: models.SendCommandRequest): F[models.SendCommandResult]
  def describeMaintenanceWindowTasks(input: models.DescribeMaintenanceWindowTasksRequest): F[models.DescribeMaintenanceWindowTasksResult]
  def listAssociationVersions(input: models.ListAssociationVersionsRequest): F[models.ListAssociationVersionsResult]
  def deregisterTaskFromMaintenanceWindow(input: models.DeregisterTaskFromMaintenanceWindowRequest): F[models.DeregisterTaskFromMaintenanceWindowResult]
  def updateDocument(input: models.UpdateDocumentRequest): F[models.UpdateDocumentResult]
  def updateAssociationStatus(input: models.UpdateAssociationStatusRequest): F[models.UpdateAssociationStatusResult]
  def getPatchBaselineForPatchGroup(input: models.GetPatchBaselineForPatchGroupRequest): F[models.GetPatchBaselineForPatchGroupResult]
  def listInventoryEntries(input: models.ListInventoryEntriesRequest): F[models.ListInventoryEntriesResult]
  def putInventory(input: models.PutInventoryRequest): F[scala.Unit]
  def getParameterHistory(input: models.GetParameterHistoryRequest): F[models.GetParameterHistoryResult]
  def listCommands(input: models.ListCommandsRequest): F[models.ListCommandsResult]
  def getMaintenanceWindowTask(input: models.GetMaintenanceWindowTaskRequest): F[models.GetMaintenanceWindowTaskResult]
  def createActivation(input: models.CreateActivationRequest): F[models.CreateActivationResult]
  def stopAutomationExecution(input: models.StopAutomationExecutionRequest): F[scala.Unit]
  def getPatchBaseline(input: models.GetPatchBaselineRequest): F[models.GetPatchBaselineResult]
  def listResourceComplianceSummaries(input: models.ListResourceComplianceSummariesRequest): F[models.ListResourceComplianceSummariesResult]
  def addTagsToResource(input: models.AddTagsToResourceRequest): F[scala.Unit]
  def deleteActivation(input: models.DeleteActivationRequest): F[scala.Unit]
  def describeInstancePatchStates(input: models.DescribeInstancePatchStatesRequest): F[models.DescribeInstancePatchStatesResult]
  def getAutomationExecution(input: models.GetAutomationExecutionRequest): F[models.GetAutomationExecutionResult]
  def createResourceDataSync(input: models.CreateResourceDataSyncRequest): F[scala.Unit]
  def cancelCommand(input: models.CancelCommandRequest): F[scala.Unit]
  def updateMaintenanceWindow(input: models.UpdateMaintenanceWindowRequest): F[models.UpdateMaintenanceWindowResult]
  def getMaintenanceWindowExecution(input: models.GetMaintenanceWindowExecutionRequest): F[models.GetMaintenanceWindowExecutionResult]
  def getParameter(input: models.GetParameterRequest): F[models.GetParameterResult]
  def startAutomationExecution(input: models.StartAutomationExecutionRequest): F[models.StartAutomationExecutionResult]
  def createMaintenanceWindow(input: models.CreateMaintenanceWindowRequest): F[models.CreateMaintenanceWindowResult]
  def describeInstanceInformation(input: models.DescribeInstanceInformationRequest): F[models.DescribeInstanceInformationResult]
  def putComplianceItems(input: models.PutComplianceItemsRequest): F[scala.Unit]
  def putParameter(input: models.PutParameterRequest): F[models.PutParameterResult]
  def describeDocumentPermission(input: models.DescribeDocumentPermissionRequest): F[models.DescribeDocumentPermissionResponse]
  def updateDocumentDefaultVersion(input: models.UpdateDocumentDefaultVersionRequest): F[models.UpdateDocumentDefaultVersionResult]
  def describeDocument(input: models.DescribeDocumentRequest): F[models.DescribeDocumentResult]
  def registerTargetWithMaintenanceWindow(input: models.RegisterTargetWithMaintenanceWindowRequest): F[models.RegisterTargetWithMaintenanceWindowResult]
  def listComplianceItems(input: models.ListComplianceItemsRequest): F[models.ListComplianceItemsResult]
  def deleteDocument(input: models.DeleteDocumentRequest): F[scala.Unit]
  def deregisterManagedInstance(input: models.DeregisterManagedInstanceRequest): F[scala.Unit]
  def deregisterPatchBaselineForPatchGroup(input: models.DeregisterPatchBaselineForPatchGroupRequest): F[models.DeregisterPatchBaselineForPatchGroupResult]
  def describeActivations(input: models.DescribeActivationsRequest): F[models.DescribeActivationsResult]
  def getDocument(input: models.GetDocumentRequest): F[models.GetDocumentResult]
  def removeTagsFromResource(input: models.RemoveTagsFromResourceRequest): F[scala.Unit]
  def getMaintenanceWindow(input: models.GetMaintenanceWindowRequest): F[models.GetMaintenanceWindowResult]
  def updateMaintenanceWindowTarget(input: models.UpdateMaintenanceWindowTargetRequest): F[models.UpdateMaintenanceWindowTargetResult]
  def deleteAssociation(input: models.DeleteAssociationRequest): F[scala.Unit]
  def deleteMaintenanceWindow(input: models.DeleteMaintenanceWindowRequest): F[models.DeleteMaintenanceWindowResult]
  def getDefaultPatchBaseline(input: models.GetDefaultPatchBaselineRequest): F[models.GetDefaultPatchBaselineResult]
  def listComplianceSummaries(input: models.ListComplianceSummariesRequest): F[models.ListComplianceSummariesResult]
  def deletePatchBaseline(input: models.DeletePatchBaselineRequest): F[models.DeletePatchBaselineResult]
  def listCommandInvocations(input: models.ListCommandInvocationsRequest): F[models.ListCommandInvocationsResult]
  def getParameters(input: models.GetParametersRequest): F[models.GetParametersResult]
  def listAssociations(input: models.ListAssociationsRequest): F[models.ListAssociationsResult]
  def deleteParameter(input: models.DeleteParameterRequest): F[scala.Unit]
  def describeMaintenanceWindowTargets(input: models.DescribeMaintenanceWindowTargetsRequest): F[models.DescribeMaintenanceWindowTargetsResult]
  def getMaintenanceWindowExecutionTaskInvocation(input: models.GetMaintenanceWindowExecutionTaskInvocationRequest): F[models.GetMaintenanceWindowExecutionTaskInvocationResult]
  def describePatchGroups(input: models.DescribePatchGroupsRequest): F[models.DescribePatchGroupsResult]
  def deregisterTargetFromMaintenanceWindow(input: models.DeregisterTargetFromMaintenanceWindowRequest): F[models.DeregisterTargetFromMaintenanceWindowResult]
  def describeAssociation(input: models.DescribeAssociationRequest): F[models.DescribeAssociationResult]
  def describeAutomationExecutions(input: models.DescribeAutomationExecutionsRequest): F[models.DescribeAutomationExecutionsResult]
}