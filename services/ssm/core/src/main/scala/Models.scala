package org.lyranthe.araethura.ssm.models
import org.lyranthe.araethura.ssm.models
final case class ListAssociationsRequest(associationFilterList: scala.Option[scala.List[models.AssociationFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeMaintenanceWindowsResult(windowIdentities: scala.Option[scala.List[models.MaintenanceWindowIdentity]] = None, nextToken: scala.Option[java.lang.String] = None)
case object CancelCommandResult
final case class DescribeMaintenanceWindowExecutionTaskInvocationsRequest(taskId: java.lang.String, windowExecutionId: java.lang.String, filters: scala.Option[scala.List[models.MaintenanceWindowFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class ResourceDataSyncNotFoundException(syncName: scala.Option[java.lang.String] = None)
final case class DeleteParametersRequest(names: scala.List[java.lang.String])
final case class GetParametersResult(parameters: scala.Option[scala.List[models.Parameter]] = None, invalidParameters: scala.Option[scala.List[java.lang.String]] = None)
final case class SendCommandRequest(documentName: java.lang.String, targets: scala.Option[scala.List[models.Target]] = None, documentHash: scala.Option[java.lang.String] = None, timeoutSeconds: scala.Option[scala.Int] = None, comment: scala.Option[java.lang.String] = None, documentHashType: scala.Option[java.lang.String] = None, outputS3KeyPrefix: scala.Option[java.lang.String] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, outputS3BucketName: scala.Option[java.lang.String] = None, serviceRoleArn: scala.Option[java.lang.String] = None, maxConcurrency: scala.Option[java.lang.String] = None, outputS3Region: scala.Option[java.lang.String] = None, instanceIds: scala.Option[scala.List[java.lang.String]] = None, notificationConfig: scala.Option[models.NotificationConfig] = None, maxErrors: scala.Option[java.lang.String] = None)
final case class InventoryResultEntity(id: scala.Option[java.lang.String] = None, data: scala.Option[scala.collection.immutable.Map[java.lang.String, models.InventoryResultItem]] = None)
final case class DescribePatchGroupStateResult(instancesWithMissingPatches: scala.Option[scala.Int] = None, instances: scala.Option[scala.Int] = None, instancesWithInstalledPatches: scala.Option[scala.Int] = None, instancesWithInstalledOtherPatches: scala.Option[scala.Int] = None, instancesWithFailedPatches: scala.Option[scala.Int] = None, instancesWithNotApplicablePatches: scala.Option[scala.Int] = None)
final case class DescribeDocumentResult(document: scala.Option[models.DocumentDescription] = None)
final case class MaintenanceWindowExecution(status: scala.Option[java.lang.String] = None, windowExecutionId: scala.Option[java.lang.String] = None, startTime: scala.Option[java.time.Instant] = None, endTime: scala.Option[java.time.Instant] = None, windowId: scala.Option[java.lang.String] = None, statusDetails: scala.Option[java.lang.String] = None)
final case class DocumentVersionLimitExceeded(message: scala.Option[java.lang.String] = None)
case object PutComplianceItemsResult
final case class GetMaintenanceWindowRequest(windowId: java.lang.String)
final case class DeleteParametersResult(deletedParameters: scala.Option[scala.List[java.lang.String]] = None, invalidParameters: scala.Option[scala.List[java.lang.String]] = None)
final case class UpdateMaintenanceWindowTargetResult(targets: scala.Option[scala.List[models.Target]] = None, name: scala.Option[java.lang.String] = None, ownerInformation: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, windowId: scala.Option[java.lang.String] = None, windowTargetId: scala.Option[java.lang.String] = None)
final case class PatchBaselineIdentity(defaultBaseline: scala.Option[scala.Boolean] = None, baselineName: scala.Option[java.lang.String] = None, baselineDescription: scala.Option[java.lang.String] = None, operatingSystem: scala.Option[java.lang.String] = None, baselineId: scala.Option[java.lang.String] = None)
case object InvalidResourceId
final case class SeveritySummary(unspecifiedCount: scala.Option[scala.Int] = None, lowCount: scala.Option[scala.Int] = None, highCount: scala.Option[scala.Int] = None, mediumCount: scala.Option[scala.Int] = None, criticalCount: scala.Option[scala.Int] = None, informationalCount: scala.Option[scala.Int] = None)
final case class InvalidRole(message: scala.Option[java.lang.String] = None)
final case class ResourceComplianceSummaryItem(resourceId: scala.Option[java.lang.String] = None, nonCompliantSummary: scala.Option[models.NonCompliantSummary] = None, executionSummary: scala.Option[models.ComplianceExecutionSummary] = None, overallSeverity: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, complianceType: scala.Option[java.lang.String] = None, compliantSummary: scala.Option[models.CompliantSummary] = None, resourceType: scala.Option[java.lang.String] = None)
final case class CreateAssociationBatchRequestEntry(name: java.lang.String, instanceId: scala.Option[java.lang.String] = None, targets: scala.Option[scala.List[models.Target]] = None, associationName: scala.Option[java.lang.String] = None, outputLocation: scala.Option[models.InstanceAssociationOutputLocation] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, scheduleExpression: scala.Option[java.lang.String] = None, documentVersion: scala.Option[java.lang.String] = None)
final case class ParametersFilter(key: java.lang.String, values: scala.List[java.lang.String])
final case class UpdateAssociationRequest(associationId: java.lang.String, name: scala.Option[java.lang.String] = None, targets: scala.Option[scala.List[models.Target]] = None, associationName: scala.Option[java.lang.String] = None, outputLocation: scala.Option[models.InstanceAssociationOutputLocation] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, associationVersion: scala.Option[java.lang.String] = None, scheduleExpression: scala.Option[java.lang.String] = None, documentVersion: scala.Option[java.lang.String] = None)
final case class ResourceDataSyncInvalidConfigurationException(message: scala.Option[java.lang.String] = None)
final case class NonCompliantSummary(nonCompliantCount: scala.Option[scala.Int] = None, severitySummary: scala.Option[models.SeveritySummary] = None)
case object AssociationLimitExceeded
final case class InvalidAutomationExecutionParametersException(message: scala.Option[java.lang.String] = None)
final case class DescribeAssociationResult(associationDescription: scala.Option[models.AssociationDescription] = None)
final case class CreateAssociationRequest(name: java.lang.String, instanceId: scala.Option[java.lang.String] = None, targets: scala.Option[scala.List[models.Target]] = None, associationName: scala.Option[java.lang.String] = None, outputLocation: scala.Option[models.InstanceAssociationOutputLocation] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, scheduleExpression: scala.Option[java.lang.String] = None, documentVersion: scala.Option[java.lang.String] = None)
final case class RegisterTaskWithMaintenanceWindowRequest(targets: scala.List[models.Target], serviceRoleArn: java.lang.String, maxConcurrency: java.lang.String, taskArn: java.lang.String, windowId: java.lang.String, taskType: java.lang.String, maxErrors: java.lang.String, clientToken: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, taskInvocationParameters: scala.Option[models.MaintenanceWindowTaskInvocationParameters] = None, description: scala.Option[java.lang.String] = None, taskParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, models.MaintenanceWindowTaskParameterValueExpression]] = None, loggingInfo: scala.Option[models.LoggingInfo] = None, priority: scala.Option[scala.Int] = None)
final case class DescribeParametersRequest(filters: scala.Option[scala.List[models.ParametersFilter]] = None, parameterFilters: scala.Option[scala.List[models.ParameterStringFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class AutomationDefinitionNotFoundException(message: scala.Option[java.lang.String] = None)
final case class InvalidDocumentSchemaVersion(message: scala.Option[java.lang.String] = None)
final case class AutomationExecutionLimitExceededException(message: scala.Option[java.lang.String] = None)
final case class AutomationExecution(documentName: scala.Option[java.lang.String] = None, stepExecutions: scala.Option[scala.List[models.StepExecution]] = None, failureMessage: scala.Option[java.lang.String] = None, automationExecutionStatus: scala.Option[java.lang.String] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, outputs: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, executionStartTime: scala.Option[java.time.Instant] = None, executionEndTime: scala.Option[java.time.Instant] = None, automationExecutionId: scala.Option[java.lang.String] = None, documentVersion: scala.Option[java.lang.String] = None)
final case class HierarchyTypeMismatchException(message: scala.Option[java.lang.String] = None)
final case class AssociationFilter(key: java.lang.String, value: java.lang.String)
final case class DocumentLimitExceeded(message: scala.Option[java.lang.String] = None)
final case class DescribeMaintenanceWindowTasksResult(tasks: scala.Option[scala.List[models.MaintenanceWindowTask]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class GetAutomationExecutionResult(automationExecution: scala.Option[models.AutomationExecution] = None)
final case class S3OutputLocation(outputS3Region: scala.Option[java.lang.String] = None, outputS3BucketName: scala.Option[java.lang.String] = None, outputS3KeyPrefix: scala.Option[java.lang.String] = None)
final case class DescribeInstancePatchesResult(patches: scala.Option[scala.List[models.PatchComplianceData]] = None, nextToken: scala.Option[java.lang.String] = None)
case object DeleteDocumentResult
final case class PutParameterResult(version: scala.Option[scala.Long] = None)
final case class InvalidFilter(message: scala.Option[java.lang.String] = None)
case object ModifyDocumentPermissionResponse
final case class GetCommandInvocationRequest(commandId: java.lang.String, instanceId: java.lang.String, pluginName: scala.Option[java.lang.String] = None)
final case class CommandPlugin(responseCode: scala.Option[scala.Int] = None, outputS3KeyPrefix: scala.Option[java.lang.String] = None, output: scala.Option[java.lang.String] = None, outputS3BucketName: scala.Option[java.lang.String] = None, statusDetails: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, outputS3Region: scala.Option[java.lang.String] = None, responseStartDateTime: scala.Option[java.time.Instant] = None, responseFinishDateTime: scala.Option[java.time.Instant] = None, standardOutputUrl: scala.Option[java.lang.String] = None, standardErrorUrl: scala.Option[java.lang.String] = None)
case object DeleteActivationResult
final case class ResourceDataSyncItem(syncCreatedTime: scala.Option[java.time.Instant] = None, lastStatus: scala.Option[java.lang.String] = None, lastSyncTime: scala.Option[java.time.Instant] = None, s3Destination: scala.Option[models.ResourceDataSyncS3Destination] = None, syncName: scala.Option[java.lang.String] = None, lastSuccessfulSyncTime: scala.Option[java.time.Instant] = None)
final case class InvalidDocumentVersion(message: scala.Option[java.lang.String] = None)
case object StopAutomationExecutionResult
final case class CreateAssociationBatchRequest(entries: scala.List[models.CreateAssociationBatchRequestEntry])
final case class GetDocumentResult(name: scala.Option[java.lang.String] = None, documentVersion: scala.Option[java.lang.String] = None, content: scala.Option[java.lang.String] = None, documentType: scala.Option[java.lang.String] = None)
final case class ResourceDataSyncCountExceededException(message: scala.Option[java.lang.String] = None)
final case class DescribeInstanceAssociationsStatusRequest(instanceId: java.lang.String, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DeleteResourceDataSyncRequest(syncName: java.lang.String)
final case class DeletePatchBaselineResult(baselineId: scala.Option[java.lang.String] = None)
final case class MaintenanceWindowTaskInvocationParameters(runCommand: scala.Option[models.MaintenanceWindowRunCommandParameters] = None, automation: scala.Option[models.MaintenanceWindowAutomationParameters] = None, stepFunctions: scala.Option[models.MaintenanceWindowStepFunctionsParameters] = None, lambda: scala.Option[models.MaintenanceWindowLambdaParameters] = None)
final case class PatchRuleGroup(patchRules: scala.List[models.PatchRule])
final case class GetMaintenanceWindowExecutionTaskInvocationRequest(windowExecutionId: java.lang.String, taskId: java.lang.String, invocationId: java.lang.String)
final case class InvalidActivation(message: scala.Option[java.lang.String] = None)
final case class Activation(defaultInstanceName: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, iamRole: scala.Option[java.lang.String] = None, createdDate: scala.Option[java.time.Instant] = None, expirationDate: scala.Option[java.time.Instant] = None, activationId: scala.Option[java.lang.String] = None, registrationsCount: scala.Option[scala.Int] = None, expired: scala.Option[scala.Boolean] = None, registrationLimit: scala.Option[scala.Int] = None)
final case class DescribeInstanceInformationRequest(instanceInformationFilterList: scala.Option[scala.List[models.InstanceInformationFilter]] = None, filters: scala.Option[scala.List[models.InstanceInformationStringFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeDocumentPermissionResponse(accountIds: scala.Option[scala.List[java.lang.String]] = None)
final case class MaintenanceWindowExecutionTaskInvocationIdentity(ownerInformation: scala.Option[java.lang.String] = None, windowTargetId: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, taskExecutionId: scala.Option[java.lang.String] = None, windowExecutionId: scala.Option[java.lang.String] = None, startTime: scala.Option[java.time.Instant] = None, endTime: scala.Option[java.time.Instant] = None, taskType: scala.Option[java.lang.String] = None, invocationId: scala.Option[java.lang.String] = None, executionId: scala.Option[java.lang.String] = None, statusDetails: scala.Option[java.lang.String] = None, parameters: scala.Option[java.lang.String] = None)
final case class CreatePatchBaselineResult(baselineId: scala.Option[java.lang.String] = None)
final case class UpdatePatchBaselineRequest(baselineId: java.lang.String, approvalRules: scala.Option[models.PatchRuleGroup] = None, name: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, approvedPatchesComplianceLevel: scala.Option[java.lang.String] = None, globalFilters: scala.Option[models.PatchFilterGroup] = None, approvedPatches: scala.Option[scala.List[java.lang.String]] = None, rejectedPatches: scala.Option[scala.List[java.lang.String]] = None)
final case class CreateAssociationResult(associationDescription: scala.Option[models.AssociationDescription] = None)
final case class DescribeEffectivePatchesForPatchBaselineRequest(baselineId: java.lang.String, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UpdateDocumentDefaultVersionResult(description: scala.Option[models.DocumentDefaultVersionDescription] = None)
final case class ListCommandInvocationsRequest(instanceId: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None, commandId: scala.Option[java.lang.String] = None, filters: scala.Option[scala.List[models.CommandFilter]] = None, details: scala.Option[scala.Boolean] = None, nextToken: scala.Option[java.lang.String] = None)
final case class ListInventoryEntriesResult(instanceId: scala.Option[java.lang.String] = None, schemaVersion: scala.Option[java.lang.String] = None, captureTime: scala.Option[java.lang.String] = None, typeName: scala.Option[java.lang.String] = None, entries: scala.Option[scala.List[scala.collection.immutable.Map[java.lang.String, java.lang.String]]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class RegisterTargetWithMaintenanceWindowRequest(targets: scala.List[models.Target], resourceType: java.lang.String, windowId: java.lang.String, clientToken: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, ownerInformation: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None)
final case class UpdateAssociationStatusResult(associationDescription: scala.Option[models.AssociationDescription] = None)
final case class Parameter(name: scala.Option[java.lang.String] = None, `type`: scala.Option[java.lang.String] = None, value: scala.Option[java.lang.String] = None, version: scala.Option[scala.Long] = None)
final case class GetMaintenanceWindowExecutionTaskRequest(windowExecutionId: java.lang.String, taskId: java.lang.String)
final case class StartAutomationExecutionResult(automationExecutionId: scala.Option[java.lang.String] = None)
final case class ParameterMaxVersionLimitExceeded(message: scala.Option[java.lang.String] = None)
final case class InvalidAutomationSignalException(message: scala.Option[java.lang.String] = None)
final case class CreateActivationResult(activationId: scala.Option[java.lang.String] = None, activationCode: scala.Option[java.lang.String] = None)
final case class UnsupportedInventoryItemContextException(typeName: scala.Option[java.lang.String] = None, message: scala.Option[java.lang.String] = None)
final case class GetPatchBaselineForPatchGroupRequest(patchGroup: java.lang.String, operatingSystem: scala.Option[java.lang.String] = None)
final case class InvalidDocument(message: scala.Option[java.lang.String] = None)
final case class CreateMaintenanceWindowRequest(allowUnassociatedTargets: scala.Boolean, name: java.lang.String, cutoff: scala.Int, schedule: java.lang.String, duration: scala.Int, clientToken: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None)
final case class AutomationExecutionNotFoundException(message: scala.Option[java.lang.String] = None)
final case class ParameterAlreadyExists(message: scala.Option[java.lang.String] = None)
final case class ParameterHistory(version: scala.Option[scala.Long] = None, `type`: scala.Option[java.lang.String] = None, lastModifiedUser: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, allowedPattern: scala.Option[java.lang.String] = None, keyId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, lastModifiedDate: scala.Option[java.time.Instant] = None, value: scala.Option[java.lang.String] = None)
final case class ListAssociationsResult(associations: scala.Option[scala.List[models.Association]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class PatchGroupPatchBaselineMapping(patchGroup: scala.Option[java.lang.String] = None, baselineIdentity: scala.Option[models.PatchBaselineIdentity] = None)
final case class DescribeMaintenanceWindowExecutionsResult(windowExecutions: scala.Option[scala.List[models.MaintenanceWindowExecution]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InstanceAssociationOutputLocation(s3Location: scala.Option[models.S3OutputLocation] = None)
final case class AutomationExecutionFilter(key: java.lang.String, values: scala.List[java.lang.String])
final case class GetPatchBaselineResult(approvalRules: scala.Option[models.PatchRuleGroup] = None, name: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, patchGroups: scala.Option[scala.List[java.lang.String]] = None, operatingSystem: scala.Option[java.lang.String] = None, approvedPatchesComplianceLevel: scala.Option[java.lang.String] = None, baselineId: scala.Option[java.lang.String] = None, globalFilters: scala.Option[models.PatchFilterGroup] = None, createdDate: scala.Option[java.time.Instant] = None, modifiedDate: scala.Option[java.time.Instant] = None, approvedPatches: scala.Option[scala.List[java.lang.String]] = None, rejectedPatches: scala.Option[scala.List[java.lang.String]] = None)
case object SendAutomationSignalResult
final case class UpdateMaintenanceWindowResult(allowUnassociatedTargets: scala.Option[scala.Boolean] = None, name: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, windowId: scala.Option[java.lang.String] = None, cutoff: scala.Option[scala.Int] = None, schedule: scala.Option[java.lang.String] = None, duration: scala.Option[scala.Int] = None, enabled: scala.Option[scala.Boolean] = None)
final case class DescribePatchBaselinesRequest(filters: scala.Option[scala.List[models.PatchOrchestratorFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InvalidTypeNameException(message: scala.Option[java.lang.String] = None)
final case class InstanceInformationStringFilter(key: java.lang.String, values: scala.List[java.lang.String])
final case class DocumentDescription(status: scala.Option[java.lang.String] = None, documentType: scala.Option[java.lang.String] = None, platformTypes: scala.Option[scala.List[java.lang.String]] = None, hash: scala.Option[java.lang.String] = None, hashType: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, owner: scala.Option[java.lang.String] = None, sha1: scala.Option[java.lang.String] = None, tags: scala.Option[scala.List[models.Tag]] = None, createdDate: scala.Option[java.time.Instant] = None, schemaVersion: scala.Option[java.lang.String] = None, parameters: scala.Option[scala.List[models.DocumentParameter]] = None, documentVersion: scala.Option[java.lang.String] = None, latestVersion: scala.Option[java.lang.String] = None, defaultVersion: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None)
final case class FailedCreateAssociation(entry: scala.Option[models.CreateAssociationBatchRequestEntry] = None, message: scala.Option[java.lang.String] = None, fault: scala.Option[java.lang.String] = None)
final case class ComplianceItem(resourceId: scala.Option[java.lang.String] = None, details: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, executionSummary: scala.Option[models.ComplianceExecutionSummary] = None, title: scala.Option[java.lang.String] = None, severity: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, id: scala.Option[java.lang.String] = None, complianceType: scala.Option[java.lang.String] = None, resourceType: scala.Option[java.lang.String] = None)
final case class DeleteParameterRequest(name: java.lang.String)
final case class GetMaintenanceWindowExecutionTaskInvocationResult(ownerInformation: scala.Option[java.lang.String] = None, windowTargetId: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, taskExecutionId: scala.Option[java.lang.String] = None, windowExecutionId: scala.Option[java.lang.String] = None, startTime: scala.Option[java.time.Instant] = None, endTime: scala.Option[java.time.Instant] = None, taskType: scala.Option[java.lang.String] = None, invocationId: scala.Option[java.lang.String] = None, executionId: scala.Option[java.lang.String] = None, statusDetails: scala.Option[java.lang.String] = None, parameters: scala.Option[java.lang.String] = None)
final case class ItemSizeLimitExceededException(typeName: scala.Option[java.lang.String] = None, message: scala.Option[java.lang.String] = None)
final case class DescribeInstanceInformationResult(instanceInformationList: scala.Option[scala.List[models.InstanceInformation]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class CommandFilter(key: java.lang.String, value: java.lang.String)
final case class ResourceInUseException(message: scala.Option[java.lang.String] = None)
final case class DescribeMaintenanceWindowExecutionsRequest(windowId: java.lang.String, filters: scala.Option[scala.List[models.MaintenanceWindowFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InvalidFilterOption(message: scala.Option[java.lang.String] = None)
final case class PutInventoryRequest(instanceId: java.lang.String, items: scala.List[models.InventoryItem])
final case class CreateActivationRequest(iamRole: java.lang.String, defaultInstanceName: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, expirationDate: scala.Option[java.time.Instant] = None, registrationLimit: scala.Option[scala.Int] = None)
final case class CustomSchemaCountLimitExceededException(message: scala.Option[java.lang.String] = None)
final case class ListResourceDataSyncResult(resourceDataSyncItems: scala.Option[scala.List[models.ResourceDataSyncItem]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class RegisterTargetWithMaintenanceWindowResult(windowTargetId: scala.Option[java.lang.String] = None)
final case class InventoryFilter(key: java.lang.String, values: scala.List[java.lang.String], `type`: scala.Option[java.lang.String] = None)
final case class ListInventoryEntriesRequest(instanceId: java.lang.String, typeName: java.lang.String, maxResults: scala.Option[scala.Int] = None, filters: scala.Option[scala.List[models.InventoryFilter]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class GetParametersByPathRequest(path: java.lang.String, maxResults: scala.Option[scala.Int] = None, parameterFilters: scala.Option[scala.List[models.ParameterStringFilter]] = None, recursive: scala.Option[scala.Boolean] = None, withDecryption: scala.Option[scala.Boolean] = None, nextToken: scala.Option[java.lang.String] = None)
final case class ParameterMetadata(version: scala.Option[scala.Long] = None, `type`: scala.Option[java.lang.String] = None, lastModifiedUser: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, allowedPattern: scala.Option[java.lang.String] = None, keyId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, lastModifiedDate: scala.Option[java.time.Instant] = None)
final case class InstancePatchState(instanceId: java.lang.String, baselineId: java.lang.String, operation: java.lang.String, operationStartTime: java.time.Instant, operationEndTime: java.time.Instant, patchGroup: java.lang.String, ownerInformation: scala.Option[java.lang.String] = None, notApplicableCount: scala.Option[scala.Int] = None, installedCount: scala.Option[scala.Int] = None, failedCount: scala.Option[scala.Int] = None, missingCount: scala.Option[scala.Int] = None, installedOtherCount: scala.Option[scala.Int] = None, snapshotId: scala.Option[java.lang.String] = None)
final case class ListAssociationVersionsRequest(associationId: java.lang.String, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DuplicateDocumentContent(message: scala.Option[java.lang.String] = None)
case object DeleteParameterResult
final case class TotalSizeLimitExceededException(message: scala.Option[java.lang.String] = None)
final case class FeatureNotAvailableException(message: scala.Option[java.lang.String] = None)
final case class DocumentDefaultVersionDescription(name: scala.Option[java.lang.String] = None, defaultVersion: scala.Option[java.lang.String] = None)
final case class TooManyUpdates(message: scala.Option[java.lang.String] = None)
final case class ListDocumentsResult(documentIdentifiers: scala.Option[scala.List[models.DocumentIdentifier]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class Tag(key: java.lang.String, value: java.lang.String)
final case class Target(key: scala.Option[java.lang.String] = None, values: scala.Option[scala.List[java.lang.String]] = None)
final case class GetDeployablePatchSnapshotForInstanceResult(instanceId: scala.Option[java.lang.String] = None, snapshotId: scala.Option[java.lang.String] = None, snapshotDownloadUrl: scala.Option[java.lang.String] = None, product: scala.Option[java.lang.String] = None)
final case class GetCommandInvocationResult(instanceId: scala.Option[java.lang.String] = None, documentName: scala.Option[java.lang.String] = None, standardErrorContent: scala.Option[java.lang.String] = None, comment: scala.Option[java.lang.String] = None, responseCode: scala.Option[scala.Int] = None, statusDetails: scala.Option[java.lang.String] = None, standardOutputContent: scala.Option[java.lang.String] = None, pluginName: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, executionStartDateTime: scala.Option[java.lang.String] = None, executionElapsedTime: scala.Option[java.lang.String] = None, executionEndDateTime: scala.Option[java.lang.String] = None, commandId: scala.Option[java.lang.String] = None, standardOutputUrl: scala.Option[java.lang.String] = None, standardErrorUrl: scala.Option[java.lang.String] = None)
final case class MaintenanceWindowTarget(targets: scala.Option[scala.List[models.Target]] = None, resourceType: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, ownerInformation: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, windowId: scala.Option[java.lang.String] = None, windowTargetId: scala.Option[java.lang.String] = None)
final case class ListResourceComplianceSummariesRequest(filters: scala.Option[scala.List[models.ComplianceStringFilter]] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class ResourceDataSyncS3Destination(bucketName: java.lang.String, syncFormat: java.lang.String, region: java.lang.String, awskmskeyARN: scala.Option[java.lang.String] = None, prefix: scala.Option[java.lang.String] = None)
final case class ComplianceExecutionSummary(executionTime: java.time.Instant, executionId: scala.Option[java.lang.String] = None, executionType: scala.Option[java.lang.String] = None)
case object TooManyTagsError
final case class ListCommandInvocationsResult(commandInvocations: scala.Option[scala.List[models.CommandInvocation]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class CreateResourceDataSyncRequest(syncName: java.lang.String, s3Destination: models.ResourceDataSyncS3Destination)
final case class DeleteAssociationRequest(name: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None, associationId: scala.Option[java.lang.String] = None)
final case class ListResourceDataSyncRequest(nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class ParameterLimitExceeded(message: scala.Option[java.lang.String] = None)
final case class FailureDetails(failureStage: scala.Option[java.lang.String] = None, failureType: scala.Option[java.lang.String] = None, details: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None)
final case class UpdateMaintenanceWindowTaskRequest(windowTaskId: java.lang.String, windowId: java.lang.String, targets: scala.Option[scala.List[models.Target]] = None, name: scala.Option[java.lang.String] = None, taskInvocationParameters: scala.Option[models.MaintenanceWindowTaskInvocationParameters] = None, serviceRoleArn: scala.Option[java.lang.String] = None, maxConcurrency: scala.Option[java.lang.String] = None, taskArn: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, taskParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, models.MaintenanceWindowTaskParameterValueExpression]] = None, loggingInfo: scala.Option[models.LoggingInfo] = None, replace: scala.Option[scala.Boolean] = None, priority: scala.Option[scala.Int] = None, maxErrors: scala.Option[java.lang.String] = None)
final case class RegisterTaskWithMaintenanceWindowResult(windowTaskId: scala.Option[java.lang.String] = None)
final case class UnsupportedParameterType(message: scala.Option[java.lang.String] = None)
final case class InvalidNotificationConfig(message: scala.Option[java.lang.String] = None)
final case class UpdateManagedInstanceRoleRequest(instanceId: java.lang.String, iamRole: java.lang.String)
case object DeleteResourceDataSyncResult
final case class UpdateDocumentRequest(content: java.lang.String, name: java.lang.String, documentVersion: scala.Option[java.lang.String] = None)
final case class RegisterDefaultPatchBaselineRequest(baselineId: java.lang.String)
final case class MaintenanceWindowIdentity(name: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, windowId: scala.Option[java.lang.String] = None, cutoff: scala.Option[scala.Int] = None, duration: scala.Option[scala.Int] = None, enabled: scala.Option[scala.Boolean] = None)
final case class UnsupportedOperatingSystem(message: scala.Option[java.lang.String] = None)
final case class InstanceAssociationOutputUrl(s3OutputUrl: scala.Option[models.S3OutputUrl] = None)
final case class GetParameterRequest(name: java.lang.String, withDecryption: scala.Option[scala.Boolean] = None)
final case class S3OutputUrl(outputUrl: scala.Option[java.lang.String] = None)
final case class IdempotentParameterMismatch(message: scala.Option[java.lang.String] = None)
final case class EffectivePatch(patch: scala.Option[models.Patch] = None, patchStatus: scala.Option[models.PatchStatus] = None)
final case class DescribeMaintenanceWindowTargetsResult(targets: scala.Option[scala.List[models.MaintenanceWindowTarget]] = None, nextToken: scala.Option[java.lang.String] = None)
case object AddTagsToResourceResult
final case class PatchFilterGroup(patchFilters: scala.List[models.PatchFilter])
final case class InvalidFilterValue(message: scala.Option[java.lang.String] = None)
final case class StartAutomationExecutionRequest(documentName: java.lang.String, documentVersion: scala.Option[java.lang.String] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, clientToken: scala.Option[java.lang.String] = None)
case object InvalidOutputLocation
final case class CancelCommandRequest(commandId: java.lang.String, instanceIds: scala.Option[scala.List[java.lang.String]] = None)
case object RemoveTagsFromResourceResult
final case class ComplianceStringFilter(key: scala.Option[java.lang.String] = None, values: scala.Option[scala.List[java.lang.String]] = None, `type`: scala.Option[java.lang.String] = None)
case object InvalidPluginName
final case class DescribeAvailablePatchesResult(patches: scala.Option[scala.List[models.Patch]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class AutomationExecutionMetadata(documentName: scala.Option[java.lang.String] = None, executedBy: scala.Option[java.lang.String] = None, logFile: scala.Option[java.lang.String] = None, automationExecutionStatus: scala.Option[java.lang.String] = None, outputs: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, executionStartTime: scala.Option[java.time.Instant] = None, executionEndTime: scala.Option[java.time.Instant] = None, automationExecutionId: scala.Option[java.lang.String] = None, documentVersion: scala.Option[java.lang.String] = None)
final case class AssociationVersionInfo(name: scala.Option[java.lang.String] = None, targets: scala.Option[scala.List[models.Target]] = None, associationId: scala.Option[java.lang.String] = None, associationName: scala.Option[java.lang.String] = None, outputLocation: scala.Option[models.InstanceAssociationOutputLocation] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, associationVersion: scala.Option[java.lang.String] = None, createdDate: scala.Option[java.time.Instant] = None, scheduleExpression: scala.Option[java.lang.String] = None, documentVersion: scala.Option[java.lang.String] = None)
final case class CreateDocumentResult(documentDescription: scala.Option[models.DocumentDescription] = None)
case object DuplicateInstanceId
final case class GetParametersByPathResult(parameters: scala.Option[scala.List[models.Parameter]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class MaintenanceWindowLambdaParameters(clientContext: scala.Option[java.lang.String] = None, qualifier: scala.Option[java.lang.String] = None, payload: scala.Option[scala.Array[scala.Byte]] = None)
final case class MaintenanceWindowTask(targets: scala.Option[scala.List[models.Target]] = None, windowTaskId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, serviceRoleArn: scala.Option[java.lang.String] = None, maxConcurrency: scala.Option[java.lang.String] = None, taskArn: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, windowId: scala.Option[java.lang.String] = None, `type`: scala.Option[java.lang.String] = None, taskParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, models.MaintenanceWindowTaskParameterValueExpression]] = None, loggingInfo: scala.Option[models.LoggingInfo] = None, priority: scala.Option[scala.Int] = None, maxErrors: scala.Option[java.lang.String] = None)
final case class DeregisterPatchBaselineForPatchGroupRequest(baselineId: java.lang.String, patchGroup: java.lang.String)
final case class GetAutomationExecutionRequest(automationExecutionId: java.lang.String)
final case class AssociationVersionLimitExceeded(message: scala.Option[java.lang.String] = None)
final case class GetDocumentRequest(name: java.lang.String, documentVersion: scala.Option[java.lang.String] = None)
final case class DescribePatchGroupsResult(mappings: scala.Option[scala.List[models.PatchGroupPatchBaselineMapping]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class Command(documentName: scala.Option[java.lang.String] = None, targets: scala.Option[scala.List[models.Target]] = None, comment: scala.Option[java.lang.String] = None, outputS3KeyPrefix: scala.Option[java.lang.String] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, outputS3BucketName: scala.Option[java.lang.String] = None, statusDetails: scala.Option[java.lang.String] = None, serviceRole: scala.Option[java.lang.String] = None, maxConcurrency: scala.Option[java.lang.String] = None, outputS3Region: scala.Option[java.lang.String] = None, targetCount: scala.Option[scala.Int] = None, expiresAfter: scala.Option[java.time.Instant] = None, requestedDateTime: scala.Option[java.time.Instant] = None, commandId: scala.Option[java.lang.String] = None, instanceIds: scala.Option[scala.List[java.lang.String]] = None, notificationConfig: scala.Option[models.NotificationConfig] = None, status: scala.Option[java.lang.String] = None, completedCount: scala.Option[scala.Int] = None, maxErrors: scala.Option[java.lang.String] = None, errorCount: scala.Option[scala.Int] = None)
case object UpdateManagedInstanceRoleResult
final case class GetMaintenanceWindowResult(allowUnassociatedTargets: scala.Option[scala.Boolean] = None, name: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, createdDate: scala.Option[java.time.Instant] = None, modifiedDate: scala.Option[java.time.Instant] = None, windowId: scala.Option[java.lang.String] = None, cutoff: scala.Option[scala.Int] = None, schedule: scala.Option[java.lang.String] = None, duration: scala.Option[scala.Int] = None, enabled: scala.Option[scala.Boolean] = None)
final case class ComplianceTypeCountLimitExceededException(message: scala.Option[java.lang.String] = None)
final case class ListDocumentVersionsResult(documentVersions: scala.Option[scala.List[models.DocumentVersionInfo]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InstanceInformation(instanceId: scala.Option[java.lang.String] = None, iamRole: scala.Option[java.lang.String] = None, platformName: scala.Option[java.lang.String] = None, platformVersion: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, ipaddress: scala.Option[java.lang.String] = None, activationId: scala.Option[java.lang.String] = None, associationStatus: scala.Option[java.lang.String] = None, associationOverview: scala.Option[models.InstanceAggregatedAssociationOverview] = None, pingStatus: scala.Option[java.lang.String] = None, resourceType: scala.Option[java.lang.String] = None, lastPingDateTime: scala.Option[java.time.Instant] = None, registrationDate: scala.Option[java.time.Instant] = None, lastAssociationExecutionDate: scala.Option[java.time.Instant] = None, lastSuccessfulAssociationExecutionDate: scala.Option[java.time.Instant] = None, platformType: scala.Option[java.lang.String] = None, isLatestVersion: scala.Option[scala.Boolean] = None, agentVersion: scala.Option[java.lang.String] = None, computerName: scala.Option[java.lang.String] = None)
final case class CreateMaintenanceWindowResult(windowId: scala.Option[java.lang.String] = None)
final case class GetPatchBaselineRequest(baselineId: java.lang.String)
final case class DescribeActivationsResult(activationList: scala.Option[scala.List[models.Activation]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class GetPatchBaselineForPatchGroupResult(baselineId: scala.Option[java.lang.String] = None, patchGroup: scala.Option[java.lang.String] = None, operatingSystem: scala.Option[java.lang.String] = None)
final case class ResourceDataSyncAlreadyExistsException(syncName: scala.Option[java.lang.String] = None)
final case class InvalidAllowedPatternException(message: scala.Option[java.lang.String] = None)
final case class DescribeMaintenanceWindowTasksRequest(windowId: java.lang.String, filters: scala.Option[scala.List[models.MaintenanceWindowFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
case object InvalidOutputFolder
final case class UpdateAssociationStatusRequest(name: java.lang.String, instanceId: java.lang.String, associationStatus: models.AssociationStatus)
final case class PatchComplianceData(kbid: java.lang.String, severity: java.lang.String, title: java.lang.String, installedTime: java.time.Instant, classification: java.lang.String, state: java.lang.String)
case object InvalidCommandId
final case class MaintenanceWindowTaskParameterValueExpression(values: scala.Option[scala.List[java.lang.String]] = None)
final case class SendAutomationSignalRequest(automationExecutionId: java.lang.String, signalType: java.lang.String, payload: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None)
final case class InstanceAggregatedAssociationOverview(detailedStatus: scala.Option[java.lang.String] = None, instanceAssociationStatusAggregatedCount: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.Int]] = None)
final case class GetMaintenanceWindowExecutionResult(status: scala.Option[java.lang.String] = None, windowExecutionId: scala.Option[java.lang.String] = None, startTime: scala.Option[java.time.Instant] = None, endTime: scala.Option[java.time.Instant] = None, statusDetails: scala.Option[java.lang.String] = None, taskIds: scala.Option[scala.List[java.lang.String]] = None)
final case class AddTagsToResourceRequest(resourceType: java.lang.String, resourceId: java.lang.String, tags: scala.List[models.Tag])
final case class PutParameterRequest(`type`: java.lang.String, name: java.lang.String, value: java.lang.String, description: scala.Option[java.lang.String] = None, allowedPattern: scala.Option[java.lang.String] = None, keyId: scala.Option[java.lang.String] = None, overwrite: scala.Option[scala.Boolean] = None)
final case class DeregisterTaskFromMaintenanceWindowRequest(windowId: java.lang.String, windowTaskId: java.lang.String)
final case class DescribeMaintenanceWindowExecutionTasksRequest(windowExecutionId: java.lang.String, filters: scala.Option[scala.List[models.MaintenanceWindowFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeDocumentPermissionRequest(name: java.lang.String, permissionType: java.lang.String)
final case class InvalidParameters(message: scala.Option[java.lang.String] = None)
final case class PatchFilter(key: java.lang.String, values: scala.List[java.lang.String])
final case class InventoryItemSchema(typeName: java.lang.String, attributes: scala.List[models.InventoryItemAttribute], version: scala.Option[java.lang.String] = None, displayName: scala.Option[java.lang.String] = None)
final case class DocumentFilter(key: java.lang.String, value: java.lang.String)
final case class GetMaintenanceWindowTaskResult(targets: scala.Option[scala.List[models.Target]] = None, windowTaskId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, taskInvocationParameters: scala.Option[models.MaintenanceWindowTaskInvocationParameters] = None, serviceRoleArn: scala.Option[java.lang.String] = None, maxConcurrency: scala.Option[java.lang.String] = None, taskArn: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, windowId: scala.Option[java.lang.String] = None, taskType: scala.Option[java.lang.String] = None, taskParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, models.MaintenanceWindowTaskParameterValueExpression]] = None, loggingInfo: scala.Option[models.LoggingInfo] = None, priority: scala.Option[scala.Int] = None, maxErrors: scala.Option[java.lang.String] = None)
final case class GetParameterHistoryResult(parameters: scala.Option[scala.List[models.ParameterHistory]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DeregisterTaskFromMaintenanceWindowResult(windowId: scala.Option[java.lang.String] = None, windowTaskId: scala.Option[java.lang.String] = None)
final case class DeleteDocumentRequest(name: java.lang.String)
final case class GetDefaultPatchBaselineResult(baselineId: scala.Option[java.lang.String] = None, operatingSystem: scala.Option[java.lang.String] = None)
final case class MaxDocumentSizeExceeded(message: scala.Option[java.lang.String] = None)
final case class DocumentVersionInfo(name: scala.Option[java.lang.String] = None, documentVersion: scala.Option[java.lang.String] = None, createdDate: scala.Option[java.time.Instant] = None, isDefaultVersion: scala.Option[scala.Boolean] = None)
final case class ListAssociationVersionsResult(associationVersions: scala.Option[scala.List[models.AssociationVersionInfo]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeEffectivePatchesForPatchBaselineResult(effectivePatches: scala.Option[scala.List[models.EffectivePatch]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InventoryResultItem(schemaVersion: java.lang.String, typeName: java.lang.String, content: scala.List[scala.collection.immutable.Map[java.lang.String, java.lang.String]], contentHash: scala.Option[java.lang.String] = None, captureTime: scala.Option[java.lang.String] = None)
final case class RegisterDefaultPatchBaselineResult(baselineId: scala.Option[java.lang.String] = None)
final case class DeregisterManagedInstanceRequest(instanceId: java.lang.String)
final case class StopAutomationExecutionRequest(automationExecutionId: java.lang.String)
final case class DescribePatchGroupStateRequest(patchGroup: java.lang.String)
final case class Patch(description: scala.Option[java.lang.String] = None, language: scala.Option[java.lang.String] = None, kbNumber: scala.Option[java.lang.String] = None, productFamily: scala.Option[java.lang.String] = None, msrcSeverity: scala.Option[java.lang.String] = None, vendor: scala.Option[java.lang.String] = None, title: scala.Option[java.lang.String] = None, contentUrl: scala.Option[java.lang.String] = None, releaseDate: scala.Option[java.time.Instant] = None, msrcNumber: scala.Option[java.lang.String] = None, classification: scala.Option[java.lang.String] = None, id: scala.Option[java.lang.String] = None, product: scala.Option[java.lang.String] = None)
final case class GetMaintenanceWindowTaskRequest(windowId: java.lang.String, windowTaskId: java.lang.String)
final case class GetMaintenanceWindowExecutionRequest(windowExecutionId: java.lang.String)
final case class DescribeAvailablePatchesRequest(filters: scala.Option[scala.List[models.PatchOrchestratorFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class AlreadyExistsException(message: scala.Option[java.lang.String] = None)
final case class MaintenanceWindowStepFunctionsParameters(input: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None)
final case class GetInventorySchemaResult(schemas: scala.Option[scala.List[models.InventoryItemSchema]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class AssociationDoesNotExist(message: scala.Option[java.lang.String] = None)
final case class DeleteMaintenanceWindowResult(windowId: scala.Option[java.lang.String] = None)
final case class GetDefaultPatchBaselineRequest(operatingSystem: scala.Option[java.lang.String] = None)
final case class InvalidInstanceInformationFilterValue(message: scala.Option[java.lang.String] = None)
final case class DescribeAssociationRequest(name: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None, associationId: scala.Option[java.lang.String] = None, associationVersion: scala.Option[java.lang.String] = None)
final case class AssociationDescription(instanceId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, targets: scala.Option[scala.List[models.Target]] = None, associationId: scala.Option[java.lang.String] = None, associationName: scala.Option[java.lang.String] = None, outputLocation: scala.Option[models.InstanceAssociationOutputLocation] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, associationVersion: scala.Option[java.lang.String] = None, date: scala.Option[java.time.Instant] = None, lastUpdateAssociationDate: scala.Option[java.time.Instant] = None, lastExecutionDate: scala.Option[java.time.Instant] = None, lastSuccessfulExecutionDate: scala.Option[java.time.Instant] = None, scheduleExpression: scala.Option[java.lang.String] = None, overview: scala.Option[models.AssociationOverview] = None, status: scala.Option[models.AssociationStatus] = None, documentVersion: scala.Option[java.lang.String] = None)
final case class DescribePatchBaselinesResult(baselineIdentities: scala.Option[scala.List[models.PatchBaselineIdentity]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DeleteMaintenanceWindowRequest(windowId: java.lang.String)
final case class ComplianceItemEntry(severity: java.lang.String, status: java.lang.String, details: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None, title: scala.Option[java.lang.String] = None, id: scala.Option[java.lang.String] = None)
final case class ListComplianceItemsResult(complianceItems: scala.Option[scala.List[models.ComplianceItem]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class AssociationOverview(status: scala.Option[java.lang.String] = None, detailedStatus: scala.Option[java.lang.String] = None, associationStatusAggregatedCount: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.Int]] = None)
final case class DocumentKeyValuesFilter(key: scala.Option[java.lang.String] = None, values: scala.Option[scala.List[java.lang.String]] = None)
final case class DescribeInstancePatchesRequest(instanceId: java.lang.String, filters: scala.Option[scala.List[models.PatchOrchestratorFilter]] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class GetMaintenanceWindowExecutionTaskResult(taskParameters: scala.Option[scala.List[scala.collection.immutable.Map[java.lang.String, models.MaintenanceWindowTaskParameterValueExpression]]] = None, status: scala.Option[java.lang.String] = None, taskExecutionId: scala.Option[java.lang.String] = None, windowExecutionId: scala.Option[java.lang.String] = None, serviceRole: scala.Option[java.lang.String] = None, maxConcurrency: scala.Option[java.lang.String] = None, taskArn: scala.Option[java.lang.String] = None, startTime: scala.Option[java.time.Instant] = None, endTime: scala.Option[java.time.Instant] = None, `type`: scala.Option[java.lang.String] = None, statusDetails: scala.Option[java.lang.String] = None, priority: scala.Option[scala.Int] = None, maxErrors: scala.Option[java.lang.String] = None)
final case class PatchOrchestratorFilter(key: scala.Option[java.lang.String] = None, values: scala.Option[scala.List[java.lang.String]] = None)
final case class DescribeInstanceAssociationsStatusResult(instanceAssociationStatusInfos: scala.Option[scala.List[models.InstanceAssociationStatusInfo]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UpdatePatchBaselineResult(approvalRules: scala.Option[models.PatchRuleGroup] = None, name: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, operatingSystem: scala.Option[java.lang.String] = None, approvedPatchesComplianceLevel: scala.Option[java.lang.String] = None, baselineId: scala.Option[java.lang.String] = None, globalFilters: scala.Option[models.PatchFilterGroup] = None, createdDate: scala.Option[java.time.Instant] = None, modifiedDate: scala.Option[java.time.Instant] = None, approvedPatches: scala.Option[scala.List[java.lang.String]] = None, rejectedPatches: scala.Option[scala.List[java.lang.String]] = None)
final case class InvalidInstanceId(message: scala.Option[java.lang.String] = None)
final case class InventoryItemAttribute(name: java.lang.String, dataType: java.lang.String)
final case class DescribeAutomationExecutionsRequest(filters: scala.Option[scala.List[models.AutomationExecutionFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
case object AssociationAlreadyExists
final case class InvalidDocumentOperation(message: scala.Option[java.lang.String] = None)
final case class ListTagsForResourceRequest(resourceType: java.lang.String, resourceId: java.lang.String)
final case class AssociationStatus(date: java.time.Instant, name: java.lang.String, message: java.lang.String, additionalInfo: scala.Option[java.lang.String] = None)
final case class GetInventorySchemaRequest(aggregator: scala.Option[scala.Boolean] = None, maxResults: scala.Option[scala.Int] = None, typeName: scala.Option[java.lang.String] = None, subType: scala.Option[scala.Boolean] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DeleteActivationRequest(activationId: java.lang.String)
final case class InvalidPermissionType(message: scala.Option[java.lang.String] = None)
final case class InstancePatchStateFilter(key: java.lang.String, values: scala.List[java.lang.String], `type`: java.lang.String)
final case class InvalidInventoryItemContextException(message: scala.Option[java.lang.String] = None)
final case class DescribeMaintenanceWindowExecutionTaskInvocationsResult(windowExecutionTaskInvocationIdentities: scala.Option[scala.List[models.MaintenanceWindowExecutionTaskInvocationIdentity]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DocumentAlreadyExists(message: scala.Option[java.lang.String] = None)
final case class DescribeEffectiveInstanceAssociationsResult(associations: scala.Option[scala.List[models.InstanceAssociation]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class GetInventoryResult(entities: scala.Option[scala.List[models.InventoryResultEntity]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class PatchStatus(deploymentStatus: scala.Option[java.lang.String] = None, complianceLevel: scala.Option[java.lang.String] = None, approvalDate: scala.Option[java.time.Instant] = None)
final case class InstanceAssociationStatusInfo(instanceId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, associationId: scala.Option[java.lang.String] = None, associationName: scala.Option[java.lang.String] = None, outputUrl: scala.Option[models.InstanceAssociationOutputUrl] = None, associationVersion: scala.Option[java.lang.String] = None, status: scala.Option[java.lang.String] = None, detailedStatus: scala.Option[java.lang.String] = None, executionDate: scala.Option[java.time.Instant] = None, executionSummary: scala.Option[java.lang.String] = None, documentVersion: scala.Option[java.lang.String] = None, errorCode: scala.Option[java.lang.String] = None)
final case class GetDeployablePatchSnapshotForInstanceRequest(instanceId: java.lang.String, snapshotId: java.lang.String)
final case class MaintenanceWindowExecutionTaskIdentity(status: scala.Option[java.lang.String] = None, taskExecutionId: scala.Option[java.lang.String] = None, windowExecutionId: scala.Option[java.lang.String] = None, taskArn: scala.Option[java.lang.String] = None, startTime: scala.Option[java.time.Instant] = None, endTime: scala.Option[java.time.Instant] = None, taskType: scala.Option[java.lang.String] = None, statusDetails: scala.Option[java.lang.String] = None)
final case class ListTagsForResourceResult(tagList: scala.Option[scala.List[models.Tag]] = None)
final case class InvalidDocumentContent(message: scala.Option[java.lang.String] = None)
final case class ListCommandsResult(commands: scala.Option[scala.List[models.Command]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeInstancePatchStatesForPatchGroupResult(instancePatchStates: scala.Option[scala.List[models.InstancePatchState]] = None, nextToken: scala.Option[java.lang.String] = None)
case object StatusUnchanged
final case class RegisterPatchBaselineForPatchGroupRequest(baselineId: java.lang.String, patchGroup: java.lang.String)
final case class DescribeMaintenanceWindowTargetsRequest(windowId: java.lang.String, filters: scala.Option[scala.List[models.MaintenanceWindowFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class ListDocumentVersionsRequest(name: java.lang.String, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InventoryAggregator(expression: scala.Option[java.lang.String] = None, aggregators: scala.Option[scala.List[models.InventoryAggregator]] = None)
final case class ResourceLimitExceededException(message: scala.Option[java.lang.String] = None)
final case class UpdateMaintenanceWindowTargetRequest(windowId: java.lang.String, windowTargetId: java.lang.String, targets: scala.Option[scala.List[models.Target]] = None, name: scala.Option[java.lang.String] = None, ownerInformation: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, replace: scala.Option[scala.Boolean] = None)
final case class DocumentParameter(name: scala.Option[java.lang.String] = None, `type`: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, defaultValue: scala.Option[java.lang.String] = None)
final case class ItemContentMismatchException(typeName: scala.Option[java.lang.String] = None, message: scala.Option[java.lang.String] = None)
final case class ListComplianceSummariesRequest(filters: scala.Option[scala.List[models.ComplianceStringFilter]] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class GetParameterHistoryRequest(name: java.lang.String, withDecryption: scala.Option[scala.Boolean] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InstanceInformationFilter(key: java.lang.String, valueSet: scala.List[java.lang.String])
final case class NotificationConfig(notificationArn: scala.Option[java.lang.String] = None, notificationEvents: scala.Option[scala.List[java.lang.String]] = None, notificationType: scala.Option[java.lang.String] = None)
final case class DescribeActivationsRequest(filters: scala.Option[scala.List[models.DescribeActivationsFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class CreateDocumentRequest(content: java.lang.String, name: java.lang.String, documentType: scala.Option[java.lang.String] = None)
final case class DescribeParametersResult(parameters: scala.Option[scala.List[models.ParameterMetadata]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DoesNotExistException(message: scala.Option[java.lang.String] = None)
final case class SubTypeCountLimitExceededException(message: scala.Option[java.lang.String] = None)
final case class ListDocumentsRequest(documentFilterList: scala.Option[scala.List[models.DocumentFilter]] = None, filters: scala.Option[scala.List[models.DocumentKeyValuesFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InvalidItemContentException(typeName: scala.Option[java.lang.String] = None, message: scala.Option[java.lang.String] = None)
final case class DescribeEffectiveInstanceAssociationsRequest(instanceId: java.lang.String, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InvalidAssociationVersion(message: scala.Option[java.lang.String] = None)
final case class UpdateAssociationResult(associationDescription: scala.Option[models.AssociationDescription] = None)
final case class DescribeInstancePatchStatesForPatchGroupRequest(patchGroup: java.lang.String, filters: scala.Option[scala.List[models.InstancePatchStateFilter]] = None, nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class InvalidResultAttributeException(message: scala.Option[java.lang.String] = None)
final case class DescribeAutomationExecutionsResult(automationExecutionMetadataList: scala.Option[scala.List[models.AutomationExecutionMetadata]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DeregisterPatchBaselineForPatchGroupResult(baselineId: scala.Option[java.lang.String] = None, patchGroup: scala.Option[java.lang.String] = None)
final case class DescribePatchGroupsRequest(maxResults: scala.Option[scala.Int] = None, filters: scala.Option[scala.List[models.PatchOrchestratorFilter]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class UpdateDocumentDefaultVersionRequest(name: java.lang.String, documentVersion: java.lang.String)
final case class GetInventoryRequest(resultAttributes: scala.Option[scala.List[models.ResultAttribute]] = None, maxResults: scala.Option[scala.Int] = None, aggregators: scala.Option[scala.List[models.InventoryAggregator]] = None, filters: scala.Option[scala.List[models.InventoryFilter]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class LoggingInfo(s3BucketName: java.lang.String, s3Region: java.lang.String, s3KeyPrefix: scala.Option[java.lang.String] = None)
final case class Association(instanceId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, targets: scala.Option[scala.List[models.Target]] = None, associationId: scala.Option[java.lang.String] = None, associationName: scala.Option[java.lang.String] = None, associationVersion: scala.Option[java.lang.String] = None, lastExecutionDate: scala.Option[java.time.Instant] = None, scheduleExpression: scala.Option[java.lang.String] = None, overview: scala.Option[models.AssociationOverview] = None, documentVersion: scala.Option[java.lang.String] = None)
final case class ResultAttribute(typeName: java.lang.String)
case object DeregisterManagedInstanceResult
final case class CreatePatchBaselineRequest(name: java.lang.String, clientToken: scala.Option[java.lang.String] = None, approvalRules: scala.Option[models.PatchRuleGroup] = None, description: scala.Option[java.lang.String] = None, operatingSystem: scala.Option[java.lang.String] = None, approvedPatchesComplianceLevel: scala.Option[java.lang.String] = None, globalFilters: scala.Option[models.PatchFilterGroup] = None, approvedPatches: scala.Option[scala.List[java.lang.String]] = None, rejectedPatches: scala.Option[scala.List[java.lang.String]] = None)
final case class AutomationDefinitionVersionNotFoundException(message: scala.Option[java.lang.String] = None)
case object InvocationDoesNotExist
final case class SendCommandResult(command: scala.Option[models.Command] = None)
final case class HierarchyLevelLimitExceededException(message: scala.Option[java.lang.String] = None)
final case class DeregisterTargetFromMaintenanceWindowRequest(windowId: java.lang.String, windowTargetId: java.lang.String, safe: scala.Option[scala.Boolean] = None)
final case class ComplianceSummaryItem(complianceType: scala.Option[java.lang.String] = None, compliantSummary: scala.Option[models.CompliantSummary] = None, nonCompliantSummary: scala.Option[models.NonCompliantSummary] = None)
final case class DeletePatchBaselineRequest(baselineId: java.lang.String)
final case class InventoryItem(schemaVersion: java.lang.String, captureTime: java.lang.String, typeName: java.lang.String, contentHash: scala.Option[java.lang.String] = None, content: scala.Option[scala.List[scala.collection.immutable.Map[java.lang.String, java.lang.String]]] = None, context: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class ParameterVersionNotFound(message: scala.Option[java.lang.String] = None)
final case class DocumentPermissionLimit(message: scala.Option[java.lang.String] = None)
final case class DescribeDocumentRequest(name: java.lang.String, documentVersion: scala.Option[java.lang.String] = None)
final case class DocumentIdentifier(documentType: scala.Option[java.lang.String] = None, platformTypes: scala.Option[scala.List[java.lang.String]] = None, name: scala.Option[java.lang.String] = None, owner: scala.Option[java.lang.String] = None, tags: scala.Option[scala.List[models.Tag]] = None, schemaVersion: scala.Option[java.lang.String] = None, documentVersion: scala.Option[java.lang.String] = None)
final case class PutComplianceItemsRequest(resourceId: java.lang.String, executionSummary: models.ComplianceExecutionSummary, items: scala.List[models.ComplianceItemEntry], complianceType: java.lang.String, resourceType: java.lang.String, itemContentHash: scala.Option[java.lang.String] = None)
final case class UpdateMaintenanceWindowTaskResult(targets: scala.Option[scala.List[models.Target]] = None, windowTaskId: scala.Option[java.lang.String] = None, name: scala.Option[java.lang.String] = None, taskInvocationParameters: scala.Option[models.MaintenanceWindowTaskInvocationParameters] = None, serviceRoleArn: scala.Option[java.lang.String] = None, maxConcurrency: scala.Option[java.lang.String] = None, taskArn: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, windowId: scala.Option[java.lang.String] = None, taskParameters: scala.Option[scala.collection.immutable.Map[java.lang.String, models.MaintenanceWindowTaskParameterValueExpression]] = None, loggingInfo: scala.Option[models.LoggingInfo] = None, priority: scala.Option[scala.Int] = None, maxErrors: scala.Option[java.lang.String] = None)
final case class ListComplianceItemsRequest(resourceTypes: scala.Option[scala.List[java.lang.String]] = None, filters: scala.Option[scala.List[models.ComplianceStringFilter]] = None, maxResults: scala.Option[scala.Int] = None, resourceIds: scala.Option[scala.List[java.lang.String]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DeregisterTargetFromMaintenanceWindowResult(windowId: scala.Option[java.lang.String] = None, windowTargetId: scala.Option[java.lang.String] = None)
final case class RegisterPatchBaselineForPatchGroupResult(baselineId: scala.Option[java.lang.String] = None, patchGroup: scala.Option[java.lang.String] = None)
final case class CompliantSummary(compliantCount: scala.Option[scala.Int] = None, severitySummary: scala.Option[models.SeveritySummary] = None)
final case class DescribeActivationsFilter(filterKey: scala.Option[java.lang.String] = None, filterValues: scala.Option[scala.List[java.lang.String]] = None)
case object InvalidResourceType
final case class ListResourceComplianceSummariesResult(resourceComplianceSummaryItems: scala.Option[scala.List[models.ResourceComplianceSummaryItem]] = None, nextToken: scala.Option[java.lang.String] = None)
case object CreateResourceDataSyncResult
case object DeleteAssociationResult
final case class UnsupportedPlatformType(message: scala.Option[java.lang.String] = None)
final case class InvalidTarget(message: scala.Option[java.lang.String] = None)
final case class UpdateDocumentResult(documentDescription: scala.Option[models.DocumentDescription] = None)
final case class MaintenanceWindowFilter(key: scala.Option[java.lang.String] = None, values: scala.Option[scala.List[java.lang.String]] = None)
final case class CommandInvocation(instanceId: scala.Option[java.lang.String] = None, documentName: scala.Option[java.lang.String] = None, instanceName: scala.Option[java.lang.String] = None, comment: scala.Option[java.lang.String] = None, statusDetails: scala.Option[java.lang.String] = None, traceOutput: scala.Option[java.lang.String] = None, serviceRole: scala.Option[java.lang.String] = None, commandPlugins: scala.Option[scala.List[models.CommandPlugin]] = None, requestedDateTime: scala.Option[java.time.Instant] = None, status: scala.Option[java.lang.String] = None, commandId: scala.Option[java.lang.String] = None, notificationConfig: scala.Option[models.NotificationConfig] = None, standardOutputUrl: scala.Option[java.lang.String] = None, standardErrorUrl: scala.Option[java.lang.String] = None)
final case class ModifyDocumentPermissionRequest(name: java.lang.String, permissionType: java.lang.String, accountIdsToAdd: scala.Option[scala.List[java.lang.String]] = None, accountIdsToRemove: scala.Option[scala.List[java.lang.String]] = None)
case object AssociatedInstances
final case class CreateAssociationBatchResult(successful: scala.Option[scala.List[models.AssociationDescription]] = None, failed: scala.Option[scala.List[models.FailedCreateAssociation]] = None)
final case class ParameterStringFilter(key: java.lang.String, option: scala.Option[java.lang.String] = None, values: scala.Option[scala.List[java.lang.String]] = None)
final case class ListComplianceSummariesResult(complianceSummaryItems: scala.Option[scala.List[models.ComplianceSummaryItem]] = None, nextToken: scala.Option[java.lang.String] = None)
case object InvalidFilterKey
final case class GetParametersRequest(names: scala.List[java.lang.String], withDecryption: scala.Option[scala.Boolean] = None)
final case class PatchRule(patchFilterGroup: models.PatchFilterGroup, approveAfterDays: scala.Int, complianceLevel: scala.Option[java.lang.String] = None)
final case class InvalidUpdate(message: scala.Option[java.lang.String] = None)
final case class ParameterPatternMismatchException(message: scala.Option[java.lang.String] = None)
final case class InternalServerError(message: scala.Option[java.lang.String] = None)
final case class StepExecution(stepName: scala.Option[java.lang.String] = None, responseCode: scala.Option[java.lang.String] = None, response: scala.Option[java.lang.String] = None, failureMessage: scala.Option[java.lang.String] = None, stepStatus: scala.Option[java.lang.String] = None, outputs: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, failureDetails: scala.Option[models.FailureDetails] = None, action: scala.Option[java.lang.String] = None, executionStartTime: scala.Option[java.time.Instant] = None, executionEndTime: scala.Option[java.time.Instant] = None, inputs: scala.Option[scala.collection.immutable.Map[java.lang.String, java.lang.String]] = None)
final case class MaintenanceWindowAutomationParameters(documentVersion: scala.Option[java.lang.String] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None)
final case class DescribeMaintenanceWindowExecutionTasksResult(windowExecutionTaskIdentities: scala.Option[scala.List[models.MaintenanceWindowExecutionTaskIdentity]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class ParameterNotFound(message: scala.Option[java.lang.String] = None)
final case class UnsupportedInventorySchemaVersionException(message: scala.Option[java.lang.String] = None)
final case class InstanceAssociation(associationId: scala.Option[java.lang.String] = None, instanceId: scala.Option[java.lang.String] = None, content: scala.Option[java.lang.String] = None, associationVersion: scala.Option[java.lang.String] = None)
final case class MaintenanceWindowRunCommandParameters(documentHash: scala.Option[java.lang.String] = None, timeoutSeconds: scala.Option[scala.Int] = None, comment: scala.Option[java.lang.String] = None, documentHashType: scala.Option[java.lang.String] = None, outputS3KeyPrefix: scala.Option[java.lang.String] = None, parameters: scala.Option[scala.collection.immutable.Map[java.lang.String, scala.List[java.lang.String]]] = None, outputS3BucketName: scala.Option[java.lang.String] = None, serviceRoleArn: scala.Option[java.lang.String] = None, notificationConfig: scala.Option[models.NotificationConfig] = None)
final case class ListCommandsRequest(instanceId: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None, commandId: scala.Option[java.lang.String] = None, filters: scala.Option[scala.List[models.CommandFilter]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class GetParameterResult(parameter: scala.Option[models.Parameter] = None)
final case class InvalidSchedule(message: scala.Option[java.lang.String] = None)
final case class UpdateMaintenanceWindowRequest(windowId: java.lang.String, allowUnassociatedTargets: scala.Option[scala.Boolean] = None, name: scala.Option[java.lang.String] = None, description: scala.Option[java.lang.String] = None, cutoff: scala.Option[scala.Int] = None, schedule: scala.Option[java.lang.String] = None, replace: scala.Option[scala.Boolean] = None, duration: scala.Option[scala.Int] = None, enabled: scala.Option[scala.Boolean] = None)
case object PutInventoryResult
final case class DescribeInstancePatchStatesRequest(instanceIds: scala.List[java.lang.String], nextToken: scala.Option[java.lang.String] = None, maxResults: scala.Option[scala.Int] = None)
final case class TargetInUseException(message: scala.Option[java.lang.String] = None)
final case class InvalidKeyId(message: scala.Option[java.lang.String] = None)
final case class InvalidActivationId(message: scala.Option[java.lang.String] = None)
final case class DescribeInstancePatchStatesResult(instancePatchStates: scala.Option[scala.List[models.InstancePatchState]] = None, nextToken: scala.Option[java.lang.String] = None)
final case class DescribeMaintenanceWindowsRequest(filters: scala.Option[scala.List[models.MaintenanceWindowFilter]] = None, maxResults: scala.Option[scala.Int] = None, nextToken: scala.Option[java.lang.String] = None)
final case class InvalidNextToken(message: scala.Option[java.lang.String] = None)
final case class RemoveTagsFromResourceRequest(resourceType: java.lang.String, resourceId: java.lang.String, tagKeys: scala.List[java.lang.String])